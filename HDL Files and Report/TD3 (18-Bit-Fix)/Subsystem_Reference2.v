// -------------------------------------------------------------
// 
// File Name: /Users/ciaran/Documents/MATLAB/Yr3 Intel/stableTD3/hdlsrc/ControllerTestbench/ControllerTestbench/Subsystem_Reference2.v
// Created: 2021-06-15 22:29:09
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 6.25e-05
// Target subsystem base rate: 6.25e-05
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        6.25e-05
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// Action                        ce_out        6.25e-05
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Subsystem_Reference2
// Source Path: ControllerTestbench/Controller_equiv_DC_motor1/PI_Ctrl_float_speed/Reinforcement Learning1/Subsystem 
// Reference
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Subsystem_Reference2
          (clk,
           reset,
           clk_enable,
           Observations_0,
           Observations_1,
           Observations_2,
           Observations_3,
           Observations_4,
           Observations_5,
           Observations_6,
           Observations_7,
           Observations_8,
           ce_out,
           Action);


  input   clk;
  input   reset;
  input   clk_enable;
  input   signed [17:0] Observations_0;  // sfix18_En13
  input   signed [17:0] Observations_1;  // sfix18_En13
  input   signed [17:0] Observations_2;  // sfix18_En13
  input   signed [17:0] Observations_3;  // sfix18_En13
  input   signed [17:0] Observations_4;  // sfix18_En13
  input   signed [17:0] Observations_5;  // sfix18_En13
  input   signed [17:0] Observations_6;  // sfix18_En13
  input   signed [17:0] Observations_7;  // sfix18_En13
  input   signed [17:0] Observations_8;  // sfix18_En13
  output  ce_out;
  output  signed [17:0] Action;  // sfix18_En16


  wire enb;
  wire signed [17:0] c17_weights_1_out1 [0:35];  // sfix18_En15 [36]
  reg signed [17:0] weights_1_out1 [0:3] [0:8];  // sfix18_En15 [4x9]
  wire signed [17:0] bias_1_out1 [0:3];  // sfix18_En17 [4]
  wire [17:0] Input_Layer_4_Neurons_out1_0;  // ufix18_En15
  wire [17:0] Input_Layer_4_Neurons_out1_1;  // ufix18_En15
  wire [17:0] Input_Layer_4_Neurons_out1_2;  // ufix18_En15
  wire [17:0] Input_Layer_4_Neurons_out1_3;  // ufix18_En15
  wire signed [17:0] c19_weights_2_out1 [0:7];  // sfix18_En15 [8]
  reg signed [17:0] weights_2_out1 [0:1] [0:3];  // sfix18_En15 [2x4]
  reg signed [17:0] c25_weights_2_out1 [0:7];  // sfix18_En15 [8]
  wire signed [17:0] c25_weights_2_out1_0;  // sfix18_En15
  wire signed [17:0] c25_weights_2_out1_1;  // sfix18_En15
  wire signed [17:0] c25_weights_2_out1_2;  // sfix18_En15
  wire signed [17:0] c25_weights_2_out1_3;  // sfix18_En15
  wire signed [17:0] c25_weights_2_out1_4;  // sfix18_En15
  wire signed [17:0] c25_weights_2_out1_5;  // sfix18_En15
  wire signed [17:0] c25_weights_2_out1_6;  // sfix18_En15
  wire signed [17:0] c25_weights_2_out1_7;  // sfix18_En15
  wire signed [17:0] delayMatch_out_1;  // sfix18_En15
  reg signed [17:0] delayMatch_1_reg [0:3];  // sfix18 [4]
  wire signed [17:0] delayMatch_out_2;  // sfix18_En15
  wire signed [17:0] delayMatch_out_3;  // sfix18_En15
  wire signed [17:0] delayMatch_out_4;  // sfix18_En15
  wire signed [17:0] delayMatch_out_5;  // sfix18_En15
  wire signed [17:0] delayMatch_out_6;  // sfix18_En15
  wire signed [17:0] delayMatch_out_7;  // sfix18_En15
  wire signed [17:0] delayMatch_out_8;  // sfix18_En15
  reg signed [17:0] delayMatch_1_reg_1 [0:3];  // sfix18 [4]
  reg signed [17:0] delayMatch_1_reg_2 [0:3];  // sfix18 [4]
  reg signed [17:0] delayMatch_1_reg_3 [0:3];  // sfix18 [4]
  reg signed [17:0] delayMatch_1_reg_4 [0:3];  // sfix18 [4]
  reg signed [17:0] delayMatch_1_reg_5 [0:3];  // sfix18 [4]
  reg signed [17:0] delayMatch_1_reg_6 [0:3];  // sfix18 [4]
  reg signed [17:0] delayMatch_1_reg_7 [0:3];  // sfix18 [4]
  wire signed [17:0] delayMatch_1_reg_next [0:3];  // sfix18_En15 [4]
  wire signed [17:0] delayMatch_1_reg_next_1 [0:3];  // sfix18_En15 [4]
  wire signed [17:0] delayMatch_1_reg_next_2 [0:3];  // sfix18_En15 [4]
  wire signed [17:0] delayMatch_1_reg_next_3 [0:3];  // sfix18_En15 [4]
  wire signed [17:0] delayMatch_1_reg_next_4 [0:3];  // sfix18_En15 [4]
  wire signed [17:0] delayMatch_1_reg_next_5 [0:3];  // sfix18_En15 [4]
  wire signed [17:0] delayMatch_1_reg_next_6 [0:3];  // sfix18_En15 [4]
  wire signed [17:0] delayMatch_1_reg_next_7 [0:3];  // sfix18_En15 [4]
  wire signed [17:0] c25_weights_2_out1_8 [0:7];  // sfix18_En15 [8]
  reg signed [17:0] weights_2_out1_1 [0:1] [0:3];  // sfix18_En15 [2x4]
  wire [17:0] bias_2_out1 [0:1];  // ufix18_En18 [2]
  wire [17:0] Hidden_Layer_2_Neurons_out1_0;  // ufix18_En14
  wire [17:0] Hidden_Layer_2_Neurons_out1_1;  // ufix18_En14
  wire signed [17:0] weights_3_out1 [0:1];  // sfix18_En15 [2]
  wire [17:0] bias_3_out1;  // ufix18_En18
  wire signed [17:0] Output_Layer_1_Neuron_out1;  // sfix18_En16

  // INSTRUCTIONS
  // 
  // - This is a basic block level implementation of a simple 3 layer NN
  // - So far I (Ciaran) have been using this architecture for my actor network (8 nodes, 4 nodes, 1 node) but this 
  // may need modified if other group members have different architecture
  // - The first two layers have ReLU activation, the last has tanh so the action output is scaled between 0 and 1
  // 
  // - This block can replace the actor network. It takes the observations vector as input and gives voltage as output. 
  // Reward function, RLAgent block and isDone flag are not required
  // - Be careful that the vector of observations you connect matches the vector of observations the network was trained 
  // on
  // 
  // To get the weight and bias parameters you must load them as a variable named 'actorParams' in your workspace by 
  // running the command
  // 
  // actorParams = getLearnableParameterValues(getActor(agent));
  // 
  // where the trained agent is already in your workspace. 


  assign c17_weights_1_out1[0] = 18'sb000001111001001001;
  assign c17_weights_1_out1[1] = 18'sb110111101110110001;
  assign c17_weights_1_out1[2] = 18'sb111011111001101101;
  assign c17_weights_1_out1[3] = 18'sb001001010011000111;
  assign c17_weights_1_out1[4] = 18'sb000000111110101101;
  assign c17_weights_1_out1[5] = 18'sb011001010110110111;
  assign c17_weights_1_out1[6] = 18'sb000101001011110010;
  assign c17_weights_1_out1[7] = 18'sb110100000010010011;
  assign c17_weights_1_out1[8] = 18'sb000000000001011101;
  assign c17_weights_1_out1[9] = 18'sb111111110100101001;
  assign c17_weights_1_out1[10] = 18'sb111111111000011011;
  assign c17_weights_1_out1[11] = 18'sb000000001011010110;
  assign c17_weights_1_out1[12] = 18'sb111111011101111000;
  assign c17_weights_1_out1[13] = 18'sb111110000101101111;
  assign c17_weights_1_out1[14] = 18'sb111010001011000101;
  assign c17_weights_1_out1[15] = 18'sb111111001100101111;
  assign c17_weights_1_out1[16] = 18'sb000010110100000001;
  assign c17_weights_1_out1[17] = 18'sb001000101100100100;
  assign c17_weights_1_out1[18] = 18'sb111101111000000110;
  assign c17_weights_1_out1[19] = 18'sb111101100101001100;
  assign c17_weights_1_out1[20] = 18'sb111111011110000100;
  assign c17_weights_1_out1[21] = 18'sb000000010111100010;
  assign c17_weights_1_out1[22] = 18'sb000000110101111110;
  assign c17_weights_1_out1[23] = 18'sb000000000111111100;
  assign c17_weights_1_out1[24] = 18'sb111111010011110001;
  assign c17_weights_1_out1[25] = 18'sb111110100011101010;
  assign c17_weights_1_out1[26] = 18'sb111101101010000000;
  assign c17_weights_1_out1[27] = 18'sb111111111001101101;
  assign c17_weights_1_out1[28] = 18'sb000000001001101010;
  assign c17_weights_1_out1[29] = 18'sb111111111010111101;
  assign c17_weights_1_out1[30] = 18'sb111111110101111100;
  assign c17_weights_1_out1[31] = 18'sb111111111110010101;
  assign c17_weights_1_out1[32] = 18'sb000000000110000001;
  assign c17_weights_1_out1[33] = 18'sb000000001101100110;
  assign c17_weights_1_out1[34] = 18'sb000000000110100000;
  assign c17_weights_1_out1[35] = 18'sb111110110011101000;



  always @* begin
    weights_1_out1[0][32'sd0] = c17_weights_1_out1[0];
    weights_1_out1[1][32'sd0] = c17_weights_1_out1[1];
    weights_1_out1[2][32'sd0] = c17_weights_1_out1[2];
    weights_1_out1[3][32'sd0] = c17_weights_1_out1[3];
    weights_1_out1[0][32'sd1] = c17_weights_1_out1[4];
    weights_1_out1[1][32'sd1] = c17_weights_1_out1[5];
    weights_1_out1[2][32'sd1] = c17_weights_1_out1[6];
    weights_1_out1[3][32'sd1] = c17_weights_1_out1[7];
    weights_1_out1[0][32'sd2] = c17_weights_1_out1[8];
    weights_1_out1[1][32'sd2] = c17_weights_1_out1[9];
    weights_1_out1[2][32'sd2] = c17_weights_1_out1[10];
    weights_1_out1[3][32'sd2] = c17_weights_1_out1[11];
    weights_1_out1[0][32'sd3] = c17_weights_1_out1[12];
    weights_1_out1[1][32'sd3] = c17_weights_1_out1[13];
    weights_1_out1[2][32'sd3] = c17_weights_1_out1[14];
    weights_1_out1[3][32'sd3] = c17_weights_1_out1[15];
    weights_1_out1[0][32'sd4] = c17_weights_1_out1[16];
    weights_1_out1[1][32'sd4] = c17_weights_1_out1[17];
    weights_1_out1[2][32'sd4] = c17_weights_1_out1[18];
    weights_1_out1[3][32'sd4] = c17_weights_1_out1[19];
    weights_1_out1[0][32'sd5] = c17_weights_1_out1[20];
    weights_1_out1[1][32'sd5] = c17_weights_1_out1[21];
    weights_1_out1[2][32'sd5] = c17_weights_1_out1[22];
    weights_1_out1[3][32'sd5] = c17_weights_1_out1[23];
    weights_1_out1[0][32'sd6] = c17_weights_1_out1[24];
    weights_1_out1[1][32'sd6] = c17_weights_1_out1[25];
    weights_1_out1[2][32'sd6] = c17_weights_1_out1[26];
    weights_1_out1[3][32'sd6] = c17_weights_1_out1[27];
    weights_1_out1[0][32'sd7] = c17_weights_1_out1[28];
    weights_1_out1[1][32'sd7] = c17_weights_1_out1[29];
    weights_1_out1[2][32'sd7] = c17_weights_1_out1[30];
    weights_1_out1[3][32'sd7] = c17_weights_1_out1[31];
    weights_1_out1[0][32'sd8] = c17_weights_1_out1[32];
    weights_1_out1[1][32'sd8] = c17_weights_1_out1[33];
    weights_1_out1[2][32'sd8] = c17_weights_1_out1[34];
    weights_1_out1[3][32'sd8] = c17_weights_1_out1[35];
  end



  assign bias_1_out1[0] = 18'sb111010101011011110;
  assign bias_1_out1[1] = 18'sb001000111111111001;
  assign bias_1_out1[2] = 18'sb010000101011010110;
  assign bias_1_out1[3] = 18'sb011000111101000100;



  Input_Layer_4_Neurons u_Input_Layer_4_Neurons (.clk(clk),
                                                 .reset(reset),
                                                 .enb(clk_enable),
                                                 .layer_input_0(Observations_0),  // sfix18_En13
                                                 .layer_input_1(Observations_1),  // sfix18_En13
                                                 .layer_input_2(Observations_2),  // sfix18_En13
                                                 .layer_input_3(Observations_3),  // sfix18_En13
                                                 .layer_input_4(Observations_4),  // sfix18_En13
                                                 .layer_input_5(Observations_5),  // sfix18_En13
                                                 .layer_input_6(Observations_6),  // sfix18_En13
                                                 .layer_input_7(Observations_7),  // sfix18_En13
                                                 .layer_input_8(Observations_8),  // sfix18_En13
                                                 .weights_matrix_0(weights_1_out1[0][0]),  // sfix18_En15
                                                 .weights_matrix_1(weights_1_out1[1][0]),  // sfix18_En15
                                                 .weights_matrix_2(weights_1_out1[2][0]),  // sfix18_En15
                                                 .weights_matrix_3(weights_1_out1[3][0]),  // sfix18_En15
                                                 .weights_matrix_4(weights_1_out1[0][1]),  // sfix18_En15
                                                 .weights_matrix_5(weights_1_out1[1][1]),  // sfix18_En15
                                                 .weights_matrix_6(weights_1_out1[2][1]),  // sfix18_En15
                                                 .weights_matrix_7(weights_1_out1[3][1]),  // sfix18_En15
                                                 .weights_matrix_8(weights_1_out1[0][2]),  // sfix18_En15
                                                 .weights_matrix_9(weights_1_out1[1][2]),  // sfix18_En15
                                                 .weights_matrix_10(weights_1_out1[2][2]),  // sfix18_En15
                                                 .weights_matrix_11(weights_1_out1[3][2]),  // sfix18_En15
                                                 .weights_matrix_12(weights_1_out1[0][3]),  // sfix18_En15
                                                 .weights_matrix_13(weights_1_out1[1][3]),  // sfix18_En15
                                                 .weights_matrix_14(weights_1_out1[2][3]),  // sfix18_En15
                                                 .weights_matrix_15(weights_1_out1[3][3]),  // sfix18_En15
                                                 .weights_matrix_16(weights_1_out1[0][4]),  // sfix18_En15
                                                 .weights_matrix_17(weights_1_out1[1][4]),  // sfix18_En15
                                                 .weights_matrix_18(weights_1_out1[2][4]),  // sfix18_En15
                                                 .weights_matrix_19(weights_1_out1[3][4]),  // sfix18_En15
                                                 .weights_matrix_20(weights_1_out1[0][5]),  // sfix18_En15
                                                 .weights_matrix_21(weights_1_out1[1][5]),  // sfix18_En15
                                                 .weights_matrix_22(weights_1_out1[2][5]),  // sfix18_En15
                                                 .weights_matrix_23(weights_1_out1[3][5]),  // sfix18_En15
                                                 .weights_matrix_24(weights_1_out1[0][6]),  // sfix18_En15
                                                 .weights_matrix_25(weights_1_out1[1][6]),  // sfix18_En15
                                                 .weights_matrix_26(weights_1_out1[2][6]),  // sfix18_En15
                                                 .weights_matrix_27(weights_1_out1[3][6]),  // sfix18_En15
                                                 .weights_matrix_28(weights_1_out1[0][7]),  // sfix18_En15
                                                 .weights_matrix_29(weights_1_out1[1][7]),  // sfix18_En15
                                                 .weights_matrix_30(weights_1_out1[2][7]),  // sfix18_En15
                                                 .weights_matrix_31(weights_1_out1[3][7]),  // sfix18_En15
                                                 .weights_matrix_32(weights_1_out1[0][8]),  // sfix18_En15
                                                 .weights_matrix_33(weights_1_out1[1][8]),  // sfix18_En15
                                                 .weights_matrix_34(weights_1_out1[2][8]),  // sfix18_En15
                                                 .weights_matrix_35(weights_1_out1[3][8]),  // sfix18_En15
                                                 .bias_vector_0(bias_1_out1[0]),  // sfix18_En17
                                                 .bias_vector_1(bias_1_out1[1]),  // sfix18_En17
                                                 .bias_vector_2(bias_1_out1[2]),  // sfix18_En17
                                                 .bias_vector_3(bias_1_out1[3]),  // sfix18_En17
                                                 .layer_output_0(Input_Layer_4_Neurons_out1_0),  // ufix18_En15
                                                 .layer_output_1(Input_Layer_4_Neurons_out1_1),  // ufix18_En15
                                                 .layer_output_2(Input_Layer_4_Neurons_out1_2),  // ufix18_En15
                                                 .layer_output_3(Input_Layer_4_Neurons_out1_3)  // ufix18_En15
                                                 );

  assign c19_weights_2_out1[0] = 18'sb111100000100001010;
  assign c19_weights_2_out1[1] = 18'sb000011011110101000;
  assign c19_weights_2_out1[2] = 18'sb101110101000000100;
  assign c19_weights_2_out1[3] = 18'sb001101101001110100;
  assign c19_weights_2_out1[4] = 18'sb111100010001111010;
  assign c19_weights_2_out1[5] = 18'sb000100001110100100;
  assign c19_weights_2_out1[6] = 18'sb001010010010000101;
  assign c19_weights_2_out1[7] = 18'sb111011100001110001;



  always @* begin
    weights_2_out1[0][32'sd0] = c19_weights_2_out1[0];
    weights_2_out1[1][32'sd0] = c19_weights_2_out1[1];
    weights_2_out1[0][32'sd1] = c19_weights_2_out1[2];
    weights_2_out1[1][32'sd1] = c19_weights_2_out1[3];
    weights_2_out1[0][32'sd2] = c19_weights_2_out1[4];
    weights_2_out1[1][32'sd2] = c19_weights_2_out1[5];
    weights_2_out1[0][32'sd3] = c19_weights_2_out1[6];
    weights_2_out1[1][32'sd3] = c19_weights_2_out1[7];
  end



  always @* begin
    c25_weights_2_out1[0] = weights_2_out1[0][32'sd0];
    c25_weights_2_out1[1] = weights_2_out1[1][32'sd0];
    c25_weights_2_out1[2] = weights_2_out1[0][32'sd1];
    c25_weights_2_out1[3] = weights_2_out1[1][32'sd1];
    c25_weights_2_out1[4] = weights_2_out1[0][32'sd2];
    c25_weights_2_out1[5] = weights_2_out1[1][32'sd2];
    c25_weights_2_out1[6] = weights_2_out1[0][32'sd3];
    c25_weights_2_out1[7] = weights_2_out1[1][32'sd3];
  end



  assign c25_weights_2_out1_0 = c25_weights_2_out1[0];

  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : delayMatch_1_process
      if (reset == 1'b1) begin
        delayMatch_1_reg[0] <= 18'sb000000000000000000;
        delayMatch_1_reg[1] <= 18'sb000000000000000000;
        delayMatch_1_reg[2] <= 18'sb000000000000000000;
        delayMatch_1_reg[3] <= 18'sb000000000000000000;
        delayMatch_1_reg_1[0] <= 18'sb000000000000000000;
        delayMatch_1_reg_1[1] <= 18'sb000000000000000000;
        delayMatch_1_reg_1[2] <= 18'sb000000000000000000;
        delayMatch_1_reg_1[3] <= 18'sb000000000000000000;
        delayMatch_1_reg_2[0] <= 18'sb000000000000000000;
        delayMatch_1_reg_2[1] <= 18'sb000000000000000000;
        delayMatch_1_reg_2[2] <= 18'sb000000000000000000;
        delayMatch_1_reg_2[3] <= 18'sb000000000000000000;
        delayMatch_1_reg_3[0] <= 18'sb000000000000000000;
        delayMatch_1_reg_3[1] <= 18'sb000000000000000000;
        delayMatch_1_reg_3[2] <= 18'sb000000000000000000;
        delayMatch_1_reg_3[3] <= 18'sb000000000000000000;
        delayMatch_1_reg_4[0] <= 18'sb000000000000000000;
        delayMatch_1_reg_4[1] <= 18'sb000000000000000000;
        delayMatch_1_reg_4[2] <= 18'sb000000000000000000;
        delayMatch_1_reg_4[3] <= 18'sb000000000000000000;
        delayMatch_1_reg_5[0] <= 18'sb000000000000000000;
        delayMatch_1_reg_5[1] <= 18'sb000000000000000000;
        delayMatch_1_reg_5[2] <= 18'sb000000000000000000;
        delayMatch_1_reg_5[3] <= 18'sb000000000000000000;
        delayMatch_1_reg_6[0] <= 18'sb000000000000000000;
        delayMatch_1_reg_6[1] <= 18'sb000000000000000000;
        delayMatch_1_reg_6[2] <= 18'sb000000000000000000;
        delayMatch_1_reg_6[3] <= 18'sb000000000000000000;
        delayMatch_1_reg_7[0] <= 18'sb000000000000000000;
        delayMatch_1_reg_7[1] <= 18'sb000000000000000000;
        delayMatch_1_reg_7[2] <= 18'sb000000000000000000;
        delayMatch_1_reg_7[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_1_reg[0] <= delayMatch_1_reg_next[0];
          delayMatch_1_reg[1] <= delayMatch_1_reg_next[1];
          delayMatch_1_reg[2] <= delayMatch_1_reg_next[2];
          delayMatch_1_reg[3] <= delayMatch_1_reg_next[3];
          delayMatch_1_reg_1[0] <= delayMatch_1_reg_next_1[0];
          delayMatch_1_reg_1[1] <= delayMatch_1_reg_next_1[1];
          delayMatch_1_reg_1[2] <= delayMatch_1_reg_next_1[2];
          delayMatch_1_reg_1[3] <= delayMatch_1_reg_next_1[3];
          delayMatch_1_reg_2[0] <= delayMatch_1_reg_next_2[0];
          delayMatch_1_reg_2[1] <= delayMatch_1_reg_next_2[1];
          delayMatch_1_reg_2[2] <= delayMatch_1_reg_next_2[2];
          delayMatch_1_reg_2[3] <= delayMatch_1_reg_next_2[3];
          delayMatch_1_reg_3[0] <= delayMatch_1_reg_next_3[0];
          delayMatch_1_reg_3[1] <= delayMatch_1_reg_next_3[1];
          delayMatch_1_reg_3[2] <= delayMatch_1_reg_next_3[2];
          delayMatch_1_reg_3[3] <= delayMatch_1_reg_next_3[3];
          delayMatch_1_reg_4[0] <= delayMatch_1_reg_next_4[0];
          delayMatch_1_reg_4[1] <= delayMatch_1_reg_next_4[1];
          delayMatch_1_reg_4[2] <= delayMatch_1_reg_next_4[2];
          delayMatch_1_reg_4[3] <= delayMatch_1_reg_next_4[3];
          delayMatch_1_reg_5[0] <= delayMatch_1_reg_next_5[0];
          delayMatch_1_reg_5[1] <= delayMatch_1_reg_next_5[1];
          delayMatch_1_reg_5[2] <= delayMatch_1_reg_next_5[2];
          delayMatch_1_reg_5[3] <= delayMatch_1_reg_next_5[3];
          delayMatch_1_reg_6[0] <= delayMatch_1_reg_next_6[0];
          delayMatch_1_reg_6[1] <= delayMatch_1_reg_next_6[1];
          delayMatch_1_reg_6[2] <= delayMatch_1_reg_next_6[2];
          delayMatch_1_reg_6[3] <= delayMatch_1_reg_next_6[3];
          delayMatch_1_reg_7[0] <= delayMatch_1_reg_next_7[0];
          delayMatch_1_reg_7[1] <= delayMatch_1_reg_next_7[1];
          delayMatch_1_reg_7[2] <= delayMatch_1_reg_next_7[2];
          delayMatch_1_reg_7[3] <= delayMatch_1_reg_next_7[3];
        end
      end
    end

  assign delayMatch_1_reg_next[0] = c25_weights_2_out1_0;
  assign delayMatch_1_reg_next[1] = delayMatch_1_reg[0];
  assign delayMatch_1_reg_next[2] = delayMatch_1_reg[1];
  assign delayMatch_1_reg_next[3] = delayMatch_1_reg[2];
  assign delayMatch_out_1 = delayMatch_1_reg[3];
  assign delayMatch_1_reg_next_1[0] = c25_weights_2_out1_1;
  assign delayMatch_1_reg_next_1[1] = delayMatch_1_reg_1[0];
  assign delayMatch_1_reg_next_1[2] = delayMatch_1_reg_1[1];
  assign delayMatch_1_reg_next_1[3] = delayMatch_1_reg_1[2];
  assign delayMatch_out_2 = delayMatch_1_reg_1[3];
  assign delayMatch_1_reg_next_2[0] = c25_weights_2_out1_2;
  assign delayMatch_1_reg_next_2[1] = delayMatch_1_reg_2[0];
  assign delayMatch_1_reg_next_2[2] = delayMatch_1_reg_2[1];
  assign delayMatch_1_reg_next_2[3] = delayMatch_1_reg_2[2];
  assign delayMatch_out_3 = delayMatch_1_reg_2[3];
  assign delayMatch_1_reg_next_3[0] = c25_weights_2_out1_3;
  assign delayMatch_1_reg_next_3[1] = delayMatch_1_reg_3[0];
  assign delayMatch_1_reg_next_3[2] = delayMatch_1_reg_3[1];
  assign delayMatch_1_reg_next_3[3] = delayMatch_1_reg_3[2];
  assign delayMatch_out_4 = delayMatch_1_reg_3[3];
  assign delayMatch_1_reg_next_4[0] = c25_weights_2_out1_4;
  assign delayMatch_1_reg_next_4[1] = delayMatch_1_reg_4[0];
  assign delayMatch_1_reg_next_4[2] = delayMatch_1_reg_4[1];
  assign delayMatch_1_reg_next_4[3] = delayMatch_1_reg_4[2];
  assign delayMatch_out_5 = delayMatch_1_reg_4[3];
  assign delayMatch_1_reg_next_5[0] = c25_weights_2_out1_5;
  assign delayMatch_1_reg_next_5[1] = delayMatch_1_reg_5[0];
  assign delayMatch_1_reg_next_5[2] = delayMatch_1_reg_5[1];
  assign delayMatch_1_reg_next_5[3] = delayMatch_1_reg_5[2];
  assign delayMatch_out_6 = delayMatch_1_reg_5[3];
  assign delayMatch_1_reg_next_6[0] = c25_weights_2_out1_6;
  assign delayMatch_1_reg_next_6[1] = delayMatch_1_reg_6[0];
  assign delayMatch_1_reg_next_6[2] = delayMatch_1_reg_6[1];
  assign delayMatch_1_reg_next_6[3] = delayMatch_1_reg_6[2];
  assign delayMatch_out_7 = delayMatch_1_reg_6[3];
  assign delayMatch_1_reg_next_7[0] = c25_weights_2_out1_7;
  assign delayMatch_1_reg_next_7[1] = delayMatch_1_reg_7[0];
  assign delayMatch_1_reg_next_7[2] = delayMatch_1_reg_7[1];
  assign delayMatch_1_reg_next_7[3] = delayMatch_1_reg_7[2];
  assign delayMatch_out_8 = delayMatch_1_reg_7[3];



  assign c25_weights_2_out1_1 = c25_weights_2_out1[1];

  assign c25_weights_2_out1_2 = c25_weights_2_out1[2];

  assign c25_weights_2_out1_3 = c25_weights_2_out1[3];

  assign c25_weights_2_out1_4 = c25_weights_2_out1[4];

  assign c25_weights_2_out1_5 = c25_weights_2_out1[5];

  assign c25_weights_2_out1_6 = c25_weights_2_out1[6];

  assign c25_weights_2_out1_7 = c25_weights_2_out1[7];

  assign c25_weights_2_out1_8[0] = delayMatch_out_1;
  assign c25_weights_2_out1_8[1] = delayMatch_out_2;
  assign c25_weights_2_out1_8[2] = delayMatch_out_3;
  assign c25_weights_2_out1_8[3] = delayMatch_out_4;
  assign c25_weights_2_out1_8[4] = delayMatch_out_5;
  assign c25_weights_2_out1_8[5] = delayMatch_out_6;
  assign c25_weights_2_out1_8[6] = delayMatch_out_7;
  assign c25_weights_2_out1_8[7] = delayMatch_out_8;

  always @* begin
    weights_2_out1_1[0][32'sd0] = c25_weights_2_out1_8[0];
    weights_2_out1_1[1][32'sd0] = c25_weights_2_out1_8[1];
    weights_2_out1_1[0][32'sd1] = c25_weights_2_out1_8[2];
    weights_2_out1_1[1][32'sd1] = c25_weights_2_out1_8[3];
    weights_2_out1_1[0][32'sd2] = c25_weights_2_out1_8[4];
    weights_2_out1_1[1][32'sd2] = c25_weights_2_out1_8[5];
    weights_2_out1_1[0][32'sd3] = c25_weights_2_out1_8[6];
    weights_2_out1_1[1][32'sd3] = c25_weights_2_out1_8[7];
  end



  assign bias_2_out1[0] = 18'b110101110110011001;
  assign bias_2_out1[1] = 18'b001000011011000110;



  Hidden_Layer_2_Neurons u_Hidden_Layer_2_Neurons (.clk(clk),
                                                   .reset(reset),
                                                   .enb(clk_enable),
                                                   .layer_input_0(Input_Layer_4_Neurons_out1_0),  // ufix18_En15
                                                   .layer_input_1(Input_Layer_4_Neurons_out1_1),  // ufix18_En15
                                                   .layer_input_2(Input_Layer_4_Neurons_out1_2),  // ufix18_En15
                                                   .layer_input_3(Input_Layer_4_Neurons_out1_3),  // ufix18_En15
                                                   .weights_matrix_0(weights_2_out1_1[0][0]),  // sfix18_En15
                                                   .weights_matrix_1(weights_2_out1_1[1][0]),  // sfix18_En15
                                                   .weights_matrix_2(weights_2_out1_1[0][1]),  // sfix18_En15
                                                   .weights_matrix_3(weights_2_out1_1[1][1]),  // sfix18_En15
                                                   .weights_matrix_4(weights_2_out1_1[0][2]),  // sfix18_En15
                                                   .weights_matrix_5(weights_2_out1_1[1][2]),  // sfix18_En15
                                                   .weights_matrix_6(weights_2_out1_1[0][3]),  // sfix18_En15
                                                   .weights_matrix_7(weights_2_out1_1[1][3]),  // sfix18_En15
                                                   .bias_vector_0(bias_2_out1[0]),  // ufix18_En18
                                                   .bias_vector_1(bias_2_out1[1]),  // ufix18_En18
                                                   .layer_output_0(Hidden_Layer_2_Neurons_out1_0),  // ufix18_En14
                                                   .layer_output_1(Hidden_Layer_2_Neurons_out1_1)  // ufix18_En14
                                                   );

  assign weights_3_out1[0] = 18'sb101001111111010011;
  assign weights_3_out1[1] = 18'sb001101011000111111;



  assign bias_3_out1 = 18'b110100110101101110;



  Output_Layer_1_Neuron u_Output_Layer_1_Neuron (.clk(clk),
                                                 .reset(reset),
                                                 .enb(clk_enable),
                                                 .layer_input_0(Hidden_Layer_2_Neurons_out1_0),  // ufix18_En14
                                                 .layer_input_1(Hidden_Layer_2_Neurons_out1_1),  // ufix18_En14
                                                 .weights_matrix1_0(weights_3_out1[0]),  // sfix18_En15
                                                 .weights_matrix1_1(weights_3_out1[1]),  // sfix18_En15
                                                 .bias_vector1(bias_3_out1),  // ufix18_En18
                                                 .layer_output(Output_Layer_1_Neuron_out1)  // sfix18_En16
                                                 );

  assign Action = Output_Layer_1_Neuron_out1;

  assign ce_out = clk_enable;

endmodule  // Subsystem_Reference2

