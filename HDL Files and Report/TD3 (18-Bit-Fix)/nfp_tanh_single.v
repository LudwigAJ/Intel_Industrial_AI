// -------------------------------------------------------------
// 
// File Name: /Users/ciaran/Documents/MATLAB/Yr3 Intel/stableTD3/hdlsrc/ControllerTestbench/ControllerTestbench/nfp_tanh_single.v
// Created: 2021-06-15 22:29:09
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: nfp_tanh_single
// Source Path: ControllerTestbench/Controller_equiv_DC_motor1/PI_Ctrl_float_speed/Reinforcement Learning1/Subsystem 
// Reference2/Output Layer (1 Neuron)/nfp_tanh_singl
// Hierarchy Level: 2
// 
// {Latency Strategy = "Max"}
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module nfp_tanh_single
          (clk,
           reset,
           enb,
           nfp_in,
           nfp_out);


  input   clk;
  input   reset;
  input   enb;
  input   [31:0] nfp_in;  // ufix32
  output  [31:0] nfp_out;  // ufix32


  wire Constant8_out1;  // ufix1
  wire [5:0] Constant7_out1;  // ufix6
  wire Relational_Operator_relop1;
  reg  Delay4_out1;  // ufix1
  wire Logical_Operator_out1;  // ufix1
  wire [5:0] Add_out1;  // ufix6
  reg [5:0] Delay3_out1;  // ufix6
  wire [5:0] Add_1;  // ufix6
  reg  Delay1_out1;  // ufix1
  wire aSign;  // ufix1
  wire [7:0] aExponent;  // ufix8
  wire [22:0] aMantissa;  // ufix23
  reg  Delay_out1;  // ufix1
  reg  [0:40] Delay6_reg;  // ufix1 [41]
  wire [0:40] Delay6_reg_next;  // ufix1 [41]
  wire Delay6_out1;  // ufix1
  wire Constant1_out1;  // ufix1
  wire Switch1_out1;  // ufix1
  reg  Delay3_out1_1;  // ufix1
  reg [7:0] Delay1_out1_1;  // ufix8
  wire aExponent_cfType_Exponent_I_1_out1;  // ufix1
  wire aExponent_cfType_Exponent_I_2_out1;  // ufix1
  wire Logical_Operator_out1_1;  // ufix1
  reg  [0:40] Delay9_reg;  // ufix1 [41]
  wire [0:40] Delay9_reg_next;  // ufix1 [41]
  wire Delay9_out1;  // ufix1
  wire alpha0_out1;  // ufix1
  wire alpha127_6_out1;  // ufix1
  reg  [0:2] Delay8_reg;  // ufix1 [3]
  wire [0:2] Delay8_reg_next;  // ufix1 [3]
  wire Delay8_out1;  // ufix1
  reg  Delay6_out1_1;  // ufix1
  reg  Delay31_out1;  // ufix1
  reg  [0:13] Delay46_reg;  // ufix1 [14]
  wire [0:13] Delay46_reg_next;  // ufix1 [14]
  wire Delay46_out1;  // ufix1
  reg  [0:5] Delay8_reg_1;  // ufix1 [6]
  wire [0:5] Delay8_reg_next_1;  // ufix1 [6]
  wire Delay8_out1_1;  // ufix1
  reg  [0:1] Delay7_reg;  // ufix1 [2]
  wire [0:1] Delay7_reg_next;  // ufix1 [2]
  wire Delay7_out1;  // ufix1
  reg  Delay6_out1_2;  // ufix1
  wire Constant_out1;  // ufix1
  reg  Delay3_out1_2;  // ufix1
  wire signed [35:0] Constant3_out1;  // sfix36_En33
  wire [1:0] Constant3_out1_1;  // ufix2
  wire Constant_out1_1;  // ufix1
  reg [22:0] Delay2_out1;  // ufix23
  wire [23:0] Bit_Concat_out1;  // ufix24
  wire [23:0] reinterpretcast_mant_cor_nume_out1;  // ufix24_En23
  reg [23:0] appendMantissaAndCorrectExponent_out2;  // ufix24_En23
  reg [23:0] reduced_reg [0:1];  // ufix24 [2]
  wire [23:0] reduced_reg_next [0:1];  // ufix24_En23 [2]
  wire [23:0] appendMantissaAndCorrectExponent_out2_1;  // ufix24_En23
  reg [23:0] Delay8_out1_2;  // ufix24_En23
  reg [23:0] Delay34_out1;  // ufix24_En23
  reg [23:0] Delay50_reg [0:13];  // ufix24 [14]
  wire [23:0] Delay50_reg_next [0:13];  // ufix24_En23 [14]
  wire [23:0] Delay50_out1;  // ufix24_En23
  reg [23:0] Delay13_reg [0:5];  // ufix24 [6]
  wire [23:0] Delay13_reg_next [0:5];  // ufix24_En23 [6]
  wire [23:0] Delay13_out1;  // ufix24_En23
  wire [9:0] Constant4_out1;  // ufix10
  wire [35:0] Bit_Concat2_out1;  // ufix36
  wire signed [35:0] Data_Type_Conversion2_out1;  // sfix36_En33
  wire signed [35:0] Switch4_out1;  // sfix36_En33
  reg signed [35:0] Delay1_out1_2;  // sfix36_En33
  wire [34:0] cast_1_like_mant_frac_out1;  // ufix35_En33
  wire [1:0] alpha0_out1_1;  // ufix2
  wire [2:0] alpha0_out1_2;  // ufix3
  wire [33:0] Log2_E_out1;  // ufix34_En33
  wire [9:0] alpha2_out1;  // ufix10
  wire [33:0] Bit_Concat_out1_1;  // ufix34
  wire [33:0] Data_Type_Conversion_out1;  // ufix34_En33
  wire [33:0] Switch_out1;  // ufix34_En33
  reg [33:0] Delay4_out1_1;  // ufix34_En33
  wire [57:0] tmp1_1_66096404753625392914_mul_temp;  // ufix58_En56
  wire [34:0] tmp1_1_66096404753625392914_out1;  // ufix35_En33
  reg [34:0] Delay_reg [0:1];  // ufix35 [2]
  wire [34:0] Delay_reg_next [0:1];  // ufix35_En33 [2]
  wire [34:0] Delay_out1_1;  // ufix35_En33
  wire BitSlice_out1;  // ufix1
  reg [7:0] Delay1_reg [0:1];  // ufix8 [2]
  wire [7:0] Delay1_reg_next [0:1];  // ufix8 [2]
  wire [7:0] Delay1_out1_3;  // ufix8
  reg [7:0] Delay1_out1_4;  // ufix8
  wire [7:0] alpha1_out1;  // ufix8
  wire [31:0] exp_cor_1_add_temp;  // ufix32
  wire [31:0] exp_cor_1_1;  // ufix32
  wire [31:0] exp_cor_1_2;  // ufix32
  wire [7:0] exp_cor_1_out1;  // ufix8
  reg [7:0] Delay2_out1_1;  // ufix8
  wire [7:0] if_bitget_tmp2_tmp2_WordLength_out1;  // ufix8
  wire [10:0] Bit_Concat_out1_2;  // ufix11
  wire signed [10:0] reinterpretcast_bitconcat_fi_0_out1;  // sfix11
  wire signed [10:0] cast_cfType_ExponentBias_lik_out1;  // sfix11
  wire signed [10:0] exp_tmp_cast_cfType_Exponent_out1;  // sfix11
  wire BitSlice_out1_1;  // ufix1
  reg  Delay3_out1_3;  // ufix1
  wire [7:0] alpha3_out1;  // ufix8
  wire [33:0] BitSlice2_out1;  // ufix34
  wire [33:0] reinterpretcast_bitsliceget_t_out1;  // ufix34_En33
  wire [33:0] BitSlice1_out1;  // ufix34
  wire [33:0] reinterpretcast_bitsliceget_t_out1_1;  // ufix34_En33
  wire [33:0] if_bitget_tmp2_tmp2_WordLength_1_out1;  // ufix34_En33
  wire [41:0] Bit_Concat3_out1;  // ufix42
  wire [38:0] reinterpretcast_bitconcat_fi_0_out1_1;  // ufix39_En33
  reg [38:0] Delay_out1_2;  // ufix39_En33
  wire [5:0] DTC2_out1;  // ufix6
  reg [5:0] Delay5_out1;  // ufix6
  wire [7:0] dynamic_shift_cast;  // uint8
  wire [38:0] bitsll_tmp1_shift_length_out1;  // ufix39_En33
  wire [7:0] cast_cfType_ExponentBias_lik_out1_1;  // ufix8
  wire [7:0] cast_cfType_ExponentBias_lik_out1_2;  // ufix8
  wire [5:0] DTC1_out1;  // ufix6
  reg [5:0] Delay10_out1;  // ufix6
  wire [7:0] dynamic_shift_cast_1;  // uint8
  wire [38:0] Shift_Arithmetic_out1;  // ufix39_En33
  wire [38:0] if_shift_sign_out1;  // ufix39_En33
  reg [38:0] Delay3_out1_4;  // ufix39_En33
  wire [32:0] BitSlice_out1_2;  // ufix33
  wire [34:0] Bit_Concat_out1_3;  // ufix35
  wire [34:0] reinterpretcast_bitconcat_fi_0_out1_2;  // ufix35_En33
  wire [34:0] cast_1_like_mant_frac_m_out1;  // ufix35_En33
  wire BitSlice1_out1_1;  // ufix1
  wire Logical_Operator_out1_2;  // ufix1
  wire [34:0] if_sticky_1_out1;  // ufix35_En33
  reg [34:0] Delay1_out1_5;  // ufix35_En33
  wire [34:0] Bit_Shift_out1;  // ufix35_En33
  wire signed [34:0] Data_Type_Conversion_out1_1;  // sfix35_En33
  wire BitSlice_out1_3;  // ufix1
  wire signed [34:0] Log2Table_1_out1;  // sfix35_En33
  wire signed [34:0] w_Log2Table_1_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1;  // sfix35_En33
  reg signed [34:0] Delay12_out1;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1;  // sfix35_En33
  wire BitSlice1_out1_2;  // ufix1
  wire BitSlice_out1_4;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1;  // ufix1
  wire signed [34:0] Log2Table_int32_2_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_2_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_1_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_1;  // sfix35_En33
  reg signed [34:0] Delay1_out1_6;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_1;  // sfix35_En33
  wire BitSlice1_out1_3;  // ufix1
  wire BitSlice_out1_5;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_1;  // ufix1
  wire signed [34:0] Log2Table_int32_3_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_3_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_1;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_2;  // sfix35_En33
  reg signed [34:0] Delay11_out1;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_2;  // sfix35_En33
  wire BitSlice1_out1_4;  // ufix1
  wire BitSlice_out1_6;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_2;  // ufix1
  wire signed [34:0] Log2Table_int32_4_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_4_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_2;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_3;  // sfix35_En33
  reg signed [34:0] Delay3_out1_5;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_3;  // sfix35_En33
  wire BitSlice1_out1_5;  // ufix1
  wire BitSlice_out1_7;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_3;  // ufix1
  wire signed [34:0] Log2Table_int32_5_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_5_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_3;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_2;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_4;  // sfix35_En33
  reg signed [34:0] Delay13_out1_1;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_4;  // sfix35_En33
  wire BitSlice1_out1_6;  // ufix1
  wire BitSlice_out1_8;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_4;  // ufix1
  wire signed [34:0] Log2Table_int32_6_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_6_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_4;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_3;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_5;  // sfix35_En33
  reg signed [34:0] Delay5_out1_1;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_5;  // sfix35_En33
  wire BitSlice1_out1_7;  // ufix1
  wire BitSlice_out1_9;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_5;  // ufix1
  wire signed [34:0] Log2Table_int32_7_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_7_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_5;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_4;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_6;  // sfix35_En33
  reg signed [34:0] Delay15_out1;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_6;  // sfix35_En33
  wire BitSlice1_out1_8;  // ufix1
  wire BitSlice_out1_10;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_6;  // ufix1
  wire signed [34:0] Log2Table_int32_8_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_8_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_6;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_5;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_7;  // sfix35_En33
  reg signed [34:0] Delay7_out1_1;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_7;  // sfix35_En33
  wire BitSlice1_out1_9;  // ufix1
  wire BitSlice_out1_11;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_7;  // ufix1
  wire signed [34:0] Log2Table_int32_9_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_9_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_7;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_6;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_8;  // sfix35_En33
  reg signed [34:0] Delay17_out1;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_8;  // sfix35_En33
  wire BitSlice1_out1_10;  // ufix1
  wire BitSlice_out1_12;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_8;  // ufix1
  wire signed [34:0] Log2Table_int32_10_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_10_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_8;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_7;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_9;  // sfix35_En33
  reg signed [34:0] Delay9_out1_1;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_9;  // sfix35_En33
  wire BitSlice1_out1_11;  // ufix1
  wire BitSlice_out1_13;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_9;  // ufix1
  wire signed [34:0] Log2Table_int32_11_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_11_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_9;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_8;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_10;  // sfix35_En33
  reg signed [34:0] Delay19_out1;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_10;  // sfix35_En33
  wire BitSlice1_out1_12;  // ufix1
  wire BitSlice_out1_14;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_10;  // ufix1
  wire signed [34:0] Log2Table_int32_12_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_12_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_10;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_9;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_11;  // sfix35_En33
  reg signed [34:0] Delay23_out1;  // sfix35_En33
  wire signed [34:0] bitsll_w_1_out1_11;  // sfix35_En33
  wire BitSlice1_out1_13;  // ufix1
  wire BitSlice_out1_15;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_11;  // ufix1
  wire signed [34:0] Log2Table_int32_13_out1;  // sfix35_En33
  wire signed [34:0] Log2MinusTable_int32_13_out1;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_0_out1_11;  // sfix35_En33
  wire signed [34:0] w_Log2MinusTable_int32_2_out1_10;  // sfix35_En33
  wire signed [34:0] if_bitget_w_w_WordLength_1_out1_12;  // sfix35_En33
  reg signed [34:0] Delay21_out1;  // sfix35_En33
  wire BitSlice1_out1_14;  // ufix1
  wire BitSlice_out1_16;  // ufix1
  wire alphabitget_w_w_WordLength_1_out1_12;  // ufix1
  wire signed [3:0] C1_out1;  // sfix4_En1
  wire signed [3:0] C_out1;  // sfix4_En1
  wire signed [3:0] if_bitget_w_w_WordLength_1_1_out1;  // sfix4_En1
  reg signed [3:0] Delay11_out1_1;  // sfix4_En1
  wire [1:0] Constant_out1_2;  // ufix2
  wire [5:0] Bit_Concat_out1_4;  // ufix6
  wire signed [5:0] dtc1_out1_1;  // sfix6_En3
  wire signed [5:0] bitsrl_y_int32_2_out1;  // sfix6_En3
  wire signed [5:0] y_tmp1_out1;  // sfix6_En3
  wire signed [5:0] y_tmp1_out1_1;  // sfix6_En3
  wire signed [5:0] if_bitget_w_w_WordLength_0_1_out1;  // sfix6_En3
  wire signed [5:0] if_bitget_w_w_WordLength_1_1_out1_1;  // sfix6_En3
  reg signed [5:0] Delay_out1_3;  // sfix6_En3
  wire [2:0] Constant_out1_3;  // ufix3
  wire [8:0] Bit_Concat_out1_5;  // ufix9
  wire signed [8:0] dtc1_out1_2;  // sfix9_En6
  wire signed [8:0] bitsrl_y_int32_2_out1_1;  // sfix9_En6
  wire signed [8:0] y_tmp1_out1_2;  // sfix9_En6
  wire signed [8:0] y_tmp1_out1_3;  // sfix9_En6
  wire signed [8:0] if_bitget_w_w_WordLength_0_1_out1_1;  // sfix9_En6
  wire signed [8:0] if_bitget_w_w_WordLength_1_1_out1_2;  // sfix9_En6
  reg signed [8:0] Delay10_out1_1;  // sfix9_En6
  wire [3:0] Constant_out1_4;  // ufix4
  wire [12:0] Bit_Concat_out1_6;  // ufix13
  wire signed [12:0] dtc1_out1_3;  // sfix13_En10
  wire signed [12:0] bitsrl_y_int32_2_out1_2;  // sfix13_En10
  wire signed [12:0] y_tmp1_out1_4;  // sfix13_En10
  wire signed [12:0] y_tmp1_out1_5;  // sfix13_En10
  wire signed [12:0] if_bitget_w_w_WordLength_0_1_out1_2;  // sfix13_En10
  wire signed [12:0] if_bitget_w_w_WordLength_1_1_out1_3;  // sfix13_En10
  reg signed [12:0] Delay2_out1_2;  // sfix13_En10
  wire [4:0] Constant_out1_5;  // ufix5
  wire [17:0] Bit_Concat_out1_7;  // ufix18
  wire signed [17:0] dtc1_out1_4;  // sfix18_En15
  wire signed [17:0] bitsrl_y_int32_2_out1_3;  // sfix18_En15
  wire signed [17:0] y_tmp1_out1_6;  // sfix18_En15
  wire signed [17:0] y_tmp1_out1_7;  // sfix18_En15
  wire signed [17:0] if_bitget_w_w_WordLength_0_1_out1_3;  // sfix18_En15
  wire signed [17:0] if_bitget_w_w_WordLength_1_1_out1_4;  // sfix18_En15
  reg signed [17:0] Delay12_out1_1;  // sfix18_En15
  wire [5:0] Constant_out1_6;  // ufix6
  wire [23:0] Bit_Concat_out1_8;  // ufix24
  wire signed [23:0] dtc1_out1_5;  // sfix24_En21
  wire signed [23:0] bitsrl_y_int32_2_out1_4;  // sfix24_En21
  wire signed [23:0] y_tmp1_out1_8;  // sfix24_En21
  wire signed [23:0] y_tmp1_out1_9;  // sfix24_En21
  wire signed [23:0] if_bitget_w_w_WordLength_0_1_out1_4;  // sfix24_En21
  wire signed [23:0] if_bitget_w_w_WordLength_1_1_out1_5;  // sfix24_En21
  reg signed [23:0] Delay4_out1_2;  // sfix24_En21
  wire [6:0] Constant_out1_7;  // ufix7
  wire [30:0] Bit_Concat_out1_9;  // ufix31
  wire signed [30:0] dtc1_out1_6;  // sfix31_En28
  wire signed [30:0] bitsrl_y_int32_2_out1_5;  // sfix31_En28
  wire signed [30:0] y_tmp1_out1_10;  // sfix31_En28
  wire signed [30:0] y_tmp1_out1_11;  // sfix31_En28
  wire signed [30:0] if_bitget_w_w_WordLength_0_1_out1_5;  // sfix31_En28
  wire signed [30:0] if_bitget_w_w_WordLength_1_1_out1_6;  // sfix31_En28
  reg signed [30:0] Delay14_out1;  // sfix31_En28
  wire [4:0] Constant_out1_8;  // ufix5
  wire [35:0] Bit_Concat_out1_10;  // ufix36
  wire signed [35:0] dtc1_out1_7;  // sfix36_En33
  wire signed [35:0] bitsrl_y_int32_2_out1_6;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_12;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_13;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_0_1_out1_6;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_1_1_out1_7;  // sfix36_En33
  reg signed [35:0] Delay6_out1_3;  // sfix36_En33
  wire signed [35:0] bitsrl_y_int32_2_out1_7;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_14;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_15;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_0_1_out1_7;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_1_1_out1_8;  // sfix36_En33
  reg signed [35:0] Delay16_out1;  // sfix36_En33
  wire signed [35:0] bitsrl_y_int32_2_out1_8;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_16;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_17;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_0_1_out1_8;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_1_1_out1_9;  // sfix36_En33
  reg signed [35:0] Delay8_out1_3;  // sfix36_En33
  wire signed [35:0] bitsrl_y_int32_2_out1_9;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_18;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_19;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_0_1_out1_9;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_1_1_out1_10;  // sfix36_En33
  reg signed [35:0] Delay18_out1;  // sfix36_En33
  wire signed [35:0] bitsrl_y_int32_2_out1_10;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_20;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_21;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_0_1_out1_10;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_1_1_out1_11;  // sfix36_En33
  reg signed [35:0] Delay22_out1;  // sfix36_En33
  wire signed [35:0] bitsrl_y_int32_2_out1_11;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_22;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_23;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_0_1_out1_11;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_1_1_out1_12;  // sfix36_En33
  reg signed [35:0] Delay20_out1;  // sfix36_En33
  wire signed [35:0] bitsrl_y_int32_2_out1_12;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_24;  // sfix36_En33
  wire signed [35:0] y_tmp1_out1_25;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_0_1_out1_12;  // sfix36_En33
  wire signed [35:0] if_bitget_w_w_WordLength_1_1_out1_13;  // sfix36_En33
  wire [1:0] alpha1_out1_1;  // ufix2
  wire [35:0] Bit_Concat1_out1;  // ufix36
  wire signed [35:0] reinterpretcast_bitconcat_fi_0_1_out1;  // sfix36_En33
  reg signed [35:0] Delay9_out1_2;  // sfix36_En33
  reg signed [35:0] Delay40_out1;  // sfix36_En33
  reg signed [35:0] Delay44_reg [0:13];  // sfix36 [14]
  wire signed [35:0] Delay44_reg_next [0:13];  // sfix36_En33 [14]
  wire signed [35:0] Delay44_out1;  // sfix36_En33
  wire signed [35:0] Switch1_out1_1;  // sfix36_En33
  reg signed [35:0] Delay1_reg_1 [0:2];  // sfix36 [3]
  wire signed [35:0] Delay1_reg_next_1 [0:2];  // sfix36_En33 [3]
  wire signed [35:0] Delay1_out1_7;  // sfix36_En33
  wire signed [36:0] Unary_Minus_cast;  // sfix37_En33
  wire signed [36:0] Unary_Minus_cast_1;  // sfix37_En33
  wire signed [35:0] Unary_Minus_out1;  // sfix36_En33
  wire [19:0] Bit_Slice2_out1;  // ufix20
  wire signed [19:0] Data_Type_Conversion1_out1;  // sfix20_En18
  wire [22:0] Bit_Slice_out1;  // ufix23
  wire signed [22:0] Data_Type_Conversion_out1_2;  // sfix23_En21
  wire signed [22:0] Log2Table_int32_14_out1;  // sfix23_En21
  wire signed [22:0] Log2MinusTable_int32_14_out1;  // sfix23_En21
  wire signed [22:0] if_bitget_w_w_WordLength_0_out1_12;  // sfix23_En21
  wire signed [22:0] w_Log2MinusTable_int32_2_out1_11;  // sfix23_En21
  wire signed [22:0] if_bitget_w_w_WordLength_1_out1_13;  // sfix23_En21
  wire Constant5_out1;  // ufix1
  wire [21:0] Bit_Slice3_out1;  // ufix22
  wire [22:0] Bit_Concat3_out1_1;  // ufix23
  wire signed [22:0] Data_Type_Conversion3_out1;  // sfix23_En21
  wire signed [22:0] Switch4_out1_1;  // sfix23_En21
  reg signed [22:0] Delay22_out1_1;  // sfix23_En21
  wire signed [19:0] alpha0_693147182464600_out1;  // sfix20_En18
  wire signed [19:0] alpha0_33333_out1;  // sfix20_En18
  wire signed [19:0] Switch3_out1;  // sfix20_En18
  reg signed [19:0] Delay4_out1_3;  // sfix20_En18
  wire signed [42:0] tmp1_0_69314717873930931_mul_temp;  // sfix43_En39
  wire signed [22:0] tmp1_0_69314717873930931_out1;  // sfix23_En21
  reg signed [22:0] Delay_reg_1 [0:1];  // sfix23 [2]
  wire signed [22:0] Delay_reg_next_1 [0:1];  // sfix23_En21 [2]
  wire signed [22:0] Delay_out1_4;  // sfix23_En21
  wire signed [42:0] tmp2_y_mul_temp;  // sfix43_En39
  wire signed [20:0] tmp2_y_out1;  // sfix21_En19
  reg signed [20:0] Delay3_reg [0:1];  // sfix21 [2]
  wire signed [20:0] Delay3_reg_next [0:1];  // sfix21_En19 [2]
  wire signed [20:0] Delay3_out1_6;  // sfix21_En19
  wire Bit_Slice1_out1;  // ufix1
  wire signed [14:0] Constant1_out1_1;  // sfix15
  wire signed [14:0] Constant_out1_9;  // sfix15
  wire signed [14:0] Switch_out1_1;  // sfix15
  reg signed [35:0] Delay2_reg [0:1];  // sfix36 [2]
  wire signed [35:0] Delay2_reg_next [0:1];  // sfix36_En33 [2]
  wire signed [35:0] Delay2_out1_3;  // sfix36_En33
  wire [35:0] Bit_Concat_out1_11;  // ufix36
  wire signed [35:0] DTC2_out1_1;  // sfix36_En33
  wire signed [35:0] y_tmp3_out1;  // sfix36_En33
  reg signed [35:0] Delay39_out1;  // sfix36_En33
  wire Bit_Slice4_out1;  // ufix1
  wire [13:0] Constant2_out1;  // ufix14
  wire [35:0] Bit_Concat1_out1_1;  // ufix36
  wire signed [35:0] DTC1_out1_8;  // sfix36_En33
  reg signed [35:0] Delay9_out1_3;  // sfix36_En33
  wire signed [35:0] Switch2_out1;  // sfix36_En33
  wire [1:0] alpha1_out1_2;  // ufix2
  wire [5:0] BitSlice2_out1_1;  // ufix6
  wire [7:0] Bit_Concat1_out1_2;  // ufix8
  wire [7:0] alpha127_1_out1;  // ufix8
  wire [7:0] alpha127_exp_tmp_out1;  // ufix8
  wire [7:0] if_sticky_4_out1;  // ufix8
  reg [7:0] Delay1_out1_8;  // ufix8
  wire [7:0] cast_cfType_ExponentBias_lik_1_out1;  // ufix8
  wire [7:0] cast_cfType_ExponentBias_lik_1_out1_1;  // ufix8
  reg [7:0] Delay7_out1_2;  // ufix8
  wire [7:0] cast_cfType_ExponentBias_lik_2_out1;  // ufix8
  reg [7:0] Delay30_out1;  // ufix8
  wire [7:0] if_sticky_2_out1;  // ufix8
  reg [7:0] Delay32_reg [0:19];  // ufix8 [20]
  wire [7:0] Delay32_reg_next [0:19];  // ufix8 [20]
  wire [7:0] Delay32_out1;  // ufix8
  wire signed [35:0] Shift_Arithmetic_out1_1;  // sfix36_En33
  reg signed [35:0] Delay_out1_5;  // sfix36_En33
  wire signed [35:0] Add_out1_1;  // sfix36_En33
  reg signed [35:0] Delay5_out1_2;  // sfix36_En33
  wire Bit_Slice_out1_1;  // ufix1
  wire [6:0] Bit_Slice1_out1_1;  // ufix7
  wire Bit_Slice7_out1;  // ufix1
  wire Bit_Slice6_out1;  // ufix1
  wire Logical_Operator3_out1;  // ufix1
  wire Bit_Slice5_out1;  // ufix1
  wire Bit_Slice3_out1_1;  // ufix1
  wire Logical_Operator_out1_3;  // ufix1
  wire Bit_Slice2_out1_1;  // ufix1
  wire Bit_Slice1_out1_2;  // ufix1
  wire Bit_Slice_out1_2;  // ufix1
  wire signed [7:0] Start_out1;  // sfix8
  wire Logical_Operator4_out1;  // ufix1
  wire signed [7:0] Start_1_out1;  // sfix8
  wire signed [7:0] Switch_out1_2;  // sfix8
  wire signed [7:0] Start_2_out1;  // sfix8
  wire signed [7:0] Start_3_out1;  // sfix8
  wire Logical_Operator1_out1;  // ufix1
  wire signed [7:0] Switch2_out1_1;  // sfix8
  wire signed [7:0] Switch1_out1_2;  // sfix8
  wire signed [7:0] Start_4_out1;  // sfix8
  wire signed [7:0] Start_5_out1;  // sfix8
  wire signed [7:0] Switch5_out1;  // sfix8
  wire signed [7:0] Start_6_out1;  // sfix8
  wire signed [7:0] Start_7_out1;  // sfix8
  wire signed [7:0] Switch7_out1;  // sfix8
  wire signed [7:0] Switch6_out1;  // sfix8
  wire signed [7:0] Switch4_out1_2;  // sfix8
  wire [7:0] DTC_out1;  // ufix8
  wire signed [35:0] Shift_Arithmetic1_out1;  // sfix36_En33
  wire signed [35:0] Bit_Shift_out1_1;  // sfix36_En33
  wire signed [35:0] Switch_out1_3;  // sfix36_En33
  reg signed [35:0] Delay14_out1_1;  // sfix36_En33
  wire Bit_Slice1_out1_3;  // ufix1
  wire [36:0] Bit_Concat_out1_12;  // ufix37
  wire signed [36:0] Data_Type_Conversion_out1_3;  // sfix37_En33
  wire signed [35:0] Constant2_out1_1;  // sfix36_En33
  wire signed [35:0] Add1_out1;  // sfix36_En33
  reg signed [35:0] Delay6_out1_4;  // sfix36_En33
  reg signed [35:0] Delay8_out1_4;  // sfix36_En33
  wire Bit_Slice2_out1_2;  // ufix1
  wire [36:0] Bit_Concat1_out1_3;  // ufix37
  wire signed [36:0] Data_Type_Conversion1_out1_1;  // sfix37_En33
  wire signed [36:0] R_mant_b_norm_out1;  // sfix37_En33
  wire Bit_Slice_out1_3;  // ufix1
  wire signed [36:0] Bit_Shift_out1_2;  // sfix37_En33
  wire signed [36:0] R_mant_b_norm1_out1;  // sfix37_En33
  wire signed [36:0] Switch_out1_4;  // sfix37_En33
  reg signed [36:0] Delay1_out1_9;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1;  // sfix37_En33
  reg signed [36:0] Delay2_out1_4;  // sfix37_En33
  wire signed [36:0] Add1_out1_1;  // sfix37_En33
  wire Bit_Slice1_out1_4;  // ufix1
  wire signed [36:0] Bit_Shift1_out1;  // sfix37_En33
  wire signed [36:0] Add_out1_2;  // sfix37_En33
  wire Bit_Slice_out1_4;  // ufix1
  wire Logical_Operator1_out1_1;  // ufix1
  wire Logical_Operator4_out1_1;  // ufix1
  wire signed [36:0] Bit_Shift_out1_3;  // sfix37_En33
  wire signed [36:0] Add_out1_3;  // sfix37_En33
  reg signed [36:0] Delay4_out1_4;  // sfix37_En33
  wire signed [36:0] Add2_out1;  // sfix37_En33
  wire Bit_Slice2_out1_3;  // ufix1
  wire Logical_Operator_out1_4;  // ufix1
  wire Logical_Operator2_out1;  // ufix1
  wire Logical_Operator3_out1_1;  // ufix1
  wire [2:0] Bit_Concat_out1_13;  // ufix3
  reg [2:0] Delay5_out1_3;  // ufix3
  wire signed [36:0] Bit_Shift3_out1;  // sfix37_En33
  wire signed [36:0] Switch1_out1_3;  // sfix37_En33
  wire signed [36:0] Switch_out1_5;  // sfix37_En33
  wire signed [36:0] Switch2_out1_2;  // sfix37_En33
  reg signed [36:0] Delay6_out1_5;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_1;  // sfix37_En33
  reg signed [36:0] Delay7_out1_3;  // sfix37_En33
  wire signed [36:0] Add1_out1_2;  // sfix37_En33
  wire Bit_Slice1_out1_5;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_1;  // sfix37_En33
  wire signed [36:0] Add_out1_4;  // sfix37_En33
  wire Bit_Slice_out1_5;  // ufix1
  wire Logical_Operator1_out1_2;  // ufix1
  wire Logical_Operator4_out1_2;  // ufix1
  reg signed [36:0] Delay9_out1_4;  // sfix37_En33
  wire signed [36:0] Add2_out1_1;  // sfix37_En33
  wire Bit_Slice2_out1_4;  // ufix1
  wire Logical_Operator_out1_5;  // ufix1
  wire Logical_Operator2_out1_1;  // ufix1
  wire Logical_Operator3_out1_2;  // ufix1
  wire [4:0] Bit_Concat_out1_14;  // ufix5
  reg [4:0] Delay10_out1_2;  // ufix5
  wire signed [36:0] Bit_Shift3_out1_1;  // sfix37_En33
  wire signed [36:0] Switch1_out1_4;  // sfix37_En33
  wire signed [36:0] Switch_out1_6;  // sfix37_En33
  wire signed [36:0] Switch2_out1_3;  // sfix37_En33
  reg signed [36:0] Delay11_out1_2;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_2;  // sfix37_En33
  reg signed [36:0] Delay12_out1_2;  // sfix37_En33
  wire signed [36:0] Add1_out1_3;  // sfix37_En33
  wire Bit_Slice1_out1_6;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_2;  // sfix37_En33
  wire signed [36:0] Add_out1_5;  // sfix37_En33
  wire Bit_Slice_out1_6;  // ufix1
  wire Logical_Operator1_out1_3;  // ufix1
  wire Logical_Operator4_out1_3;  // ufix1
  reg signed [36:0] Delay14_out1_2;  // sfix37_En33
  wire signed [36:0] Add2_out1_2;  // sfix37_En33
  wire Bit_Slice2_out1_5;  // ufix1
  wire Logical_Operator_out1_6;  // ufix1
  wire Logical_Operator2_out1_2;  // ufix1
  wire Logical_Operator3_out1_3;  // ufix1
  wire [6:0] Bit_Concat_out1_15;  // ufix7
  reg [6:0] Delay5_out1_4;  // ufix7
  wire signed [36:0] Bit_Shift3_out1_2;  // sfix37_En33
  wire signed [36:0] Switch1_out1_5;  // sfix37_En33
  wire signed [36:0] Switch_out1_7;  // sfix37_En33
  wire signed [36:0] Switch2_out1_4;  // sfix37_En33
  reg signed [36:0] Delay6_out1_6;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_3;  // sfix37_En33
  reg signed [36:0] Delay7_out1_4;  // sfix37_En33
  wire signed [36:0] Add1_out1_4;  // sfix37_En33
  wire Bit_Slice1_out1_7;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_3;  // sfix37_En33
  wire signed [36:0] Add_out1_6;  // sfix37_En33
  wire Bit_Slice_out1_7;  // ufix1
  wire Logical_Operator1_out1_4;  // ufix1
  wire Logical_Operator4_out1_4;  // ufix1
  reg signed [36:0] Delay9_out1_5;  // sfix37_En33
  wire signed [36:0] Add2_out1_3;  // sfix37_En33
  wire Bit_Slice2_out1_6;  // ufix1
  wire Logical_Operator_out1_7;  // ufix1
  wire Logical_Operator2_out1_3;  // ufix1
  wire Logical_Operator3_out1_4;  // ufix1
  wire [8:0] Bit_Concat_out1_16;  // ufix9
  reg [8:0] Delay5_out1_5;  // ufix9
  wire signed [36:0] Bit_Shift3_out1_3;  // sfix37_En33
  wire signed [36:0] Switch1_out1_6;  // sfix37_En33
  wire signed [36:0] Switch_out1_8;  // sfix37_En33
  wire signed [36:0] Switch2_out1_5;  // sfix37_En33
  reg signed [36:0] Delay1_out1_10;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_4;  // sfix37_En33
  reg signed [36:0] Delay2_out1_5;  // sfix37_En33
  wire signed [36:0] Add1_out1_5;  // sfix37_En33
  wire Bit_Slice1_out1_8;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_4;  // sfix37_En33
  wire signed [36:0] Add_out1_7;  // sfix37_En33
  wire Bit_Slice_out1_8;  // ufix1
  wire Logical_Operator1_out1_5;  // ufix1
  wire Logical_Operator4_out1_5;  // ufix1
  reg signed [36:0] Delay4_out1_5;  // sfix37_En33
  wire signed [36:0] Add2_out1_4;  // sfix37_En33
  wire Bit_Slice2_out1_7;  // ufix1
  wire Logical_Operator_out1_8;  // ufix1
  wire Logical_Operator2_out1_4;  // ufix1
  wire Logical_Operator3_out1_5;  // ufix1
  wire [10:0] Bit_Concat_out1_17;  // ufix11
  reg [10:0] Delay10_out1_3;  // ufix11
  wire signed [36:0] Bit_Shift3_out1_4;  // sfix37_En33
  wire signed [36:0] Switch1_out1_7;  // sfix37_En33
  wire signed [36:0] Switch_out1_9;  // sfix37_En33
  wire signed [36:0] Switch2_out1_6;  // sfix37_En33
  reg signed [36:0] Delay11_out1_3;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_5;  // sfix37_En33
  reg signed [36:0] Delay12_out1_3;  // sfix37_En33
  wire signed [36:0] Add1_out1_6;  // sfix37_En33
  wire Bit_Slice1_out1_9;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_5;  // sfix37_En33
  wire signed [36:0] Add_out1_8;  // sfix37_En33
  wire Bit_Slice_out1_9;  // ufix1
  wire Logical_Operator1_out1_6;  // ufix1
  wire Logical_Operator4_out1_6;  // ufix1
  reg signed [36:0] Delay14_out1_3;  // sfix37_En33
  wire signed [36:0] Add2_out1_5;  // sfix37_En33
  wire Bit_Slice2_out1_8;  // ufix1
  wire Logical_Operator_out1_9;  // ufix1
  wire Logical_Operator2_out1_5;  // ufix1
  wire Logical_Operator3_out1_6;  // ufix1
  wire [12:0] Bit_Concat_out1_18;  // ufix13
  reg [12:0] Delay1_out1_11;  // ufix13
  wire signed [36:0] Bit_Shift3_out1_5;  // sfix37_En33
  wire signed [36:0] Switch1_out1_8;  // sfix37_En33
  wire signed [36:0] Switch_out1_10;  // sfix37_En33
  wire signed [36:0] Switch2_out1_7;  // sfix37_En33
  reg signed [36:0] Delay2_out1_6;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_6;  // sfix37_En33
  reg signed [36:0] Delay3_out1_7;  // sfix37_En33
  wire signed [36:0] Add1_out1_7;  // sfix37_En33
  wire Bit_Slice1_out1_10;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_6;  // sfix37_En33
  wire signed [36:0] Add_out1_9;  // sfix37_En33
  wire Bit_Slice_out1_10;  // ufix1
  wire Logical_Operator1_out1_7;  // ufix1
  wire Logical_Operator4_out1_7;  // ufix1
  reg signed [36:0] Delay10_out1_4;  // sfix37_En33
  wire signed [36:0] Add2_out1_6;  // sfix37_En33
  wire Bit_Slice2_out1_9;  // ufix1
  wire Logical_Operator_out1_10;  // ufix1
  wire Logical_Operator2_out1_6;  // ufix1
  wire Logical_Operator3_out1_7;  // ufix1
  wire [14:0] Bit_Concat_out1_19;  // ufix15
  reg [14:0] Delay5_out1_6;  // ufix15
  wire signed [36:0] Bit_Shift3_out1_6;  // sfix37_En33
  wire signed [36:0] Switch1_out1_9;  // sfix37_En33
  wire signed [36:0] Switch_out1_11;  // sfix37_En33
  wire signed [36:0] Switch2_out1_8;  // sfix37_En33
  reg signed [36:0] Delay1_out1_12;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_7;  // sfix37_En33
  reg signed [36:0] Delay2_out1_7;  // sfix37_En33
  wire signed [36:0] Add1_out1_8;  // sfix37_En33
  wire Bit_Slice1_out1_11;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_7;  // sfix37_En33
  wire signed [36:0] Add_out1_10;  // sfix37_En33
  wire Bit_Slice_out1_11;  // ufix1
  wire Logical_Operator1_out1_8;  // ufix1
  wire Logical_Operator4_out1_8;  // ufix1
  reg signed [36:0] Delay4_out1_6;  // sfix37_En33
  wire signed [36:0] Add2_out1_7;  // sfix37_En33
  wire Bit_Slice2_out1_10;  // ufix1
  wire Logical_Operator_out1_11;  // ufix1
  wire Logical_Operator2_out1_7;  // ufix1
  wire Logical_Operator3_out1_8;  // ufix1
  wire [16:0] Bit_Concat_out1_20;  // ufix17
  reg [16:0] Delay10_out1_5;  // ufix17
  wire signed [36:0] Bit_Shift3_out1_7;  // sfix37_En33
  wire signed [36:0] Switch1_out1_10;  // sfix37_En33
  wire signed [36:0] Switch_out1_12;  // sfix37_En33
  wire signed [36:0] Switch2_out1_9;  // sfix37_En33
  reg signed [36:0] Delay11_out1_4;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_8;  // sfix37_En33
  reg signed [36:0] Delay12_out1_4;  // sfix37_En33
  wire signed [36:0] Add1_out1_9;  // sfix37_En33
  wire Bit_Slice1_out1_12;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_8;  // sfix37_En33
  wire signed [36:0] Add_out1_11;  // sfix37_En33
  wire Bit_Slice_out1_12;  // ufix1
  wire Logical_Operator1_out1_9;  // ufix1
  wire Logical_Operator4_out1_9;  // ufix1
  reg signed [36:0] Delay14_out1_4;  // sfix37_En33
  wire signed [36:0] Add2_out1_8;  // sfix37_En33
  wire Bit_Slice2_out1_11;  // ufix1
  wire Logical_Operator_out1_12;  // ufix1
  wire Logical_Operator2_out1_8;  // ufix1
  wire Logical_Operator3_out1_9;  // ufix1
  wire [18:0] Bit_Concat_out1_21;  // ufix19
  reg [18:0] Delay11_out1_5;  // ufix19
  wire signed [36:0] Bit_Shift3_out1_8;  // sfix37_En33
  wire signed [36:0] Switch1_out1_11;  // sfix37_En33
  wire signed [36:0] Switch_out1_13;  // sfix37_En33
  wire signed [36:0] Switch2_out1_10;  // sfix37_En33
  reg signed [36:0] Delay4_out1_7;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_9;  // sfix37_En33
  reg signed [36:0] Delay8_out1_5;  // sfix37_En33
  wire signed [36:0] Add1_out1_10;  // sfix37_En33
  wire Bit_Slice1_out1_13;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_9;  // sfix37_En33
  wire signed [36:0] Add_out1_12;  // sfix37_En33
  wire Bit_Slice_out1_13;  // ufix1
  wire Logical_Operator1_out1_10;  // ufix1
  wire Logical_Operator4_out1_10;  // ufix1
  reg signed [36:0] Delay12_out1_5;  // sfix37_En33
  wire signed [36:0] Add2_out1_9;  // sfix37_En33
  wire Bit_Slice2_out1_12;  // ufix1
  wire Logical_Operator_out1_13;  // ufix1
  wire Logical_Operator2_out1_9;  // ufix1
  wire Logical_Operator3_out1_10;  // ufix1
  wire [20:0] Bit_Concat_out1_22;  // ufix21
  reg [20:0] Delay5_out1_7;  // ufix21
  wire signed [36:0] Bit_Shift3_out1_9;  // sfix37_En33
  wire signed [36:0] Switch1_out1_12;  // sfix37_En33
  wire signed [36:0] Switch_out1_14;  // sfix37_En33
  wire signed [36:0] Switch2_out1_11;  // sfix37_En33
  reg signed [36:0] Delay1_out1_13;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_10;  // sfix37_En33
  reg signed [36:0] Delay2_out1_8;  // sfix37_En33
  wire signed [36:0] Add1_out1_11;  // sfix37_En33
  wire Bit_Slice1_out1_14;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_10;  // sfix37_En33
  wire signed [36:0] Add_out1_13;  // sfix37_En33
  wire Bit_Slice_out1_14;  // ufix1
  wire Logical_Operator1_out1_11;  // ufix1
  wire Logical_Operator4_out1_11;  // ufix1
  reg signed [36:0] Delay4_out1_8;  // sfix37_En33
  wire signed [36:0] Add2_out1_10;  // sfix37_En33
  wire Bit_Slice2_out1_13;  // ufix1
  wire Logical_Operator_out1_14;  // ufix1
  wire Logical_Operator2_out1_10;  // ufix1
  wire Logical_Operator3_out1_11;  // ufix1
  wire [22:0] Bit_Concat_out1_23;  // ufix23
  reg [22:0] Delay10_out1_6;  // ufix23
  wire signed [36:0] Bit_Shift3_out1_10;  // sfix37_En33
  wire signed [36:0] Switch1_out1_13;  // sfix37_En33
  wire signed [36:0] Switch_out1_15;  // sfix37_En33
  wire signed [36:0] Switch2_out1_12;  // sfix37_En33
  reg signed [36:0] Delay11_out1_6;  // sfix37_En33
  wire signed [36:0] Bit_Shift2_out1_11;  // sfix37_En33
  reg signed [36:0] Delay12_out1_6;  // sfix37_En33
  wire signed [36:0] Add1_out1_12;  // sfix37_En33
  wire Bit_Slice1_out1_15;  // ufix1
  wire signed [36:0] Bit_Shift1_out1_11;  // sfix37_En33
  wire signed [36:0] Add_out1_14;  // sfix37_En33
  wire Bit_Slice_out1_15;  // ufix1
  wire Logical_Operator1_out1_12;  // ufix1
  reg signed [36:0] Delay14_out1_5;  // sfix37_En33
  reg  [0:11] Delay3_reg_1;  // ufix1 [12]
  wire [0:11] Delay3_reg_next_1;  // ufix1 [12]
  wire Delay3_out1_8;  // ufix1
  wire Logical_Operator_out1_15;  // ufix1
  wire Logical_Operator4_out1_12;  // ufix1
  wire signed [36:0] Add2_out1_11;  // sfix37_En33
  wire Bit_Slice2_out1_14;  // ufix1
  wire Logical_Operator2_out1_11;  // ufix1
  wire Logical_Operator3_out1_12;  // ufix1
  wire [24:0] Bit_Concat_out1_24;  // ufix25
  wire [23:0] Bit_Slice_out1_16;  // ufix24
  wire [23:0] Bit_Slice_out1_17;  // ufix24
  reg [23:0] Delay2_reg_1 [0:11];  // ufix24 [12]
  wire [23:0] Delay2_reg_next_1 [0:11];  // ufix24 [12]
  wire [23:0] Delay2_out1_9;  // ufix24
  wire [23:0] Switch1_out1_14;  // ufix24
  reg [23:0] Delay25_out1;  // ufix24
  wire [24:0] Bit_Concat_out1_25;  // ufix25
  wire BitSlice1_out1_15;  // ufix1
  wire Logical_Operator1_out1_13;  // ufix1
  wire BitSlice_out1_17;  // ufix1
  reg  [0:35] Delay28_reg;  // ufix1 [36]
  wire [0:35] Delay28_reg_next;  // ufix1 [36]
  wire Delay28_out1;  // ufix1
  wire alphabitget_Mant_tmp_2_0_out1;  // ufix1
  wire alphabitget_Mant_tmp_1_0_out1;  // ufix1
  wire [24:0] cast_2_like_Mant_tmp_out1;  // ufix25
  wire [31:0] Mant_tmp_cast_2_like_Man_add_temp;  // ufix32
  wire [31:0] Mant_tmp_cast_2_like_Man_1;  // ufix32
  wire [31:0] Mant_tmp_cast_2_like_Man_2;  // ufix32
  wire [24:0] Mant_tmp_cast_2_like_Man_out1;  // ufix25
  wire [24:0] if_bitget_Mant_tmp_1_0_out1;  // ufix25
  wire BitSlice2_out1_2;  // ufix1
  wire [7:0] alpha127_out1;  // ufix8
  reg [7:0] Delay2_out1_10;  // ufix8
  reg [7:0] Delay29_out1;  // ufix8
  wire [7:0] if_sticky_3_out1;  // ufix8
  reg [7:0] Delay4_reg [0:21];  // ufix8 [22]
  wire [7:0] Delay4_reg_next [0:21];  // ufix8 [22]
  wire [7:0] Delay4_out1_9;  // ufix8
  wire [7:0] Add3_out1;  // ufix8
  wire [7:0] Constant1_out1_2;  // ufix8
  wire [7:0] Add2_out1_12;  // ufix8
  wire [7:0] Switch1_out1_15;  // ufix8
  reg [7:0] Delay18_out1_1;  // ufix8
  wire [7:0] Constant1_out1_3;  // ufix8
  wire [7:0] exp_1_out1;  // ufix8
  wire [7:0] Switch1_out1_16;  // ufix8
  wire [7:0] Switch_out1_16;  // ufix8
  reg [7:0] Delay_reg_2 [0:11];  // ufix8 [12]
  wire [7:0] Delay_reg_next_2 [0:11];  // ufix8 [12]
  wire [7:0] Delay_out1_6;  // ufix8
  reg [7:0] Delay24_out1;  // ufix8
  wire [7:0] cast_1_like_Exp_out1;  // ufix8
  wire [7:0] Exp_cast_1_like_Exp_out1;  // ufix8
  wire [7:0] if_bitget_Mant_tmp_Mant_tmp_Wor_out1;  // ufix8
  wire aExponent_cfType_Exponent_I_out1;  // ufix1
  wire aMantissa_0_out1;  // ufix1
  wire Logical_Operator2_out1_12;  // ufix1
  wire Logical_Operator1_out1_14;  // ufix1
  wire [7:0] Constant_out1_10;  // ufix8
  wire [7:0] Switch_out1_17;  // ufix8
  reg [7:0] Delay7_reg_1 [0:40];  // ufix8 [41]
  wire [7:0] Delay7_reg_next_1 [0:40];  // ufix8 [41]
  wire [7:0] Delay7_out1_5;  // ufix8
  wire [7:0] if_aExponent_cfType_Exponent_out1;  // ufix8
  wire [7:0] Constant3_out1_2;  // ufix8
  wire [7:0] Switch6_out1_1;  // ufix8
  reg [7:0] Delay4_out1_10;  // ufix8
  wire [22:0] BitSlice3_out1;  // ufix23
  wire [22:0] C_out1_1;  // ufix23
  wire [22:0] if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1;  // ufix23
  wire [22:0] Constant1_out1_4;  // ufix23
  wire [22:0] Switch1_out1_17;  // ufix23
  reg [22:0] Delay8_reg_2 [0:40];  // ufix23 [41]
  wire [22:0] Delay8_reg_next_2 [0:40];  // ufix23 [41]
  wire [22:0] Delay8_out1_6;  // ufix23
  wire [22:0] if_aExponent_cfType_Exponent_1_out1;  // ufix23
  wire [22:0] Constant2_out1_2;  // ufix23
  wire [22:0] Switch5_out1_1;  // ufix23
  reg [22:0] Delay5_out1_8;  // ufix23
  wire [31:0] nfp_out_pack;  // ufix32


  assign Constant8_out1 = 1'b1;



  assign Constant7_out1 = 6'b101001;



  always @(posedge clk or posedge reset)
    begin : Delay4_process
      if (reset == 1'b1) begin
        Delay4_out1 <= 1'b1;
      end
      else begin
        if (enb) begin
          Delay4_out1 <= Relational_Operator_relop1;
        end
      end
    end



  assign Logical_Operator_out1 = Constant8_out1 & Delay4_out1;



  always @(posedge clk or posedge reset)
    begin : Delay3_process
      if (reset == 1'b1) begin
        Delay3_out1 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay3_out1 <= Add_out1;
        end
      end
    end



  assign Add_1 = {5'b0, Logical_Operator_out1};
  assign Add_out1 = Delay3_out1 + Add_1;



  assign Relational_Operator_relop1 = Add_out1 <= Constant7_out1;



  always @(posedge clk or posedge reset)
    begin : Delay1_process
      if (reset == 1'b1) begin
        Delay1_out1 <= 1'b1;
      end
      else begin
        if (enb) begin
          Delay1_out1 <= Relational_Operator_relop1;
        end
      end
    end



  // Split 32 bit word into FP sign, exponent, mantissa
  assign aSign = nfp_in[31];
  assign aExponent = nfp_in[30:23];
  assign aMantissa = nfp_in[22:0];



  always @(posedge clk or posedge reset)
    begin : Delay_process
      if (reset == 1'b1) begin
        Delay_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay_out1 <= aSign;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay6_process
      if (reset == 1'b1) begin
        Delay6_reg[0] <= 1'b0;
        Delay6_reg[1] <= 1'b0;
        Delay6_reg[2] <= 1'b0;
        Delay6_reg[3] <= 1'b0;
        Delay6_reg[4] <= 1'b0;
        Delay6_reg[5] <= 1'b0;
        Delay6_reg[6] <= 1'b0;
        Delay6_reg[7] <= 1'b0;
        Delay6_reg[8] <= 1'b0;
        Delay6_reg[9] <= 1'b0;
        Delay6_reg[10] <= 1'b0;
        Delay6_reg[11] <= 1'b0;
        Delay6_reg[12] <= 1'b0;
        Delay6_reg[13] <= 1'b0;
        Delay6_reg[14] <= 1'b0;
        Delay6_reg[15] <= 1'b0;
        Delay6_reg[16] <= 1'b0;
        Delay6_reg[17] <= 1'b0;
        Delay6_reg[18] <= 1'b0;
        Delay6_reg[19] <= 1'b0;
        Delay6_reg[20] <= 1'b0;
        Delay6_reg[21] <= 1'b0;
        Delay6_reg[22] <= 1'b0;
        Delay6_reg[23] <= 1'b0;
        Delay6_reg[24] <= 1'b0;
        Delay6_reg[25] <= 1'b0;
        Delay6_reg[26] <= 1'b0;
        Delay6_reg[27] <= 1'b0;
        Delay6_reg[28] <= 1'b0;
        Delay6_reg[29] <= 1'b0;
        Delay6_reg[30] <= 1'b0;
        Delay6_reg[31] <= 1'b0;
        Delay6_reg[32] <= 1'b0;
        Delay6_reg[33] <= 1'b0;
        Delay6_reg[34] <= 1'b0;
        Delay6_reg[35] <= 1'b0;
        Delay6_reg[36] <= 1'b0;
        Delay6_reg[37] <= 1'b0;
        Delay6_reg[38] <= 1'b0;
        Delay6_reg[39] <= 1'b0;
        Delay6_reg[40] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_reg[0] <= Delay6_reg_next[0];
          Delay6_reg[1] <= Delay6_reg_next[1];
          Delay6_reg[2] <= Delay6_reg_next[2];
          Delay6_reg[3] <= Delay6_reg_next[3];
          Delay6_reg[4] <= Delay6_reg_next[4];
          Delay6_reg[5] <= Delay6_reg_next[5];
          Delay6_reg[6] <= Delay6_reg_next[6];
          Delay6_reg[7] <= Delay6_reg_next[7];
          Delay6_reg[8] <= Delay6_reg_next[8];
          Delay6_reg[9] <= Delay6_reg_next[9];
          Delay6_reg[10] <= Delay6_reg_next[10];
          Delay6_reg[11] <= Delay6_reg_next[11];
          Delay6_reg[12] <= Delay6_reg_next[12];
          Delay6_reg[13] <= Delay6_reg_next[13];
          Delay6_reg[14] <= Delay6_reg_next[14];
          Delay6_reg[15] <= Delay6_reg_next[15];
          Delay6_reg[16] <= Delay6_reg_next[16];
          Delay6_reg[17] <= Delay6_reg_next[17];
          Delay6_reg[18] <= Delay6_reg_next[18];
          Delay6_reg[19] <= Delay6_reg_next[19];
          Delay6_reg[20] <= Delay6_reg_next[20];
          Delay6_reg[21] <= Delay6_reg_next[21];
          Delay6_reg[22] <= Delay6_reg_next[22];
          Delay6_reg[23] <= Delay6_reg_next[23];
          Delay6_reg[24] <= Delay6_reg_next[24];
          Delay6_reg[25] <= Delay6_reg_next[25];
          Delay6_reg[26] <= Delay6_reg_next[26];
          Delay6_reg[27] <= Delay6_reg_next[27];
          Delay6_reg[28] <= Delay6_reg_next[28];
          Delay6_reg[29] <= Delay6_reg_next[29];
          Delay6_reg[30] <= Delay6_reg_next[30];
          Delay6_reg[31] <= Delay6_reg_next[31];
          Delay6_reg[32] <= Delay6_reg_next[32];
          Delay6_reg[33] <= Delay6_reg_next[33];
          Delay6_reg[34] <= Delay6_reg_next[34];
          Delay6_reg[35] <= Delay6_reg_next[35];
          Delay6_reg[36] <= Delay6_reg_next[36];
          Delay6_reg[37] <= Delay6_reg_next[37];
          Delay6_reg[38] <= Delay6_reg_next[38];
          Delay6_reg[39] <= Delay6_reg_next[39];
          Delay6_reg[40] <= Delay6_reg_next[40];
        end
      end
    end

  assign Delay6_out1 = Delay6_reg[40];
  assign Delay6_reg_next[0] = Delay_out1;
  assign Delay6_reg_next[1] = Delay6_reg[0];
  assign Delay6_reg_next[2] = Delay6_reg[1];
  assign Delay6_reg_next[3] = Delay6_reg[2];
  assign Delay6_reg_next[4] = Delay6_reg[3];
  assign Delay6_reg_next[5] = Delay6_reg[4];
  assign Delay6_reg_next[6] = Delay6_reg[5];
  assign Delay6_reg_next[7] = Delay6_reg[6];
  assign Delay6_reg_next[8] = Delay6_reg[7];
  assign Delay6_reg_next[9] = Delay6_reg[8];
  assign Delay6_reg_next[10] = Delay6_reg[9];
  assign Delay6_reg_next[11] = Delay6_reg[10];
  assign Delay6_reg_next[12] = Delay6_reg[11];
  assign Delay6_reg_next[13] = Delay6_reg[12];
  assign Delay6_reg_next[14] = Delay6_reg[13];
  assign Delay6_reg_next[15] = Delay6_reg[14];
  assign Delay6_reg_next[16] = Delay6_reg[15];
  assign Delay6_reg_next[17] = Delay6_reg[16];
  assign Delay6_reg_next[18] = Delay6_reg[17];
  assign Delay6_reg_next[19] = Delay6_reg[18];
  assign Delay6_reg_next[20] = Delay6_reg[19];
  assign Delay6_reg_next[21] = Delay6_reg[20];
  assign Delay6_reg_next[22] = Delay6_reg[21];
  assign Delay6_reg_next[23] = Delay6_reg[22];
  assign Delay6_reg_next[24] = Delay6_reg[23];
  assign Delay6_reg_next[25] = Delay6_reg[24];
  assign Delay6_reg_next[26] = Delay6_reg[25];
  assign Delay6_reg_next[27] = Delay6_reg[26];
  assign Delay6_reg_next[28] = Delay6_reg[27];
  assign Delay6_reg_next[29] = Delay6_reg[28];
  assign Delay6_reg_next[30] = Delay6_reg[29];
  assign Delay6_reg_next[31] = Delay6_reg[30];
  assign Delay6_reg_next[32] = Delay6_reg[31];
  assign Delay6_reg_next[33] = Delay6_reg[32];
  assign Delay6_reg_next[34] = Delay6_reg[33];
  assign Delay6_reg_next[35] = Delay6_reg[34];
  assign Delay6_reg_next[36] = Delay6_reg[35];
  assign Delay6_reg_next[37] = Delay6_reg[36];
  assign Delay6_reg_next[38] = Delay6_reg[37];
  assign Delay6_reg_next[39] = Delay6_reg[38];
  assign Delay6_reg_next[40] = Delay6_reg[39];



  assign Constant1_out1 = 1'b0;



  assign Switch1_out1 = (Delay1_out1 == 1'b0 ? Delay6_out1 :
              Constant1_out1);



  always @(posedge clk or posedge reset)
    begin : Delay3_1_process
      if (reset == 1'b1) begin
        Delay3_out1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1_1 <= Switch1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay1_1_process
      if (reset == 1'b1) begin
        Delay1_out1_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_1 <= aExponent;
        end
      end
    end



  assign aExponent_cfType_Exponent_I_1_out1 = Delay1_out1_1 < 8'b01110011;



  assign aExponent_cfType_Exponent_I_2_out1 = Delay1_out1_1 > 8'b10000010;



  assign Logical_Operator_out1_1 = aExponent_cfType_Exponent_I_1_out1 | aExponent_cfType_Exponent_I_2_out1;



  always @(posedge clk or posedge reset)
    begin : Delay9_process
      if (reset == 1'b1) begin
        Delay9_reg[0] <= 1'b0;
        Delay9_reg[1] <= 1'b0;
        Delay9_reg[2] <= 1'b0;
        Delay9_reg[3] <= 1'b0;
        Delay9_reg[4] <= 1'b0;
        Delay9_reg[5] <= 1'b0;
        Delay9_reg[6] <= 1'b0;
        Delay9_reg[7] <= 1'b0;
        Delay9_reg[8] <= 1'b0;
        Delay9_reg[9] <= 1'b0;
        Delay9_reg[10] <= 1'b0;
        Delay9_reg[11] <= 1'b0;
        Delay9_reg[12] <= 1'b0;
        Delay9_reg[13] <= 1'b0;
        Delay9_reg[14] <= 1'b0;
        Delay9_reg[15] <= 1'b0;
        Delay9_reg[16] <= 1'b0;
        Delay9_reg[17] <= 1'b0;
        Delay9_reg[18] <= 1'b0;
        Delay9_reg[19] <= 1'b0;
        Delay9_reg[20] <= 1'b0;
        Delay9_reg[21] <= 1'b0;
        Delay9_reg[22] <= 1'b0;
        Delay9_reg[23] <= 1'b0;
        Delay9_reg[24] <= 1'b0;
        Delay9_reg[25] <= 1'b0;
        Delay9_reg[26] <= 1'b0;
        Delay9_reg[27] <= 1'b0;
        Delay9_reg[28] <= 1'b0;
        Delay9_reg[29] <= 1'b0;
        Delay9_reg[30] <= 1'b0;
        Delay9_reg[31] <= 1'b0;
        Delay9_reg[32] <= 1'b0;
        Delay9_reg[33] <= 1'b0;
        Delay9_reg[34] <= 1'b0;
        Delay9_reg[35] <= 1'b0;
        Delay9_reg[36] <= 1'b0;
        Delay9_reg[37] <= 1'b0;
        Delay9_reg[38] <= 1'b0;
        Delay9_reg[39] <= 1'b0;
        Delay9_reg[40] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay9_reg[0] <= Delay9_reg_next[0];
          Delay9_reg[1] <= Delay9_reg_next[1];
          Delay9_reg[2] <= Delay9_reg_next[2];
          Delay9_reg[3] <= Delay9_reg_next[3];
          Delay9_reg[4] <= Delay9_reg_next[4];
          Delay9_reg[5] <= Delay9_reg_next[5];
          Delay9_reg[6] <= Delay9_reg_next[6];
          Delay9_reg[7] <= Delay9_reg_next[7];
          Delay9_reg[8] <= Delay9_reg_next[8];
          Delay9_reg[9] <= Delay9_reg_next[9];
          Delay9_reg[10] <= Delay9_reg_next[10];
          Delay9_reg[11] <= Delay9_reg_next[11];
          Delay9_reg[12] <= Delay9_reg_next[12];
          Delay9_reg[13] <= Delay9_reg_next[13];
          Delay9_reg[14] <= Delay9_reg_next[14];
          Delay9_reg[15] <= Delay9_reg_next[15];
          Delay9_reg[16] <= Delay9_reg_next[16];
          Delay9_reg[17] <= Delay9_reg_next[17];
          Delay9_reg[18] <= Delay9_reg_next[18];
          Delay9_reg[19] <= Delay9_reg_next[19];
          Delay9_reg[20] <= Delay9_reg_next[20];
          Delay9_reg[21] <= Delay9_reg_next[21];
          Delay9_reg[22] <= Delay9_reg_next[22];
          Delay9_reg[23] <= Delay9_reg_next[23];
          Delay9_reg[24] <= Delay9_reg_next[24];
          Delay9_reg[25] <= Delay9_reg_next[25];
          Delay9_reg[26] <= Delay9_reg_next[26];
          Delay9_reg[27] <= Delay9_reg_next[27];
          Delay9_reg[28] <= Delay9_reg_next[28];
          Delay9_reg[29] <= Delay9_reg_next[29];
          Delay9_reg[30] <= Delay9_reg_next[30];
          Delay9_reg[31] <= Delay9_reg_next[31];
          Delay9_reg[32] <= Delay9_reg_next[32];
          Delay9_reg[33] <= Delay9_reg_next[33];
          Delay9_reg[34] <= Delay9_reg_next[34];
          Delay9_reg[35] <= Delay9_reg_next[35];
          Delay9_reg[36] <= Delay9_reg_next[36];
          Delay9_reg[37] <= Delay9_reg_next[37];
          Delay9_reg[38] <= Delay9_reg_next[38];
          Delay9_reg[39] <= Delay9_reg_next[39];
          Delay9_reg[40] <= Delay9_reg_next[40];
        end
      end
    end

  assign Delay9_out1 = Delay9_reg[40];
  assign Delay9_reg_next[0] = Logical_Operator_out1_1;
  assign Delay9_reg_next[1] = Delay9_reg[0];
  assign Delay9_reg_next[2] = Delay9_reg[1];
  assign Delay9_reg_next[3] = Delay9_reg[2];
  assign Delay9_reg_next[4] = Delay9_reg[3];
  assign Delay9_reg_next[5] = Delay9_reg[4];
  assign Delay9_reg_next[6] = Delay9_reg[5];
  assign Delay9_reg_next[7] = Delay9_reg[6];
  assign Delay9_reg_next[8] = Delay9_reg[7];
  assign Delay9_reg_next[9] = Delay9_reg[8];
  assign Delay9_reg_next[10] = Delay9_reg[9];
  assign Delay9_reg_next[11] = Delay9_reg[10];
  assign Delay9_reg_next[12] = Delay9_reg[11];
  assign Delay9_reg_next[13] = Delay9_reg[12];
  assign Delay9_reg_next[14] = Delay9_reg[13];
  assign Delay9_reg_next[15] = Delay9_reg[14];
  assign Delay9_reg_next[16] = Delay9_reg[15];
  assign Delay9_reg_next[17] = Delay9_reg[16];
  assign Delay9_reg_next[18] = Delay9_reg[17];
  assign Delay9_reg_next[19] = Delay9_reg[18];
  assign Delay9_reg_next[20] = Delay9_reg[19];
  assign Delay9_reg_next[21] = Delay9_reg[20];
  assign Delay9_reg_next[22] = Delay9_reg[21];
  assign Delay9_reg_next[23] = Delay9_reg[22];
  assign Delay9_reg_next[24] = Delay9_reg[23];
  assign Delay9_reg_next[25] = Delay9_reg[24];
  assign Delay9_reg_next[26] = Delay9_reg[25];
  assign Delay9_reg_next[27] = Delay9_reg[26];
  assign Delay9_reg_next[28] = Delay9_reg[27];
  assign Delay9_reg_next[29] = Delay9_reg[28];
  assign Delay9_reg_next[30] = Delay9_reg[29];
  assign Delay9_reg_next[31] = Delay9_reg[30];
  assign Delay9_reg_next[32] = Delay9_reg[31];
  assign Delay9_reg_next[33] = Delay9_reg[32];
  assign Delay9_reg_next[34] = Delay9_reg[33];
  assign Delay9_reg_next[35] = Delay9_reg[34];
  assign Delay9_reg_next[36] = Delay9_reg[35];
  assign Delay9_reg_next[37] = Delay9_reg[36];
  assign Delay9_reg_next[38] = Delay9_reg[37];
  assign Delay9_reg_next[39] = Delay9_reg[38];
  assign Delay9_reg_next[40] = Delay9_reg[39];



  assign alpha0_out1 = 1'b0;



  assign alpha127_6_out1 = Delay1_out1_1 < 8'b01111001;



  always @(posedge clk or posedge reset)
    begin : Delay8_process
      if (reset == 1'b1) begin
        Delay8_reg[0] <= 1'b0;
        Delay8_reg[1] <= 1'b0;
        Delay8_reg[2] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_reg[0] <= Delay8_reg_next[0];
          Delay8_reg[1] <= Delay8_reg_next[1];
          Delay8_reg[2] <= Delay8_reg_next[2];
        end
      end
    end

  assign Delay8_out1 = Delay8_reg[2];
  assign Delay8_reg_next[0] = alpha127_6_out1;
  assign Delay8_reg_next[1] = Delay8_reg[0];
  assign Delay8_reg_next[2] = Delay8_reg[1];



  always @(posedge clk or posedge reset)
    begin : Delay6_1_process
      if (reset == 1'b1) begin
        Delay6_out1_1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1_1 <= Delay8_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay31_process
      if (reset == 1'b1) begin
        Delay31_out1 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay31_out1 <= Delay6_out1_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay46_process
      if (reset == 1'b1) begin
        Delay46_reg[0] <= 1'b0;
        Delay46_reg[1] <= 1'b0;
        Delay46_reg[2] <= 1'b0;
        Delay46_reg[3] <= 1'b0;
        Delay46_reg[4] <= 1'b0;
        Delay46_reg[5] <= 1'b0;
        Delay46_reg[6] <= 1'b0;
        Delay46_reg[7] <= 1'b0;
        Delay46_reg[8] <= 1'b0;
        Delay46_reg[9] <= 1'b0;
        Delay46_reg[10] <= 1'b0;
        Delay46_reg[11] <= 1'b0;
        Delay46_reg[12] <= 1'b0;
        Delay46_reg[13] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay46_reg[0] <= Delay46_reg_next[0];
          Delay46_reg[1] <= Delay46_reg_next[1];
          Delay46_reg[2] <= Delay46_reg_next[2];
          Delay46_reg[3] <= Delay46_reg_next[3];
          Delay46_reg[4] <= Delay46_reg_next[4];
          Delay46_reg[5] <= Delay46_reg_next[5];
          Delay46_reg[6] <= Delay46_reg_next[6];
          Delay46_reg[7] <= Delay46_reg_next[7];
          Delay46_reg[8] <= Delay46_reg_next[8];
          Delay46_reg[9] <= Delay46_reg_next[9];
          Delay46_reg[10] <= Delay46_reg_next[10];
          Delay46_reg[11] <= Delay46_reg_next[11];
          Delay46_reg[12] <= Delay46_reg_next[12];
          Delay46_reg[13] <= Delay46_reg_next[13];
        end
      end
    end

  assign Delay46_out1 = Delay46_reg[13];
  assign Delay46_reg_next[0] = Delay31_out1;
  assign Delay46_reg_next[1] = Delay46_reg[0];
  assign Delay46_reg_next[2] = Delay46_reg[1];
  assign Delay46_reg_next[3] = Delay46_reg[2];
  assign Delay46_reg_next[4] = Delay46_reg[3];
  assign Delay46_reg_next[5] = Delay46_reg[4];
  assign Delay46_reg_next[6] = Delay46_reg[5];
  assign Delay46_reg_next[7] = Delay46_reg[6];
  assign Delay46_reg_next[8] = Delay46_reg[7];
  assign Delay46_reg_next[9] = Delay46_reg[8];
  assign Delay46_reg_next[10] = Delay46_reg[9];
  assign Delay46_reg_next[11] = Delay46_reg[10];
  assign Delay46_reg_next[12] = Delay46_reg[11];
  assign Delay46_reg_next[13] = Delay46_reg[12];



  always @(posedge clk or posedge reset)
    begin : Delay8_1_process
      if (reset == 1'b1) begin
        Delay8_reg_1[0] <= 1'b0;
        Delay8_reg_1[1] <= 1'b0;
        Delay8_reg_1[2] <= 1'b0;
        Delay8_reg_1[3] <= 1'b0;
        Delay8_reg_1[4] <= 1'b0;
        Delay8_reg_1[5] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay8_reg_1[0] <= Delay8_reg_next_1[0];
          Delay8_reg_1[1] <= Delay8_reg_next_1[1];
          Delay8_reg_1[2] <= Delay8_reg_next_1[2];
          Delay8_reg_1[3] <= Delay8_reg_next_1[3];
          Delay8_reg_1[4] <= Delay8_reg_next_1[4];
          Delay8_reg_1[5] <= Delay8_reg_next_1[5];
        end
      end
    end

  assign Delay8_out1_1 = Delay8_reg_1[5];
  assign Delay8_reg_next_1[0] = Delay46_out1;
  assign Delay8_reg_next_1[1] = Delay8_reg_1[0];
  assign Delay8_reg_next_1[2] = Delay8_reg_1[1];
  assign Delay8_reg_next_1[3] = Delay8_reg_1[2];
  assign Delay8_reg_next_1[4] = Delay8_reg_1[3];
  assign Delay8_reg_next_1[5] = Delay8_reg_1[4];



  always @(posedge clk or posedge reset)
    begin : Delay7_process
      if (reset == 1'b1) begin
        Delay7_reg[0] <= 1'b0;
        Delay7_reg[1] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay7_reg[0] <= Delay7_reg_next[0];
          Delay7_reg[1] <= Delay7_reg_next[1];
        end
      end
    end

  assign Delay7_out1 = Delay7_reg[1];
  assign Delay7_reg_next[0] = Delay8_out1_1;
  assign Delay7_reg_next[1] = Delay7_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay6_2_process
      if (reset == 1'b1) begin
        Delay6_out1_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay6_out1_2 <= Delay7_out1;
        end
      end
    end



  assign Constant_out1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : Delay3_2_process
      if (reset == 1'b1) begin
        Delay3_out1_2 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1_2 <= Constant_out1;
        end
      end
    end



  assign Constant3_out1 = 36'sh200000000;



  assign Constant3_out1_1 = 2'b00;



  assign Constant_out1_1 = 1'b1;



  always @(posedge clk or posedge reset)
    begin : Delay2_process
      if (reset == 1'b1) begin
        Delay2_out1 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1 <= aMantissa;
        end
      end
    end



  assign Bit_Concat_out1 = {Constant_out1_1, Delay2_out1};



  assign reinterpretcast_mant_cor_nume_out1 = Bit_Concat_out1;



  always @(posedge clk or posedge reset)
    begin : reduced_process
      if (reset == 1'b1) begin
        appendMantissaAndCorrectExponent_out2 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          appendMantissaAndCorrectExponent_out2 <= reinterpretcast_mant_cor_nume_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : reduced_1_process
      if (reset == 1'b1) begin
        reduced_reg[0] <= 24'b000000000000000000000000;
        reduced_reg[1] <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          reduced_reg[0] <= reduced_reg_next[0];
          reduced_reg[1] <= reduced_reg_next[1];
        end
      end
    end

  assign appendMantissaAndCorrectExponent_out2_1 = reduced_reg[1];
  assign reduced_reg_next[0] = appendMantissaAndCorrectExponent_out2;
  assign reduced_reg_next[1] = reduced_reg[0];



  always @(posedge clk or posedge reset)
    begin : Delay8_2_process
      if (reset == 1'b1) begin
        Delay8_out1_2 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1_2 <= appendMantissaAndCorrectExponent_out2_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay34_process
      if (reset == 1'b1) begin
        Delay34_out1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay34_out1 <= Delay8_out1_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay50_process
      if (reset == 1'b1) begin
        Delay50_reg[0] <= 24'b000000000000000000000000;
        Delay50_reg[1] <= 24'b000000000000000000000000;
        Delay50_reg[2] <= 24'b000000000000000000000000;
        Delay50_reg[3] <= 24'b000000000000000000000000;
        Delay50_reg[4] <= 24'b000000000000000000000000;
        Delay50_reg[5] <= 24'b000000000000000000000000;
        Delay50_reg[6] <= 24'b000000000000000000000000;
        Delay50_reg[7] <= 24'b000000000000000000000000;
        Delay50_reg[8] <= 24'b000000000000000000000000;
        Delay50_reg[9] <= 24'b000000000000000000000000;
        Delay50_reg[10] <= 24'b000000000000000000000000;
        Delay50_reg[11] <= 24'b000000000000000000000000;
        Delay50_reg[12] <= 24'b000000000000000000000000;
        Delay50_reg[13] <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay50_reg[0] <= Delay50_reg_next[0];
          Delay50_reg[1] <= Delay50_reg_next[1];
          Delay50_reg[2] <= Delay50_reg_next[2];
          Delay50_reg[3] <= Delay50_reg_next[3];
          Delay50_reg[4] <= Delay50_reg_next[4];
          Delay50_reg[5] <= Delay50_reg_next[5];
          Delay50_reg[6] <= Delay50_reg_next[6];
          Delay50_reg[7] <= Delay50_reg_next[7];
          Delay50_reg[8] <= Delay50_reg_next[8];
          Delay50_reg[9] <= Delay50_reg_next[9];
          Delay50_reg[10] <= Delay50_reg_next[10];
          Delay50_reg[11] <= Delay50_reg_next[11];
          Delay50_reg[12] <= Delay50_reg_next[12];
          Delay50_reg[13] <= Delay50_reg_next[13];
        end
      end
    end

  assign Delay50_out1 = Delay50_reg[13];
  assign Delay50_reg_next[0] = Delay34_out1;
  assign Delay50_reg_next[1] = Delay50_reg[0];
  assign Delay50_reg_next[2] = Delay50_reg[1];
  assign Delay50_reg_next[3] = Delay50_reg[2];
  assign Delay50_reg_next[4] = Delay50_reg[3];
  assign Delay50_reg_next[5] = Delay50_reg[4];
  assign Delay50_reg_next[6] = Delay50_reg[5];
  assign Delay50_reg_next[7] = Delay50_reg[6];
  assign Delay50_reg_next[8] = Delay50_reg[7];
  assign Delay50_reg_next[9] = Delay50_reg[8];
  assign Delay50_reg_next[10] = Delay50_reg[9];
  assign Delay50_reg_next[11] = Delay50_reg[10];
  assign Delay50_reg_next[12] = Delay50_reg[11];
  assign Delay50_reg_next[13] = Delay50_reg[12];



  always @(posedge clk or posedge reset)
    begin : Delay13_process
      if (reset == 1'b1) begin
        Delay13_reg[0] <= 24'b000000000000000000000000;
        Delay13_reg[1] <= 24'b000000000000000000000000;
        Delay13_reg[2] <= 24'b000000000000000000000000;
        Delay13_reg[3] <= 24'b000000000000000000000000;
        Delay13_reg[4] <= 24'b000000000000000000000000;
        Delay13_reg[5] <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay13_reg[0] <= Delay13_reg_next[0];
          Delay13_reg[1] <= Delay13_reg_next[1];
          Delay13_reg[2] <= Delay13_reg_next[2];
          Delay13_reg[3] <= Delay13_reg_next[3];
          Delay13_reg[4] <= Delay13_reg_next[4];
          Delay13_reg[5] <= Delay13_reg_next[5];
        end
      end
    end

  assign Delay13_out1 = Delay13_reg[5];
  assign Delay13_reg_next[0] = Delay50_out1;
  assign Delay13_reg_next[1] = Delay13_reg[0];
  assign Delay13_reg_next[2] = Delay13_reg[1];
  assign Delay13_reg_next[3] = Delay13_reg[2];
  assign Delay13_reg_next[4] = Delay13_reg[3];
  assign Delay13_reg_next[5] = Delay13_reg[4];



  assign Constant4_out1 = 10'b0000000000;



  assign Bit_Concat2_out1 = {Constant3_out1_1, Delay13_out1, Constant4_out1};



  assign Data_Type_Conversion2_out1 = Bit_Concat2_out1;



  assign Switch4_out1 = (Delay8_out1_1 == 1'b0 ? Constant3_out1 :
              Data_Type_Conversion2_out1);



  always @(posedge clk or posedge reset)
    begin : Delay1_2_process
      if (reset == 1'b1) begin
        Delay1_out1_2 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_2 <= Switch4_out1;
        end
      end
    end



  assign cast_1_like_mant_frac_out1 = 35'h200000000;



  assign alpha0_out1_1 = 2'b00;



  assign alpha0_out1_2 = 3'b000;



  assign Log2_E_out1 = 34'h2E2A8ECA5;



  assign alpha2_out1 = 10'b0000000000;



  assign Bit_Concat_out1_1 = {reinterpretcast_mant_cor_nume_out1, alpha2_out1};



  assign Data_Type_Conversion_out1 = Bit_Concat_out1_1;



  assign Switch_out1 = (alpha127_6_out1 == 1'b0 ? Log2_E_out1 :
              Data_Type_Conversion_out1);



  always @(posedge clk or posedge reset)
    begin : Delay4_1_process
      if (reset == 1'b1) begin
        Delay4_out1_1 <= 34'h000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_1 <= Switch_out1;
        end
      end
    end



  assign tmp1_1_66096404753625392914_mul_temp = appendMantissaAndCorrectExponent_out2 * Delay4_out1_1;
  assign tmp1_1_66096404753625392914_out1 = tmp1_1_66096404753625392914_mul_temp[57:23];



  always @(posedge clk or posedge reset)
    begin : Delay_1_process
      if (reset == 1'b1) begin
        Delay_reg[0] <= 35'h000000000;
        Delay_reg[1] <= 35'h000000000;
      end
      else begin
        if (enb) begin
          Delay_reg[0] <= Delay_reg_next[0];
          Delay_reg[1] <= Delay_reg_next[1];
        end
      end
    end

  assign Delay_out1_1 = Delay_reg[1];
  assign Delay_reg_next[0] = tmp1_1_66096404753625392914_out1;
  assign Delay_reg_next[1] = Delay_reg[0];



  assign BitSlice_out1 = Delay_out1_1[34];



  always @(posedge clk or posedge reset)
    begin : Delay1_3_process
      if (reset == 1'b1) begin
        Delay1_reg[0] <= 8'b00000000;
        Delay1_reg[1] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay1_reg[0] <= Delay1_reg_next[0];
          Delay1_reg[1] <= Delay1_reg_next[1];
        end
      end
    end

  assign Delay1_out1_3 = Delay1_reg[1];
  assign Delay1_reg_next[0] = Delay1_out1_1;
  assign Delay1_reg_next[1] = Delay1_reg[0];



  always @(posedge clk or posedge reset)
    begin : reduced_2_process
      if (reset == 1'b1) begin
        Delay1_out1_4 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_4 <= Delay1_out1_3;
        end
      end
    end



  assign alpha1_out1 = 8'b00000001;



  assign exp_cor_1_1 = {24'b0, Delay1_out1_3};
  assign exp_cor_1_2 = {24'b0, alpha1_out1};
  assign exp_cor_1_add_temp = exp_cor_1_1 + exp_cor_1_2;
  assign exp_cor_1_out1 = (exp_cor_1_add_temp[31:8] != 24'b000000000000000000000000 ? 8'b11111111 :
              exp_cor_1_add_temp[7:0]);



  always @(posedge clk or posedge reset)
    begin : Delay2_1_process
      if (reset == 1'b1) begin
        Delay2_out1_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_1 <= exp_cor_1_out1;
        end
      end
    end



  assign if_bitget_tmp2_tmp2_WordLength_out1 = (BitSlice_out1 == 1'b0 ? Delay1_out1_4 :
              Delay2_out1_1);



  assign Bit_Concat_out1_2 = {alpha0_out1_2, if_bitget_tmp2_tmp2_WordLength_out1};



  assign reinterpretcast_bitconcat_fi_0_out1 = Bit_Concat_out1_2;



  assign cast_cfType_ExponentBias_lik_out1 = 11'sb11110000010;



  assign exp_tmp_cast_cfType_Exponent_out1 = reinterpretcast_bitconcat_fi_0_out1 + cast_cfType_ExponentBias_lik_out1;



  assign BitSlice_out1_1 = exp_tmp_cast_cfType_Exponent_out1[10];



  always @(posedge clk or posedge reset)
    begin : Delay3_3_process
      if (reset == 1'b1) begin
        Delay3_out1_3 <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_out1_3 <= BitSlice_out1_1;
        end
      end
    end



  assign alpha3_out1 = 8'b00000000;



  assign BitSlice2_out1 = Delay_out1_1[33:0];



  assign reinterpretcast_bitsliceget_t_out1 = BitSlice2_out1;



  assign BitSlice1_out1 = Delay_out1_1[34:1];



  assign reinterpretcast_bitsliceget_t_out1_1 = BitSlice1_out1;



  assign if_bitget_tmp2_tmp2_WordLength_1_out1 = (BitSlice_out1 == 1'b0 ? reinterpretcast_bitsliceget_t_out1 :
              reinterpretcast_bitsliceget_t_out1_1);



  assign Bit_Concat3_out1 = {alpha3_out1, if_bitget_tmp2_tmp2_WordLength_1_out1};



  assign reinterpretcast_bitconcat_fi_0_out1_1 = Bit_Concat3_out1[38:0];



  always @(posedge clk or posedge reset)
    begin : Delay_2_process
      if (reset == 1'b1) begin
        Delay_out1_2 <= 39'h0000000000;
      end
      else begin
        if (enb) begin
          Delay_out1_2 <= reinterpretcast_bitconcat_fi_0_out1_1;
        end
      end
    end



  assign DTC2_out1 = ((exp_tmp_cast_cfType_Exponent_out1[10] == 1'b0) && (exp_tmp_cast_cfType_Exponent_out1[9:6] != 4'b0000) ? 6'b111111 :
              (exp_tmp_cast_cfType_Exponent_out1[10] == 1'b1 ? 6'b000000 :
              exp_tmp_cast_cfType_Exponent_out1[5:0]));



  always @(posedge clk or posedge reset)
    begin : Delay5_process
      if (reset == 1'b1) begin
        Delay5_out1 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay5_out1 <= DTC2_out1;
        end
      end
    end



  assign dynamic_shift_cast = {2'b0, Delay5_out1};
  assign bitsll_tmp1_shift_length_out1 = Delay_out1_2 <<< dynamic_shift_cast;



  assign cast_cfType_ExponentBias_lik_out1_1 = 8'b01111110;



  assign cast_cfType_ExponentBias_lik_out1_2 = cast_cfType_ExponentBias_lik_out1_1 - if_bitget_tmp2_tmp2_WordLength_out1;



  assign DTC1_out1 = (cast_cfType_ExponentBias_lik_out1_2[7:6] != 2'b00 ? 6'b111111 :
              cast_cfType_ExponentBias_lik_out1_2[5:0]);



  always @(posedge clk or posedge reset)
    begin : Delay10_process
      if (reset == 1'b1) begin
        Delay10_out1 <= 6'b000000;
      end
      else begin
        if (enb) begin
          Delay10_out1 <= DTC1_out1;
        end
      end
    end



  assign dynamic_shift_cast_1 = {2'b0, Delay10_out1};
  assign Shift_Arithmetic_out1 = Delay_out1_2 >>> dynamic_shift_cast_1;



  assign if_shift_sign_out1 = (Delay3_out1_3 == 1'b0 ? bitsll_tmp1_shift_length_out1 :
              Shift_Arithmetic_out1);



  always @(posedge clk or posedge reset)
    begin : Delay3_4_process
      if (reset == 1'b1) begin
        Delay3_out1_4 <= 39'h0000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_4 <= if_shift_sign_out1;
        end
      end
    end



  assign BitSlice_out1_2 = Delay3_out1_4[32:0];



  assign Bit_Concat_out1_3 = {alpha0_out1_1, BitSlice_out1_2};



  assign reinterpretcast_bitconcat_fi_0_out1_2 = Bit_Concat_out1_3;



  assign cast_1_like_mant_frac_m_out1 = cast_1_like_mant_frac_out1 - reinterpretcast_bitconcat_fi_0_out1_2;



  assign BitSlice1_out1_1 = cast_1_like_mant_frac_m_out1[33];



  assign Logical_Operator_out1_2 =  ~ BitSlice1_out1_1;



  assign if_sticky_1_out1 = (Logical_Operator_out1_2 == 1'b0 ? reinterpretcast_bitconcat_fi_0_out1_2 :
              cast_1_like_mant_frac_m_out1);



  always @(posedge clk or posedge reset)
    begin : Delay1_4_process
      if (reset == 1'b1) begin
        Delay1_out1_5 <= 35'h000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_5 <= if_sticky_1_out1;
        end
      end
    end



  assign Bit_Shift_out1 = Delay1_out1_5 <<< 8'd1;



  assign Data_Type_Conversion_out1_1 = Bit_Shift_out1;



  assign BitSlice_out1_3 = Data_Type_Conversion_out1_1[33];



  assign Log2Table_1_out1 = 35'sh5A8FF9718;



  assign w_Log2Table_1_out1 = Data_Type_Conversion_out1_1 + Log2Table_1_out1;



  assign if_bitget_w_w_WordLength_1_out1 = (BitSlice_out1_3 == 1'b0 ? Data_Type_Conversion_out1_1 :
              w_Log2Table_1_out1);



  always @(posedge clk or posedge reset)
    begin : Delay12_process
      if (reset == 1'b1) begin
        Delay12_out1 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          Delay12_out1 <= if_bitget_w_w_WordLength_1_out1;
        end
      end
    end



  assign bitsll_w_1_out1 = Delay12_out1 <<< 8'd1;



  assign BitSlice1_out1_2 = bitsll_w_1_out1[33];



  assign BitSlice_out1_4 = bitsll_w_1_out1[34];



  assign alphabitget_w_w_WordLength_1_out1 = BitSlice1_out1_2 ^ BitSlice_out1_4;



  assign Log2Table_int32_2_out1 = 35'sh56CB0F687;



  assign Log2MinusTable_int32_2_out1 = 35'sh351FF2E30;



  assign if_bitget_w_w_WordLength_0_out1 = (BitSlice_out1_4 == 1'b0 ? Log2Table_int32_2_out1 :
              Log2MinusTable_int32_2_out1);



  assign w_Log2MinusTable_int32_2_1_out1 = bitsll_w_1_out1 + if_bitget_w_w_WordLength_0_out1;



  assign if_bitget_w_w_WordLength_1_out1_1 = (alphabitget_w_w_WordLength_1_out1 == 1'b0 ? bitsll_w_1_out1 :
              w_Log2MinusTable_int32_2_1_out1);



  always @(posedge clk or posedge reset)
    begin : Delay1_5_process
      if (reset == 1'b1) begin
        Delay1_out1_6 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_6 <= if_bitget_w_w_WordLength_1_out1_1;
        end
      end
    end



  assign bitsll_w_1_out1_1 = Delay1_out1_6 <<< 8'd1;



  assign BitSlice1_out1_3 = bitsll_w_1_out1_1[33];



  assign BitSlice_out1_5 = bitsll_w_1_out1_1[34];



  assign alphabitget_w_w_WordLength_1_out1_1 = BitSlice1_out1_3 ^ BitSlice_out1_5;



  assign Log2Table_int32_3_out1 = 35'sh547FCB8C1;



  assign Log2MinusTable_int32_3_out1 = 35'sh315130158;



  assign if_bitget_w_w_WordLength_0_out1_1 = (BitSlice_out1_5 == 1'b0 ? Log2Table_int32_3_out1 :
              Log2MinusTable_int32_3_out1);



  assign w_Log2MinusTable_int32_2_out1 = bitsll_w_1_out1_1 + if_bitget_w_w_WordLength_0_out1_1;



  assign if_bitget_w_w_WordLength_1_out1_2 = (alphabitget_w_w_WordLength_1_out1_1 == 1'b0 ? bitsll_w_1_out1_1 :
              w_Log2MinusTable_int32_2_out1);



  always @(posedge clk or posedge reset)
    begin : Delay11_process
      if (reset == 1'b1) begin
        Delay11_out1 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          Delay11_out1 <= if_bitget_w_w_WordLength_1_out1_2;
        end
      end
    end



  assign bitsll_w_1_out1_2 = Delay11_out1 <<< 8'd1;



  assign BitSlice1_out1_4 = bitsll_w_1_out1_2[33];



  assign BitSlice_out1_6 = bitsll_w_1_out1_2[34];



  assign alphabitget_w_w_WordLength_1_out1_2 = BitSlice1_out1_4 ^ BitSlice_out1_6;



  assign Log2Table_int32_4_out1 = 35'sh5338120A7;



  assign Log2MinusTable_int32_4_out1 = 35'sh2FAC092DA;



  assign if_bitget_w_w_WordLength_0_out1_2 = (BitSlice_out1_6 == 1'b0 ? Log2Table_int32_4_out1 :
              Log2MinusTable_int32_4_out1);



  assign w_Log2MinusTable_int32_2_out1_1 = bitsll_w_1_out1_2 + if_bitget_w_w_WordLength_0_out1_2;



  assign if_bitget_w_w_WordLength_1_out1_3 = (alphabitget_w_w_WordLength_1_out1_2 == 1'b0 ? bitsll_w_1_out1_2 :
              w_Log2MinusTable_int32_2_out1_1);



  always @(posedge clk or posedge reset)
    begin : Delay3_5_process
      if (reset == 1'b1) begin
        Delay3_out1_5 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_5 <= if_bitget_w_w_WordLength_1_out1_3;
        end
      end
    end



  assign bitsll_w_1_out1_3 = Delay3_out1_5 <<< 8'd1;



  assign BitSlice1_out1_5 = bitsll_w_1_out1_3[33];



  assign BitSlice_out1_7 = bitsll_w_1_out1_3[34];



  assign alphabitget_w_w_WordLength_1_out1_3 = BitSlice1_out1_5 ^ BitSlice_out1_7;



  assign Log2Table_int32_5_out1 = 35'sh528A5914E;



  assign Log2MinusTable_int32_5_out1 = 35'sh2EE72993B;



  assign if_bitget_w_w_WordLength_0_out1_3 = (BitSlice_out1_7 == 1'b0 ? Log2Table_int32_5_out1 :
              Log2MinusTable_int32_5_out1);



  assign w_Log2MinusTable_int32_2_out1_2 = bitsll_w_1_out1_3 + if_bitget_w_w_WordLength_0_out1_3;



  assign if_bitget_w_w_WordLength_1_out1_4 = (alphabitget_w_w_WordLength_1_out1_3 == 1'b0 ? bitsll_w_1_out1_3 :
              w_Log2MinusTable_int32_2_out1_2);



  always @(posedge clk or posedge reset)
    begin : Delay13_1_process
      if (reset == 1'b1) begin
        Delay13_out1_1 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          Delay13_out1_1 <= if_bitget_w_w_WordLength_1_out1_4;
        end
      end
    end



  assign bitsll_w_1_out1_4 = Delay13_out1_1 <<< 8'd1;



  assign BitSlice1_out1_6 = bitsll_w_1_out1_4[33];



  assign BitSlice_out1_8 = bitsll_w_1_out1_4[34];



  assign alphabitget_w_w_WordLength_1_out1_4 = BitSlice1_out1_6 ^ BitSlice_out1_8;



  assign Log2Table_int32_6_out1 = 35'sh5230D2F48;



  assign Log2MinusTable_int32_6_out1 = 35'sh2E87DD0C4;



  assign if_bitget_w_w_WordLength_0_out1_4 = (BitSlice_out1_8 == 1'b0 ? Log2Table_int32_6_out1 :
              Log2MinusTable_int32_6_out1);



  assign w_Log2MinusTable_int32_2_out1_3 = bitsll_w_1_out1_4 + if_bitget_w_w_WordLength_0_out1_4;



  assign if_bitget_w_w_WordLength_1_out1_5 = (alphabitget_w_w_WordLength_1_out1_4 == 1'b0 ? bitsll_w_1_out1_4 :
              w_Log2MinusTable_int32_2_out1_3);



  always @(posedge clk or posedge reset)
    begin : Delay5_1_process
      if (reset == 1'b1) begin
        Delay5_out1_1 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1_1 <= if_bitget_w_w_WordLength_1_out1_5;
        end
      end
    end



  assign bitsll_w_1_out1_5 = Delay5_out1_1 <<< 8'd1;



  assign BitSlice1_out1_7 = bitsll_w_1_out1_5[33];



  assign BitSlice_out1_9 = bitsll_w_1_out1_5[34];



  assign alphabitget_w_w_WordLength_1_out1_5 = BitSlice1_out1_7 ^ BitSlice_out1_9;



  assign Log2Table_int32_7_out1 = 35'sh52035E922;



  assign Log2MinusTable_int32_7_out1 = 35'sh2E58F7442;



  assign if_bitget_w_w_WordLength_0_out1_5 = (BitSlice_out1_9 == 1'b0 ? Log2Table_int32_7_out1 :
              Log2MinusTable_int32_7_out1);



  assign w_Log2MinusTable_int32_2_out1_4 = bitsll_w_1_out1_5 + if_bitget_w_w_WordLength_0_out1_5;



  assign if_bitget_w_w_WordLength_1_out1_6 = (alphabitget_w_w_WordLength_1_out1_5 == 1'b0 ? bitsll_w_1_out1_5 :
              w_Log2MinusTable_int32_2_out1_4);



  always @(posedge clk or posedge reset)
    begin : Delay15_process
      if (reset == 1'b1) begin
        Delay15_out1 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          Delay15_out1 <= if_bitget_w_w_WordLength_1_out1_6;
        end
      end
    end



  assign bitsll_w_1_out1_6 = Delay15_out1 <<< 8'd1;



  assign BitSlice1_out1_8 = bitsll_w_1_out1_6[33];



  assign BitSlice_out1_10 = bitsll_w_1_out1_6[34];



  assign alphabitget_w_w_WordLength_1_out1_6 = BitSlice1_out1_8 ^ BitSlice_out1_10;



  assign Log2Table_int32_8_out1 = 35'sh51EC77251;



  assign Log2MinusTable_int32_8_out1 = 35'sh2E41B380E;



  assign if_bitget_w_w_WordLength_0_out1_6 = (BitSlice_out1_10 == 1'b0 ? Log2Table_int32_8_out1 :
              Log2MinusTable_int32_8_out1);



  assign w_Log2MinusTable_int32_2_out1_5 = bitsll_w_1_out1_6 + if_bitget_w_w_WordLength_0_out1_6;



  assign if_bitget_w_w_WordLength_1_out1_7 = (alphabitget_w_w_WordLength_1_out1_6 == 1'b0 ? bitsll_w_1_out1_6 :
              w_Log2MinusTable_int32_2_out1_5);



  always @(posedge clk or posedge reset)
    begin : Delay7_1_process
      if (reset == 1'b1) begin
        Delay7_out1_1 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1_1 <= if_bitget_w_w_WordLength_1_out1_7;
        end
      end
    end



  assign bitsll_w_1_out1_7 = Delay7_out1_1 <<< 8'd1;



  assign BitSlice1_out1_9 = bitsll_w_1_out1_7[33];



  assign BitSlice_out1_11 = bitsll_w_1_out1_7[34];



  assign alphabitget_w_w_WordLength_1_out1_7 = BitSlice1_out1_9 ^ BitSlice_out1_11;



  assign Log2Table_int32_9_out1 = 35'sh51E0F801F;



  assign Log2MinusTable_int32_9_out1 = 35'sh2E361D486;



  assign if_bitget_w_w_WordLength_0_out1_7 = (BitSlice_out1_11 == 1'b0 ? Log2Table_int32_9_out1 :
              Log2MinusTable_int32_9_out1);



  assign w_Log2MinusTable_int32_2_out1_6 = bitsll_w_1_out1_7 + if_bitget_w_w_WordLength_0_out1_7;



  assign if_bitget_w_w_WordLength_1_out1_8 = (alphabitget_w_w_WordLength_1_out1_7 == 1'b0 ? bitsll_w_1_out1_7 :
              w_Log2MinusTable_int32_2_out1_6);



  always @(posedge clk or posedge reset)
    begin : Delay17_process
      if (reset == 1'b1) begin
        Delay17_out1 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          Delay17_out1 <= if_bitget_w_w_WordLength_1_out1_8;
        end
      end
    end



  assign bitsll_w_1_out1_8 = Delay17_out1 <<< 8'd1;



  assign BitSlice1_out1_10 = bitsll_w_1_out1_8[33];



  assign BitSlice_out1_12 = bitsll_w_1_out1_8[34];



  assign alphabitget_w_w_WordLength_1_out1_8 = BitSlice1_out1_10 ^ BitSlice_out1_12;



  assign Log2Table_int32_10_out1 = 35'sh51DB35918;



  assign Log2MinusTable_int32_10_out1 = 35'sh2E305512A;



  assign if_bitget_w_w_WordLength_0_out1_8 = (BitSlice_out1_12 == 1'b0 ? Log2Table_int32_10_out1 :
              Log2MinusTable_int32_10_out1);



  assign w_Log2MinusTable_int32_2_out1_7 = bitsll_w_1_out1_8 + if_bitget_w_w_WordLength_0_out1_8;



  assign if_bitget_w_w_WordLength_1_out1_9 = (alphabitget_w_w_WordLength_1_out1_8 == 1'b0 ? bitsll_w_1_out1_8 :
              w_Log2MinusTable_int32_2_out1_7);



  always @(posedge clk or posedge reset)
    begin : Delay9_1_process
      if (reset == 1'b1) begin
        Delay9_out1_1 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1_1 <= if_bitget_w_w_WordLength_1_out1_9;
        end
      end
    end



  assign bitsll_w_1_out1_9 = Delay9_out1_1 <<< 8'd1;



  assign BitSlice1_out1_11 = bitsll_w_1_out1_9[33];



  assign BitSlice_out1_13 = bitsll_w_1_out1_9[34];



  assign alphabitget_w_w_WordLength_1_out1_9 = BitSlice1_out1_11 ^ BitSlice_out1_13;



  assign Log2Table_int32_11_out1 = 35'sh51D853A11;



  assign Log2MinusTable_int32_11_out1 = 35'sh2E2D71B0E;



  assign if_bitget_w_w_WordLength_0_out1_9 = (BitSlice_out1_13 == 1'b0 ? Log2Table_int32_11_out1 :
              Log2MinusTable_int32_11_out1);



  assign w_Log2MinusTable_int32_2_out1_8 = bitsll_w_1_out1_9 + if_bitget_w_w_WordLength_0_out1_9;



  assign if_bitget_w_w_WordLength_1_out1_10 = (alphabitget_w_w_WordLength_1_out1_9 == 1'b0 ? bitsll_w_1_out1_9 :
              w_Log2MinusTable_int32_2_out1_8);



  always @(posedge clk or posedge reset)
    begin : Delay19_process
      if (reset == 1'b1) begin
        Delay19_out1 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          Delay19_out1 <= if_bitget_w_w_WordLength_1_out1_10;
        end
      end
    end



  assign bitsll_w_1_out1_10 = Delay19_out1 <<< 8'd1;



  assign BitSlice1_out1_12 = bitsll_w_1_out1_10[33];



  assign BitSlice_out1_14 = bitsll_w_1_out1_10[34];



  assign alphabitget_w_w_WordLength_1_out1_10 = BitSlice1_out1_12 ^ BitSlice_out1_14;



  assign Log2Table_int32_12_out1 = 35'sh51D6E27AC;



  assign Log2MinusTable_int32_12_out1 = 35'sh2E2C002E3;



  assign if_bitget_w_w_WordLength_0_out1_10 = (BitSlice_out1_14 == 1'b0 ? Log2Table_int32_12_out1 :
              Log2MinusTable_int32_12_out1);



  assign w_Log2MinusTable_int32_2_out1_9 = bitsll_w_1_out1_10 + if_bitget_w_w_WordLength_0_out1_10;



  assign if_bitget_w_w_WordLength_1_out1_11 = (alphabitget_w_w_WordLength_1_out1_10 == 1'b0 ? bitsll_w_1_out1_10 :
              w_Log2MinusTable_int32_2_out1_9);



  always @(posedge clk or posedge reset)
    begin : Delay23_process
      if (reset == 1'b1) begin
        Delay23_out1 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          Delay23_out1 <= if_bitget_w_w_WordLength_1_out1_11;
        end
      end
    end



  assign bitsll_w_1_out1_11 = Delay23_out1 <<< 8'd1;



  assign BitSlice1_out1_13 = bitsll_w_1_out1_11[33];



  assign BitSlice_out1_15 = bitsll_w_1_out1_11[34];



  assign alphabitget_w_w_WordLength_1_out1_11 = BitSlice1_out1_13 ^ BitSlice_out1_15;



  assign Log2Table_int32_13_out1 = 35'sh51D629DC1;



  assign Log2MinusTable_int32_13_out1 = 35'sh2E2B47787;



  assign if_bitget_w_w_WordLength_0_out1_11 = (BitSlice_out1_15 == 1'b0 ? Log2Table_int32_13_out1 :
              Log2MinusTable_int32_13_out1);



  assign w_Log2MinusTable_int32_2_out1_10 = bitsll_w_1_out1_11 + if_bitget_w_w_WordLength_0_out1_11;



  assign if_bitget_w_w_WordLength_1_out1_12 = (alphabitget_w_w_WordLength_1_out1_11 == 1'b0 ? bitsll_w_1_out1_11 :
              w_Log2MinusTable_int32_2_out1_10);



  always @(posedge clk or posedge reset)
    begin : Delay21_process
      if (reset == 1'b1) begin
        Delay21_out1 <= 35'sh000000000;
      end
      else begin
        if (enb) begin
          Delay21_out1 <= if_bitget_w_w_WordLength_1_out1_12;
        end
      end
    end



  assign BitSlice1_out1_14 = Delay21_out1[32];



  assign BitSlice_out1_16 = Delay21_out1[33];



  assign alphabitget_w_w_WordLength_1_out1_12 = BitSlice1_out1_14 ^ BitSlice_out1_16;



  assign C1_out1 = 4'sb0010;



  assign C_out1 = 4'sb0011;



  assign if_bitget_w_w_WordLength_1_1_out1 = (BitSlice_out1_3 == 1'b0 ? C1_out1 :
              C_out1);



  always @(posedge clk or posedge reset)
    begin : Delay11_1_process
      if (reset == 1'b1) begin
        Delay11_out1_1 <= 4'sb0000;
      end
      else begin
        if (enb) begin
          Delay11_out1_1 <= if_bitget_w_w_WordLength_1_1_out1;
        end
      end
    end



  assign Constant_out1_2 = 2'b00;



  assign Bit_Concat_out1_4 = {Delay11_out1_1, Constant_out1_2};



  assign dtc1_out1_1 = Bit_Concat_out1_4;



  assign bitsrl_y_int32_2_out1 = dtc1_out1_1 >> 8'd2;



  assign y_tmp1_out1 = dtc1_out1_1 - bitsrl_y_int32_2_out1;



  assign y_tmp1_out1_1 = dtc1_out1_1 + bitsrl_y_int32_2_out1;



  assign if_bitget_w_w_WordLength_0_1_out1 = (BitSlice1_out1_2 == 1'b0 ? y_tmp1_out1 :
              y_tmp1_out1_1);



  assign if_bitget_w_w_WordLength_1_1_out1_1 = (alphabitget_w_w_WordLength_1_out1 == 1'b0 ? dtc1_out1_1 :
              if_bitget_w_w_WordLength_0_1_out1);



  always @(posedge clk or posedge reset)
    begin : Delay_3_process
      if (reset == 1'b1) begin
        Delay_out1_3 <= 6'sb000000;
      end
      else begin
        if (enb) begin
          Delay_out1_3 <= if_bitget_w_w_WordLength_1_1_out1_1;
        end
      end
    end



  assign Constant_out1_3 = 3'b000;



  assign Bit_Concat_out1_5 = {Delay_out1_3, Constant_out1_3};



  assign dtc1_out1_2 = Bit_Concat_out1_5;



  assign bitsrl_y_int32_2_out1_1 = dtc1_out1_2 >> 8'd3;



  assign y_tmp1_out1_2 = dtc1_out1_2 - bitsrl_y_int32_2_out1_1;



  assign y_tmp1_out1_3 = dtc1_out1_2 + bitsrl_y_int32_2_out1_1;



  assign if_bitget_w_w_WordLength_0_1_out1_1 = (BitSlice1_out1_3 == 1'b0 ? y_tmp1_out1_2 :
              y_tmp1_out1_3);



  assign if_bitget_w_w_WordLength_1_1_out1_2 = (alphabitget_w_w_WordLength_1_out1_1 == 1'b0 ? dtc1_out1_2 :
              if_bitget_w_w_WordLength_0_1_out1_1);



  always @(posedge clk or posedge reset)
    begin : Delay10_1_process
      if (reset == 1'b1) begin
        Delay10_out1_1 <= 9'sb000000000;
      end
      else begin
        if (enb) begin
          Delay10_out1_1 <= if_bitget_w_w_WordLength_1_1_out1_2;
        end
      end
    end



  assign Constant_out1_4 = 4'b0000;



  assign Bit_Concat_out1_6 = {Delay10_out1_1, Constant_out1_4};



  assign dtc1_out1_3 = Bit_Concat_out1_6;



  assign bitsrl_y_int32_2_out1_2 = dtc1_out1_3 >> 8'd4;



  assign y_tmp1_out1_4 = dtc1_out1_3 - bitsrl_y_int32_2_out1_2;



  assign y_tmp1_out1_5 = dtc1_out1_3 + bitsrl_y_int32_2_out1_2;



  assign if_bitget_w_w_WordLength_0_1_out1_2 = (BitSlice1_out1_4 == 1'b0 ? y_tmp1_out1_4 :
              y_tmp1_out1_5);



  assign if_bitget_w_w_WordLength_1_1_out1_3 = (alphabitget_w_w_WordLength_1_out1_2 == 1'b0 ? dtc1_out1_3 :
              if_bitget_w_w_WordLength_0_1_out1_2);



  always @(posedge clk or posedge reset)
    begin : Delay2_2_process
      if (reset == 1'b1) begin
        Delay2_out1_2 <= 13'sb0000000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_2 <= if_bitget_w_w_WordLength_1_1_out1_3;
        end
      end
    end



  assign Constant_out1_5 = 5'b00000;



  assign Bit_Concat_out1_7 = {Delay2_out1_2, Constant_out1_5};



  assign dtc1_out1_4 = Bit_Concat_out1_7;



  assign bitsrl_y_int32_2_out1_3 = dtc1_out1_4 >> 8'd5;



  assign y_tmp1_out1_6 = dtc1_out1_4 - bitsrl_y_int32_2_out1_3;



  assign y_tmp1_out1_7 = dtc1_out1_4 + bitsrl_y_int32_2_out1_3;



  assign if_bitget_w_w_WordLength_0_1_out1_3 = (BitSlice1_out1_5 == 1'b0 ? y_tmp1_out1_6 :
              y_tmp1_out1_7);



  assign if_bitget_w_w_WordLength_1_1_out1_4 = (alphabitget_w_w_WordLength_1_out1_3 == 1'b0 ? dtc1_out1_4 :
              if_bitget_w_w_WordLength_0_1_out1_3);



  always @(posedge clk or posedge reset)
    begin : Delay12_1_process
      if (reset == 1'b1) begin
        Delay12_out1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          Delay12_out1_1 <= if_bitget_w_w_WordLength_1_1_out1_4;
        end
      end
    end



  assign Constant_out1_6 = 6'b000000;



  assign Bit_Concat_out1_8 = {Delay12_out1_1, Constant_out1_6};



  assign dtc1_out1_5 = Bit_Concat_out1_8;



  assign bitsrl_y_int32_2_out1_4 = dtc1_out1_5 >> 8'd6;



  assign y_tmp1_out1_8 = dtc1_out1_5 - bitsrl_y_int32_2_out1_4;



  assign y_tmp1_out1_9 = dtc1_out1_5 + bitsrl_y_int32_2_out1_4;



  assign if_bitget_w_w_WordLength_0_1_out1_4 = (BitSlice1_out1_6 == 1'b0 ? y_tmp1_out1_8 :
              y_tmp1_out1_9);



  assign if_bitget_w_w_WordLength_1_1_out1_5 = (alphabitget_w_w_WordLength_1_out1_4 == 1'b0 ? dtc1_out1_5 :
              if_bitget_w_w_WordLength_0_1_out1_4);



  always @(posedge clk or posedge reset)
    begin : Delay4_2_process
      if (reset == 1'b1) begin
        Delay4_out1_2 <= 24'sb000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_2 <= if_bitget_w_w_WordLength_1_1_out1_5;
        end
      end
    end



  assign Constant_out1_7 = 7'b0000000;



  assign Bit_Concat_out1_9 = {Delay4_out1_2, Constant_out1_7};



  assign dtc1_out1_6 = Bit_Concat_out1_9;



  assign bitsrl_y_int32_2_out1_5 = dtc1_out1_6 >> 8'd7;



  assign y_tmp1_out1_10 = dtc1_out1_6 - bitsrl_y_int32_2_out1_5;



  assign y_tmp1_out1_11 = dtc1_out1_6 + bitsrl_y_int32_2_out1_5;



  assign if_bitget_w_w_WordLength_0_1_out1_5 = (BitSlice1_out1_7 == 1'b0 ? y_tmp1_out1_10 :
              y_tmp1_out1_11);



  assign if_bitget_w_w_WordLength_1_1_out1_6 = (alphabitget_w_w_WordLength_1_out1_5 == 1'b0 ? dtc1_out1_6 :
              if_bitget_w_w_WordLength_0_1_out1_5);



  always @(posedge clk or posedge reset)
    begin : Delay14_process
      if (reset == 1'b1) begin
        Delay14_out1 <= 31'sb0000000000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1 <= if_bitget_w_w_WordLength_1_1_out1_6;
        end
      end
    end



  assign Constant_out1_8 = 5'b00000;



  assign Bit_Concat_out1_10 = {Delay14_out1, Constant_out1_8};



  assign dtc1_out1_7 = Bit_Concat_out1_10;



  assign bitsrl_y_int32_2_out1_6 = dtc1_out1_7 >> 8'd8;



  assign y_tmp1_out1_12 = dtc1_out1_7 - bitsrl_y_int32_2_out1_6;



  assign y_tmp1_out1_13 = dtc1_out1_7 + bitsrl_y_int32_2_out1_6;



  assign if_bitget_w_w_WordLength_0_1_out1_6 = (BitSlice1_out1_8 == 1'b0 ? y_tmp1_out1_12 :
              y_tmp1_out1_13);



  assign if_bitget_w_w_WordLength_1_1_out1_7 = (alphabitget_w_w_WordLength_1_out1_6 == 1'b0 ? dtc1_out1_7 :
              if_bitget_w_w_WordLength_0_1_out1_6);



  always @(posedge clk or posedge reset)
    begin : Delay6_3_process
      if (reset == 1'b1) begin
        Delay6_out1_3 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1_3 <= if_bitget_w_w_WordLength_1_1_out1_7;
        end
      end
    end



  assign bitsrl_y_int32_2_out1_7 = Delay6_out1_3 >> 8'd9;



  assign y_tmp1_out1_14 = Delay6_out1_3 - bitsrl_y_int32_2_out1_7;



  assign y_tmp1_out1_15 = Delay6_out1_3 + bitsrl_y_int32_2_out1_7;



  assign if_bitget_w_w_WordLength_0_1_out1_7 = (BitSlice1_out1_9 == 1'b0 ? y_tmp1_out1_14 :
              y_tmp1_out1_15);



  assign if_bitget_w_w_WordLength_1_1_out1_8 = (alphabitget_w_w_WordLength_1_out1_7 == 1'b0 ? Delay6_out1_3 :
              if_bitget_w_w_WordLength_0_1_out1_7);



  always @(posedge clk or posedge reset)
    begin : Delay16_process
      if (reset == 1'b1) begin
        Delay16_out1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay16_out1 <= if_bitget_w_w_WordLength_1_1_out1_8;
        end
      end
    end



  assign bitsrl_y_int32_2_out1_8 = Delay16_out1 >> 8'd10;



  assign y_tmp1_out1_16 = Delay16_out1 - bitsrl_y_int32_2_out1_8;



  assign y_tmp1_out1_17 = Delay16_out1 + bitsrl_y_int32_2_out1_8;



  assign if_bitget_w_w_WordLength_0_1_out1_8 = (BitSlice1_out1_10 == 1'b0 ? y_tmp1_out1_16 :
              y_tmp1_out1_17);



  assign if_bitget_w_w_WordLength_1_1_out1_9 = (alphabitget_w_w_WordLength_1_out1_8 == 1'b0 ? Delay16_out1 :
              if_bitget_w_w_WordLength_0_1_out1_8);



  always @(posedge clk or posedge reset)
    begin : Delay8_3_process
      if (reset == 1'b1) begin
        Delay8_out1_3 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1_3 <= if_bitget_w_w_WordLength_1_1_out1_9;
        end
      end
    end



  assign bitsrl_y_int32_2_out1_9 = Delay8_out1_3 >> 8'd11;



  assign y_tmp1_out1_18 = Delay8_out1_3 - bitsrl_y_int32_2_out1_9;



  assign y_tmp1_out1_19 = Delay8_out1_3 + bitsrl_y_int32_2_out1_9;



  assign if_bitget_w_w_WordLength_0_1_out1_9 = (BitSlice1_out1_11 == 1'b0 ? y_tmp1_out1_18 :
              y_tmp1_out1_19);



  assign if_bitget_w_w_WordLength_1_1_out1_10 = (alphabitget_w_w_WordLength_1_out1_9 == 1'b0 ? Delay8_out1_3 :
              if_bitget_w_w_WordLength_0_1_out1_9);



  always @(posedge clk or posedge reset)
    begin : Delay18_process
      if (reset == 1'b1) begin
        Delay18_out1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay18_out1 <= if_bitget_w_w_WordLength_1_1_out1_10;
        end
      end
    end



  assign bitsrl_y_int32_2_out1_10 = Delay18_out1 >> 8'd12;



  assign y_tmp1_out1_20 = Delay18_out1 - bitsrl_y_int32_2_out1_10;



  assign y_tmp1_out1_21 = Delay18_out1 + bitsrl_y_int32_2_out1_10;



  assign if_bitget_w_w_WordLength_0_1_out1_10 = (BitSlice1_out1_12 == 1'b0 ? y_tmp1_out1_20 :
              y_tmp1_out1_21);



  assign if_bitget_w_w_WordLength_1_1_out1_11 = (alphabitget_w_w_WordLength_1_out1_10 == 1'b0 ? Delay18_out1 :
              if_bitget_w_w_WordLength_0_1_out1_10);



  always @(posedge clk or posedge reset)
    begin : Delay22_process
      if (reset == 1'b1) begin
        Delay22_out1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay22_out1 <= if_bitget_w_w_WordLength_1_1_out1_11;
        end
      end
    end



  assign bitsrl_y_int32_2_out1_11 = Delay22_out1 >> 8'd13;



  assign y_tmp1_out1_22 = Delay22_out1 - bitsrl_y_int32_2_out1_11;



  assign y_tmp1_out1_23 = Delay22_out1 + bitsrl_y_int32_2_out1_11;



  assign if_bitget_w_w_WordLength_0_1_out1_11 = (BitSlice1_out1_13 == 1'b0 ? y_tmp1_out1_22 :
              y_tmp1_out1_23);



  assign if_bitget_w_w_WordLength_1_1_out1_12 = (alphabitget_w_w_WordLength_1_out1_11 == 1'b0 ? Delay22_out1 :
              if_bitget_w_w_WordLength_0_1_out1_11);



  always @(posedge clk or posedge reset)
    begin : Delay20_process
      if (reset == 1'b1) begin
        Delay20_out1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay20_out1 <= if_bitget_w_w_WordLength_1_1_out1_12;
        end
      end
    end



  assign bitsrl_y_int32_2_out1_12 = Delay20_out1 >> 8'd14;



  assign y_tmp1_out1_24 = Delay20_out1 - bitsrl_y_int32_2_out1_12;



  assign y_tmp1_out1_25 = Delay20_out1 + bitsrl_y_int32_2_out1_12;



  assign if_bitget_w_w_WordLength_0_1_out1_12 = (BitSlice1_out1_14 == 1'b0 ? y_tmp1_out1_24 :
              y_tmp1_out1_25);



  assign if_bitget_w_w_WordLength_1_1_out1_13 = (alphabitget_w_w_WordLength_1_out1_12 == 1'b0 ? Delay20_out1 :
              if_bitget_w_w_WordLength_0_1_out1_12);



  assign alpha1_out1_1 = 2'b00;



  assign Bit_Concat1_out1 = {alpha1_out1_1, if_bitget_tmp2_tmp2_WordLength_1_out1};



  assign reinterpretcast_bitconcat_fi_0_1_out1 = Bit_Concat1_out1;



  always @(posedge clk or posedge reset)
    begin : Delay9_2_process
      if (reset == 1'b1) begin
        Delay9_out1_2 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1_2 <= reinterpretcast_bitconcat_fi_0_1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay40_process
      if (reset == 1'b1) begin
        Delay40_out1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay40_out1 <= Delay9_out1_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay44_process
      if (reset == 1'b1) begin
        Delay44_reg[0] <= 36'sh000000000;
        Delay44_reg[1] <= 36'sh000000000;
        Delay44_reg[2] <= 36'sh000000000;
        Delay44_reg[3] <= 36'sh000000000;
        Delay44_reg[4] <= 36'sh000000000;
        Delay44_reg[5] <= 36'sh000000000;
        Delay44_reg[6] <= 36'sh000000000;
        Delay44_reg[7] <= 36'sh000000000;
        Delay44_reg[8] <= 36'sh000000000;
        Delay44_reg[9] <= 36'sh000000000;
        Delay44_reg[10] <= 36'sh000000000;
        Delay44_reg[11] <= 36'sh000000000;
        Delay44_reg[12] <= 36'sh000000000;
        Delay44_reg[13] <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay44_reg[0] <= Delay44_reg_next[0];
          Delay44_reg[1] <= Delay44_reg_next[1];
          Delay44_reg[2] <= Delay44_reg_next[2];
          Delay44_reg[3] <= Delay44_reg_next[3];
          Delay44_reg[4] <= Delay44_reg_next[4];
          Delay44_reg[5] <= Delay44_reg_next[5];
          Delay44_reg[6] <= Delay44_reg_next[6];
          Delay44_reg[7] <= Delay44_reg_next[7];
          Delay44_reg[8] <= Delay44_reg_next[8];
          Delay44_reg[9] <= Delay44_reg_next[9];
          Delay44_reg[10] <= Delay44_reg_next[10];
          Delay44_reg[11] <= Delay44_reg_next[11];
          Delay44_reg[12] <= Delay44_reg_next[12];
          Delay44_reg[13] <= Delay44_reg_next[13];
        end
      end
    end

  assign Delay44_out1 = Delay44_reg[13];
  assign Delay44_reg_next[0] = Delay40_out1;
  assign Delay44_reg_next[1] = Delay44_reg[0];
  assign Delay44_reg_next[2] = Delay44_reg[1];
  assign Delay44_reg_next[3] = Delay44_reg[2];
  assign Delay44_reg_next[4] = Delay44_reg[3];
  assign Delay44_reg_next[5] = Delay44_reg[4];
  assign Delay44_reg_next[6] = Delay44_reg[5];
  assign Delay44_reg_next[7] = Delay44_reg[6];
  assign Delay44_reg_next[8] = Delay44_reg[7];
  assign Delay44_reg_next[9] = Delay44_reg[8];
  assign Delay44_reg_next[10] = Delay44_reg[9];
  assign Delay44_reg_next[11] = Delay44_reg[10];
  assign Delay44_reg_next[12] = Delay44_reg[11];
  assign Delay44_reg_next[13] = Delay44_reg[12];



  assign Switch1_out1_1 = (Delay46_out1 == 1'b0 ? if_bitget_w_w_WordLength_1_1_out1_13 :
              Delay44_out1);



  always @(posedge clk or posedge reset)
    begin : Delay1_6_process
      if (reset == 1'b1) begin
        Delay1_reg_1[0] <= 36'sh000000000;
        Delay1_reg_1[1] <= 36'sh000000000;
        Delay1_reg_1[2] <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay1_reg_1[0] <= Delay1_reg_next_1[0];
          Delay1_reg_1[1] <= Delay1_reg_next_1[1];
          Delay1_reg_1[2] <= Delay1_reg_next_1[2];
        end
      end
    end

  assign Delay1_out1_7 = Delay1_reg_1[2];
  assign Delay1_reg_next_1[0] = Switch1_out1_1;
  assign Delay1_reg_next_1[1] = Delay1_reg_1[0];
  assign Delay1_reg_next_1[2] = Delay1_reg_1[1];



  assign Unary_Minus_cast = {Delay1_out1_7[35], Delay1_out1_7};
  assign Unary_Minus_cast_1 =  - (Unary_Minus_cast);
  assign Unary_Minus_out1 = Unary_Minus_cast_1[35:0];



  assign Bit_Slice2_out1 = Delay1_out1_7[34:15];



  assign Data_Type_Conversion1_out1 = Bit_Slice2_out1;



  assign Bit_Slice_out1 = Delay21_out1[33:11];



  assign Data_Type_Conversion_out1_2 = Bit_Slice_out1;



  assign Log2Table_int32_14_out1 = 23'sb10100011101010111001110;



  assign Log2MinusTable_int32_14_out1 = 23'sb01011100010101011101011;



  assign if_bitget_w_w_WordLength_0_out1_12 = (BitSlice_out1_16 == 1'b0 ? Log2Table_int32_14_out1 :
              Log2MinusTable_int32_14_out1);



  assign w_Log2MinusTable_int32_2_out1_11 = Data_Type_Conversion_out1_2 + if_bitget_w_w_WordLength_0_out1_12;



  assign if_bitget_w_w_WordLength_1_out1_13 = (alphabitget_w_w_WordLength_1_out1_12 == 1'b0 ? Data_Type_Conversion_out1_2 :
              w_Log2MinusTable_int32_2_out1_11);



  assign Constant5_out1 = 1'b0;



  assign Bit_Slice3_out1 = Delay50_out1[23:2];



  assign Bit_Concat3_out1_1 = {Constant5_out1, Bit_Slice3_out1};



  assign Data_Type_Conversion3_out1 = Bit_Concat3_out1_1;



  assign Switch4_out1_1 = (Delay46_out1 == 1'b0 ? if_bitget_w_w_WordLength_1_out1_13 :
              Data_Type_Conversion3_out1);



  always @(posedge clk or posedge reset)
    begin : Delay22_1_process
      if (reset == 1'b1) begin
        Delay22_out1_1 <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay22_out1_1 <= Switch4_out1_1;
        end
      end
    end



  assign alpha0_693147182464600_out1 = 20'sb11010011101000111000;



  assign alpha0_33333_out1 = 20'sb11101010101010101011;



  assign Switch3_out1 = (Delay46_out1 == 1'b0 ? alpha0_693147182464600_out1 :
              alpha0_33333_out1);



  always @(posedge clk or posedge reset)
    begin : Delay4_3_process
      if (reset == 1'b1) begin
        Delay4_out1_3 <= 20'sb00000000000000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_3 <= Switch3_out1;
        end
      end
    end



  assign tmp1_0_69314717873930931_mul_temp = Delay22_out1_1 * Delay4_out1_3;
  assign tmp1_0_69314717873930931_out1 = tmp1_0_69314717873930931_mul_temp[40:18];



  always @(posedge clk or posedge reset)
    begin : Delay_4_process
      if (reset == 1'b1) begin
        Delay_reg_1[0] <= 23'sb00000000000000000000000;
        Delay_reg_1[1] <= 23'sb00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay_reg_1[0] <= Delay_reg_next_1[0];
          Delay_reg_1[1] <= Delay_reg_next_1[1];
        end
      end
    end

  assign Delay_out1_4 = Delay_reg_1[1];
  assign Delay_reg_next_1[0] = tmp1_0_69314717873930931_out1;
  assign Delay_reg_next_1[1] = Delay_reg_1[0];



  assign tmp2_y_mul_temp = Data_Type_Conversion1_out1 * Delay_out1_4;
  assign tmp2_y_out1 = tmp2_y_mul_temp[40:20];



  always @(posedge clk or posedge reset)
    begin : Delay3_6_process
      if (reset == 1'b1) begin
        Delay3_reg[0] <= 21'sb000000000000000000000;
        Delay3_reg[1] <= 21'sb000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay3_reg[0] <= Delay3_reg_next[0];
          Delay3_reg[1] <= Delay3_reg_next[1];
        end
      end
    end

  assign Delay3_out1_6 = Delay3_reg[1];
  assign Delay3_reg_next[0] = tmp2_y_out1;
  assign Delay3_reg_next[1] = Delay3_reg[0];



  assign Bit_Slice1_out1 = Delay3_out1_6[20];



  assign Constant1_out1_1 = 15'sb000000000000000;



  assign Constant_out1_9 = 15'sb111111111111111;



  assign Switch_out1_1 = (Bit_Slice1_out1 == 1'b0 ? Constant1_out1_1 :
              Constant_out1_9);



  always @(posedge clk or posedge reset)
    begin : Delay2_3_process
      if (reset == 1'b1) begin
        Delay2_reg[0] <= 36'sh000000000;
        Delay2_reg[1] <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay2_reg[0] <= Delay2_reg_next[0];
          Delay2_reg[1] <= Delay2_reg_next[1];
        end
      end
    end

  assign Delay2_out1_3 = Delay2_reg[1];
  assign Delay2_reg_next[0] = Unary_Minus_out1;
  assign Delay2_reg_next[1] = Delay2_reg[0];



  assign Bit_Concat_out1_11 = {Switch_out1_1, Delay3_out1_6};



  assign DTC2_out1_1 = Bit_Concat_out1_11;



  assign y_tmp3_out1 = Delay2_out1_3 + DTC2_out1_1;



  always @(posedge clk or posedge reset)
    begin : Delay39_process
      if (reset == 1'b1) begin
        Delay39_out1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay39_out1 <= y_tmp3_out1;
        end
      end
    end



  assign Bit_Slice4_out1 = Delay3_out1_6[20];



  assign Constant2_out1 = 14'b00000000000000;



  assign Bit_Concat1_out1_1 = {Bit_Slice4_out1, Delay3_out1_6, Constant2_out1};



  assign DTC1_out1_8 = Bit_Concat1_out1_1;



  always @(posedge clk or posedge reset)
    begin : Delay9_3_process
      if (reset == 1'b1) begin
        Delay9_out1_3 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1_3 <= DTC1_out1_8;
        end
      end
    end



  assign Switch2_out1 = (Delay8_out1_1 == 1'b0 ? Delay39_out1 :
              Delay9_out1_3);



  assign alpha1_out1_2 = 2'b00;



  assign BitSlice2_out1_1 = Delay3_out1_4[38:33];



  assign Bit_Concat1_out1_2 = {alpha1_out1_2, BitSlice2_out1_1};



  assign alpha127_1_out1 = 8'b00000001;



  assign alpha127_exp_tmp_out1 = Bit_Concat1_out1_2 + alpha127_1_out1;



  assign if_sticky_4_out1 = (Logical_Operator_out1_2 == 1'b0 ? Bit_Concat1_out1_2 :
              alpha127_exp_tmp_out1);



  always @(posedge clk or posedge reset)
    begin : Delay1_7_process
      if (reset == 1'b1) begin
        Delay1_out1_8 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_8 <= cast_cfType_ExponentBias_lik_out1_2;
        end
      end
    end



  assign cast_cfType_ExponentBias_lik_1_out1 = 8'b10000000;



  assign cast_cfType_ExponentBias_lik_1_out1_1 = cast_cfType_ExponentBias_lik_1_out1 - Delay1_out1_4;



  always @(posedge clk or posedge reset)
    begin : Delay7_2_process
      if (reset == 1'b1) begin
        Delay7_out1_2 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay7_out1_2 <= cast_cfType_ExponentBias_lik_1_out1_1;
        end
      end
    end



  assign cast_cfType_ExponentBias_lik_2_out1 = Delay1_out1_8 + Delay7_out1_2;



  always @(posedge clk or posedge reset)
    begin : Delay30_process
      if (reset == 1'b1) begin
        Delay30_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay30_out1 <= cast_cfType_ExponentBias_lik_2_out1;
        end
      end
    end



  assign if_sticky_2_out1 = (Delay31_out1 == 1'b0 ? if_sticky_4_out1 :
              Delay30_out1);



  always @(posedge clk or posedge reset)
    begin : Delay32_process
      if (reset == 1'b1) begin
        Delay32_reg[0] <= 8'b00000000;
        Delay32_reg[1] <= 8'b00000000;
        Delay32_reg[2] <= 8'b00000000;
        Delay32_reg[3] <= 8'b00000000;
        Delay32_reg[4] <= 8'b00000000;
        Delay32_reg[5] <= 8'b00000000;
        Delay32_reg[6] <= 8'b00000000;
        Delay32_reg[7] <= 8'b00000000;
        Delay32_reg[8] <= 8'b00000000;
        Delay32_reg[9] <= 8'b00000000;
        Delay32_reg[10] <= 8'b00000000;
        Delay32_reg[11] <= 8'b00000000;
        Delay32_reg[12] <= 8'b00000000;
        Delay32_reg[13] <= 8'b00000000;
        Delay32_reg[14] <= 8'b00000000;
        Delay32_reg[15] <= 8'b00000000;
        Delay32_reg[16] <= 8'b00000000;
        Delay32_reg[17] <= 8'b00000000;
        Delay32_reg[18] <= 8'b00000000;
        Delay32_reg[19] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay32_reg[0] <= Delay32_reg_next[0];
          Delay32_reg[1] <= Delay32_reg_next[1];
          Delay32_reg[2] <= Delay32_reg_next[2];
          Delay32_reg[3] <= Delay32_reg_next[3];
          Delay32_reg[4] <= Delay32_reg_next[4];
          Delay32_reg[5] <= Delay32_reg_next[5];
          Delay32_reg[6] <= Delay32_reg_next[6];
          Delay32_reg[7] <= Delay32_reg_next[7];
          Delay32_reg[8] <= Delay32_reg_next[8];
          Delay32_reg[9] <= Delay32_reg_next[9];
          Delay32_reg[10] <= Delay32_reg_next[10];
          Delay32_reg[11] <= Delay32_reg_next[11];
          Delay32_reg[12] <= Delay32_reg_next[12];
          Delay32_reg[13] <= Delay32_reg_next[13];
          Delay32_reg[14] <= Delay32_reg_next[14];
          Delay32_reg[15] <= Delay32_reg_next[15];
          Delay32_reg[16] <= Delay32_reg_next[16];
          Delay32_reg[17] <= Delay32_reg_next[17];
          Delay32_reg[18] <= Delay32_reg_next[18];
          Delay32_reg[19] <= Delay32_reg_next[19];
        end
      end
    end

  assign Delay32_out1 = Delay32_reg[19];
  assign Delay32_reg_next[0] = if_sticky_2_out1;
  assign Delay32_reg_next[1] = Delay32_reg[0];
  assign Delay32_reg_next[2] = Delay32_reg[1];
  assign Delay32_reg_next[3] = Delay32_reg[2];
  assign Delay32_reg_next[4] = Delay32_reg[3];
  assign Delay32_reg_next[5] = Delay32_reg[4];
  assign Delay32_reg_next[6] = Delay32_reg[5];
  assign Delay32_reg_next[7] = Delay32_reg[6];
  assign Delay32_reg_next[8] = Delay32_reg[7];
  assign Delay32_reg_next[9] = Delay32_reg[8];
  assign Delay32_reg_next[10] = Delay32_reg[9];
  assign Delay32_reg_next[11] = Delay32_reg[10];
  assign Delay32_reg_next[12] = Delay32_reg[11];
  assign Delay32_reg_next[13] = Delay32_reg[12];
  assign Delay32_reg_next[14] = Delay32_reg[13];
  assign Delay32_reg_next[15] = Delay32_reg[14];
  assign Delay32_reg_next[16] = Delay32_reg[15];
  assign Delay32_reg_next[17] = Delay32_reg[16];
  assign Delay32_reg_next[18] = Delay32_reg[17];
  assign Delay32_reg_next[19] = Delay32_reg[18];



  assign Shift_Arithmetic_out1_1 = Switch2_out1 >>> Delay32_out1;



  always @(posedge clk or posedge reset)
    begin : Delay_5_process
      if (reset == 1'b1) begin
        Delay_out1_5 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay_out1_5 <= Shift_Arithmetic_out1_1;
        end
      end
    end



  assign Add_out1_1 = Delay1_out1_2 + Delay_out1_5;



  always @(posedge clk or posedge reset)
    begin : Delay5_2_process
      if (reset == 1'b1) begin
        Delay5_out1_2 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1_2 <= Add_out1_1;
        end
      end
    end



  assign Bit_Slice_out1_1 = Delay5_out1_2[34];



  assign Bit_Slice1_out1_1 = Delay5_out1_2[33:27];



  assign Bit_Slice7_out1 = Bit_Slice1_out1_1[6];



  assign Bit_Slice6_out1 = Bit_Slice1_out1_1[5];



  assign Logical_Operator3_out1 = Bit_Slice7_out1 | Bit_Slice6_out1;



  assign Bit_Slice5_out1 = Bit_Slice1_out1_1[4];



  assign Bit_Slice3_out1_1 = Bit_Slice1_out1_1[3];



  assign Logical_Operator_out1_3 = Bit_Slice5_out1 | Bit_Slice3_out1_1;



  assign Bit_Slice2_out1_1 = Bit_Slice1_out1_1[2];



  assign Bit_Slice1_out1_2 = Bit_Slice1_out1_1[1];



  assign Bit_Slice_out1_2 = Bit_Slice1_out1_1[0];



  assign Start_out1 = 8'sb00000111;



  assign Logical_Operator4_out1 = Bit_Slice2_out1_1 | Bit_Slice1_out1_2;



  assign Start_1_out1 = 8'sb00000110;



  assign Switch_out1_2 = (Bit_Slice_out1_2 == 1'b0 ? Start_out1 :
              Start_1_out1);



  assign Start_2_out1 = 8'sb00000101;



  assign Start_3_out1 = 8'sb00000100;



  assign Logical_Operator1_out1 = Logical_Operator3_out1 | Logical_Operator_out1_3;



  assign Switch2_out1_1 = (Bit_Slice2_out1_1 == 1'b0 ? Start_2_out1 :
              Start_3_out1);



  assign Switch1_out1_2 = (Logical_Operator4_out1 == 1'b0 ? Switch_out1_2 :
              Switch2_out1_1);



  assign Start_4_out1 = 8'sb00000011;



  assign Start_5_out1 = 8'sb00000010;



  assign Switch5_out1 = (Bit_Slice5_out1 == 1'b0 ? Start_4_out1 :
              Start_5_out1);



  assign Start_6_out1 = 8'sb00000001;



  assign Start_7_out1 = 8'sb00000000;



  assign Switch7_out1 = (Bit_Slice7_out1 == 1'b0 ? Start_6_out1 :
              Start_7_out1);



  assign Switch6_out1 = (Logical_Operator3_out1 == 1'b0 ? Switch5_out1 :
              Switch7_out1);



  assign Switch4_out1_2 = (Logical_Operator1_out1 == 1'b0 ? Switch1_out1_2 :
              Switch6_out1);



  assign DTC_out1 = Switch4_out1_2;



  assign Shift_Arithmetic1_out1 = Delay5_out1_2 <<< DTC_out1;



  assign Bit_Shift_out1_1 = Delay5_out1_2 >>> 8'd1;



  assign Switch_out1_3 = (Bit_Slice_out1_1 == 1'b0 ? Shift_Arithmetic1_out1 :
              Bit_Shift_out1_1);



  always @(posedge clk or posedge reset)
    begin : Delay14_1_process
      if (reset == 1'b1) begin
        Delay14_out1_1 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1_1 <= Switch_out1_3;
        end
      end
    end



  assign Bit_Slice1_out1_3 = Delay14_out1_1[35];



  assign Bit_Concat_out1_12 = {Bit_Slice1_out1_3, Delay14_out1_1};



  assign Data_Type_Conversion_out1_3 = Bit_Concat_out1_12;



  assign Constant2_out1_1 = 36'shE00000000;



  assign Add1_out1 = Delay_out1_5 + Constant2_out1_1;



  always @(posedge clk or posedge reset)
    begin : Delay6_4_process
      if (reset == 1'b1) begin
        Delay6_out1_4 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1_4 <= Add1_out1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay8_4_process
      if (reset == 1'b1) begin
        Delay8_out1_4 <= 36'sh000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1_4 <= Delay6_out1_4;
        end
      end
    end



  assign Bit_Slice2_out1_2 = Delay8_out1_4[35];



  assign Bit_Concat1_out1_3 = {Bit_Slice2_out1_2, Delay8_out1_4};



  assign Data_Type_Conversion1_out1_1 = Bit_Concat1_out1_3;



  assign R_mant_b_norm_out1 = Data_Type_Conversion_out1_3 + Data_Type_Conversion1_out1_1;



  assign Bit_Slice_out1_3 = R_mant_b_norm_out1[36];



  assign Bit_Shift_out1_2 = Data_Type_Conversion_out1_3 <<< 8'd1;



  assign R_mant_b_norm1_out1 = Bit_Shift_out1_2 + Data_Type_Conversion1_out1_1;



  assign Switch_out1_4 = (Bit_Slice_out1_3 == 1'b0 ? R_mant_b_norm_out1 :
              R_mant_b_norm1_out1);



  always @(posedge clk or posedge reset)
    begin : Delay1_8_process
      if (reset == 1'b1) begin
        Delay1_out1_9 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_9 <= Switch_out1_4;
        end
      end
    end



  assign Bit_Shift2_out1 = Delay1_out1_9 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay2_4_process
      if (reset == 1'b1) begin
        Delay2_out1_4 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_4 <= Data_Type_Conversion1_out1_1;
        end
      end
    end



  assign Add1_out1_1 = Bit_Shift2_out1 + Delay2_out1_4;



  assign Bit_Slice1_out1_4 = Add1_out1_1[36];



  assign Bit_Shift1_out1 = Delay1_out1_9 <<< 8'd2;



  assign Add_out1_2 = Bit_Shift1_out1 + Delay2_out1_4;



  assign Bit_Slice_out1_4 = Add_out1_2[36];



  assign Logical_Operator1_out1_1 =  ~ Bit_Slice_out1_4;



  assign Logical_Operator4_out1_1 = Logical_Operator1_out1_1 & Bit_Slice1_out1_4;



  assign Bit_Shift_out1_3 = Data_Type_Conversion1_out1_1 <<< 8'd1;



  assign Add_out1_3 = Bit_Shift_out1_3 + Data_Type_Conversion1_out1_1;



  always @(posedge clk or posedge reset)
    begin : Delay4_4_process
      if (reset == 1'b1) begin
        Delay4_out1_4 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_4 <= Add_out1_3;
        end
      end
    end



  assign Add2_out1 = Bit_Shift1_out1 + Delay4_out1_4;



  assign Bit_Slice2_out1_3 = Add2_out1[36];



  assign Logical_Operator_out1_4 =  ~ Bit_Slice1_out1_4;



  assign Logical_Operator2_out1 =  ~ Bit_Slice2_out1_3;



  assign Logical_Operator3_out1_1 = Logical_Operator4_out1_1 | Logical_Operator2_out1;



  assign Bit_Concat_out1_13 = {Delay3_out1_2, Logical_Operator_out1_4, Logical_Operator3_out1_1};



  always @(posedge clk or posedge reset)
    begin : Delay5_3_process
      if (reset == 1'b1) begin
        Delay5_out1_3 <= 3'b000;
      end
      else begin
        if (enb) begin
          Delay5_out1_3 <= Bit_Concat_out1_13;
        end
      end
    end



  assign Bit_Shift3_out1 = Add1_out1_1 <<< 8'd1;



  assign Switch1_out1_3 = (Bit_Slice2_out1_3 == 1'b0 ? Add2_out1 :
              Bit_Shift3_out1);



  assign Switch_out1_5 = (Bit_Slice_out1_4 == 1'b0 ? Add_out1_2 :
              Bit_Shift1_out1);



  assign Switch2_out1_2 = (Bit_Slice1_out1_4 == 1'b0 ? Switch1_out1_3 :
              Switch_out1_5);



  always @(posedge clk or posedge reset)
    begin : Delay6_5_process
      if (reset == 1'b1) begin
        Delay6_out1_5 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1_5 <= Switch2_out1_2;
        end
      end
    end



  assign Bit_Shift2_out1_1 = Delay6_out1_5 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay7_3_process
      if (reset == 1'b1) begin
        Delay7_out1_3 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1_3 <= Delay2_out1_4;
        end
      end
    end



  assign Add1_out1_2 = Bit_Shift2_out1_1 + Delay7_out1_3;



  assign Bit_Slice1_out1_5 = Add1_out1_2[36];



  assign Bit_Shift1_out1_1 = Delay6_out1_5 <<< 8'd2;



  assign Add_out1_4 = Bit_Shift1_out1_1 + Delay7_out1_3;



  assign Bit_Slice_out1_5 = Add_out1_4[36];



  assign Logical_Operator1_out1_2 =  ~ Bit_Slice_out1_5;



  assign Logical_Operator4_out1_2 = Logical_Operator1_out1_2 & Bit_Slice1_out1_5;



  always @(posedge clk or posedge reset)
    begin : Delay9_4_process
      if (reset == 1'b1) begin
        Delay9_out1_4 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1_4 <= Delay4_out1_4;
        end
      end
    end



  assign Add2_out1_1 = Bit_Shift1_out1_1 + Delay9_out1_4;



  assign Bit_Slice2_out1_4 = Add2_out1_1[36];



  assign Logical_Operator_out1_5 =  ~ Bit_Slice1_out1_5;



  assign Logical_Operator2_out1_1 =  ~ Bit_Slice2_out1_4;



  assign Logical_Operator3_out1_2 = Logical_Operator4_out1_2 | Logical_Operator2_out1_1;



  assign Bit_Concat_out1_14 = {Delay5_out1_3, {Logical_Operator_out1_5, Logical_Operator3_out1_2}};



  always @(posedge clk or posedge reset)
    begin : Delay10_2_process
      if (reset == 1'b1) begin
        Delay10_out1_2 <= 5'b00000;
      end
      else begin
        if (enb) begin
          Delay10_out1_2 <= Bit_Concat_out1_14;
        end
      end
    end



  assign Bit_Shift3_out1_1 = Add1_out1_2 <<< 8'd1;



  assign Switch1_out1_4 = (Bit_Slice2_out1_4 == 1'b0 ? Add2_out1_1 :
              Bit_Shift3_out1_1);



  assign Switch_out1_6 = (Bit_Slice_out1_5 == 1'b0 ? Add_out1_4 :
              Bit_Shift1_out1_1);



  assign Switch2_out1_3 = (Bit_Slice1_out1_5 == 1'b0 ? Switch1_out1_4 :
              Switch_out1_6);



  always @(posedge clk or posedge reset)
    begin : Delay11_2_process
      if (reset == 1'b1) begin
        Delay11_out1_2 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay11_out1_2 <= Switch2_out1_3;
        end
      end
    end



  assign Bit_Shift2_out1_2 = Delay11_out1_2 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay12_2_process
      if (reset == 1'b1) begin
        Delay12_out1_2 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay12_out1_2 <= Delay7_out1_3;
        end
      end
    end



  assign Add1_out1_3 = Bit_Shift2_out1_2 + Delay12_out1_2;



  assign Bit_Slice1_out1_6 = Add1_out1_3[36];



  assign Bit_Shift1_out1_2 = Delay11_out1_2 <<< 8'd2;



  assign Add_out1_5 = Bit_Shift1_out1_2 + Delay12_out1_2;



  assign Bit_Slice_out1_6 = Add_out1_5[36];



  assign Logical_Operator1_out1_3 =  ~ Bit_Slice_out1_6;



  assign Logical_Operator4_out1_3 = Logical_Operator1_out1_3 & Bit_Slice1_out1_6;



  always @(posedge clk or posedge reset)
    begin : Delay14_2_process
      if (reset == 1'b1) begin
        Delay14_out1_2 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1_2 <= Delay9_out1_4;
        end
      end
    end



  assign Add2_out1_2 = Bit_Shift1_out1_2 + Delay14_out1_2;



  assign Bit_Slice2_out1_5 = Add2_out1_2[36];



  assign Logical_Operator_out1_6 =  ~ Bit_Slice1_out1_6;



  assign Logical_Operator2_out1_2 =  ~ Bit_Slice2_out1_5;



  assign Logical_Operator3_out1_3 = Logical_Operator4_out1_3 | Logical_Operator2_out1_2;



  assign Bit_Concat_out1_15 = {Delay10_out1_2, {Logical_Operator_out1_6, Logical_Operator3_out1_3}};



  always @(posedge clk or posedge reset)
    begin : Delay5_4_process
      if (reset == 1'b1) begin
        Delay5_out1_4 <= 7'b0000000;
      end
      else begin
        if (enb) begin
          Delay5_out1_4 <= Bit_Concat_out1_15;
        end
      end
    end



  assign Bit_Shift3_out1_2 = Add1_out1_3 <<< 8'd1;



  assign Switch1_out1_5 = (Bit_Slice2_out1_5 == 1'b0 ? Add2_out1_2 :
              Bit_Shift3_out1_2);



  assign Switch_out1_7 = (Bit_Slice_out1_6 == 1'b0 ? Add_out1_5 :
              Bit_Shift1_out1_2);



  assign Switch2_out1_4 = (Bit_Slice1_out1_6 == 1'b0 ? Switch1_out1_5 :
              Switch_out1_7);



  always @(posedge clk or posedge reset)
    begin : Delay6_6_process
      if (reset == 1'b1) begin
        Delay6_out1_6 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay6_out1_6 <= Switch2_out1_4;
        end
      end
    end



  assign Bit_Shift2_out1_3 = Delay6_out1_6 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay7_4_process
      if (reset == 1'b1) begin
        Delay7_out1_4 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay7_out1_4 <= Delay12_out1_2;
        end
      end
    end



  assign Add1_out1_4 = Bit_Shift2_out1_3 + Delay7_out1_4;



  assign Bit_Slice1_out1_7 = Add1_out1_4[36];



  assign Bit_Shift1_out1_3 = Delay6_out1_6 <<< 8'd2;



  assign Add_out1_6 = Bit_Shift1_out1_3 + Delay7_out1_4;



  assign Bit_Slice_out1_7 = Add_out1_6[36];



  assign Logical_Operator1_out1_4 =  ~ Bit_Slice_out1_7;



  assign Logical_Operator4_out1_4 = Logical_Operator1_out1_4 & Bit_Slice1_out1_7;



  always @(posedge clk or posedge reset)
    begin : Delay9_5_process
      if (reset == 1'b1) begin
        Delay9_out1_5 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay9_out1_5 <= Delay14_out1_2;
        end
      end
    end



  assign Add2_out1_3 = Bit_Shift1_out1_3 + Delay9_out1_5;



  assign Bit_Slice2_out1_6 = Add2_out1_3[36];



  assign Logical_Operator_out1_7 =  ~ Bit_Slice1_out1_7;



  assign Logical_Operator2_out1_3 =  ~ Bit_Slice2_out1_6;



  assign Logical_Operator3_out1_4 = Logical_Operator4_out1_4 | Logical_Operator2_out1_3;



  assign Bit_Concat_out1_16 = {Delay5_out1_4, {Logical_Operator_out1_7, Logical_Operator3_out1_4}};



  always @(posedge clk or posedge reset)
    begin : Delay5_5_process
      if (reset == 1'b1) begin
        Delay5_out1_5 <= 9'b000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1_5 <= Bit_Concat_out1_16;
        end
      end
    end



  assign Bit_Shift3_out1_3 = Add1_out1_4 <<< 8'd1;



  assign Switch1_out1_6 = (Bit_Slice2_out1_6 == 1'b0 ? Add2_out1_3 :
              Bit_Shift3_out1_3);



  assign Switch_out1_8 = (Bit_Slice_out1_7 == 1'b0 ? Add_out1_6 :
              Bit_Shift1_out1_3);



  assign Switch2_out1_5 = (Bit_Slice1_out1_7 == 1'b0 ? Switch1_out1_6 :
              Switch_out1_8);



  always @(posedge clk or posedge reset)
    begin : Delay1_9_process
      if (reset == 1'b1) begin
        Delay1_out1_10 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_10 <= Switch2_out1_5;
        end
      end
    end



  assign Bit_Shift2_out1_4 = Delay1_out1_10 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay2_5_process
      if (reset == 1'b1) begin
        Delay2_out1_5 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_5 <= Delay7_out1_4;
        end
      end
    end



  assign Add1_out1_5 = Bit_Shift2_out1_4 + Delay2_out1_5;



  assign Bit_Slice1_out1_8 = Add1_out1_5[36];



  assign Bit_Shift1_out1_4 = Delay1_out1_10 <<< 8'd2;



  assign Add_out1_7 = Bit_Shift1_out1_4 + Delay2_out1_5;



  assign Bit_Slice_out1_8 = Add_out1_7[36];



  assign Logical_Operator1_out1_5 =  ~ Bit_Slice_out1_8;



  assign Logical_Operator4_out1_5 = Logical_Operator1_out1_5 & Bit_Slice1_out1_8;



  always @(posedge clk or posedge reset)
    begin : Delay4_5_process
      if (reset == 1'b1) begin
        Delay4_out1_5 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_5 <= Delay9_out1_5;
        end
      end
    end



  assign Add2_out1_4 = Bit_Shift1_out1_4 + Delay4_out1_5;



  assign Bit_Slice2_out1_7 = Add2_out1_4[36];



  assign Logical_Operator_out1_8 =  ~ Bit_Slice1_out1_8;



  assign Logical_Operator2_out1_4 =  ~ Bit_Slice2_out1_7;



  assign Logical_Operator3_out1_5 = Logical_Operator4_out1_5 | Logical_Operator2_out1_4;



  assign Bit_Concat_out1_17 = {Delay5_out1_5, {Logical_Operator_out1_8, Logical_Operator3_out1_5}};



  always @(posedge clk or posedge reset)
    begin : Delay10_3_process
      if (reset == 1'b1) begin
        Delay10_out1_3 <= 11'b00000000000;
      end
      else begin
        if (enb) begin
          Delay10_out1_3 <= Bit_Concat_out1_17;
        end
      end
    end



  assign Bit_Shift3_out1_4 = Add1_out1_5 <<< 8'd1;



  assign Switch1_out1_7 = (Bit_Slice2_out1_7 == 1'b0 ? Add2_out1_4 :
              Bit_Shift3_out1_4);



  assign Switch_out1_9 = (Bit_Slice_out1_8 == 1'b0 ? Add_out1_7 :
              Bit_Shift1_out1_4);



  assign Switch2_out1_6 = (Bit_Slice1_out1_8 == 1'b0 ? Switch1_out1_7 :
              Switch_out1_9);



  always @(posedge clk or posedge reset)
    begin : Delay11_3_process
      if (reset == 1'b1) begin
        Delay11_out1_3 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay11_out1_3 <= Switch2_out1_6;
        end
      end
    end



  assign Bit_Shift2_out1_5 = Delay11_out1_3 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay12_3_process
      if (reset == 1'b1) begin
        Delay12_out1_3 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay12_out1_3 <= Delay2_out1_5;
        end
      end
    end



  assign Add1_out1_6 = Bit_Shift2_out1_5 + Delay12_out1_3;



  assign Bit_Slice1_out1_9 = Add1_out1_6[36];



  assign Bit_Shift1_out1_5 = Delay11_out1_3 <<< 8'd2;



  assign Add_out1_8 = Bit_Shift1_out1_5 + Delay12_out1_3;



  assign Bit_Slice_out1_9 = Add_out1_8[36];



  assign Logical_Operator1_out1_6 =  ~ Bit_Slice_out1_9;



  assign Logical_Operator4_out1_6 = Logical_Operator1_out1_6 & Bit_Slice1_out1_9;



  always @(posedge clk or posedge reset)
    begin : Delay14_3_process
      if (reset == 1'b1) begin
        Delay14_out1_3 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1_3 <= Delay4_out1_5;
        end
      end
    end



  assign Add2_out1_5 = Bit_Shift1_out1_5 + Delay14_out1_3;



  assign Bit_Slice2_out1_8 = Add2_out1_5[36];



  assign Logical_Operator_out1_9 =  ~ Bit_Slice1_out1_9;



  assign Logical_Operator2_out1_5 =  ~ Bit_Slice2_out1_8;



  assign Logical_Operator3_out1_6 = Logical_Operator4_out1_6 | Logical_Operator2_out1_5;



  assign Bit_Concat_out1_18 = {Delay10_out1_3, {Logical_Operator_out1_9, Logical_Operator3_out1_6}};



  always @(posedge clk or posedge reset)
    begin : Delay1_10_process
      if (reset == 1'b1) begin
        Delay1_out1_11 <= 13'b0000000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_11 <= Bit_Concat_out1_18;
        end
      end
    end



  assign Bit_Shift3_out1_5 = Add1_out1_6 <<< 8'd1;



  assign Switch1_out1_8 = (Bit_Slice2_out1_8 == 1'b0 ? Add2_out1_5 :
              Bit_Shift3_out1_5);



  assign Switch_out1_10 = (Bit_Slice_out1_9 == 1'b0 ? Add_out1_8 :
              Bit_Shift1_out1_5);



  assign Switch2_out1_7 = (Bit_Slice1_out1_9 == 1'b0 ? Switch1_out1_8 :
              Switch_out1_10);



  always @(posedge clk or posedge reset)
    begin : Delay2_6_process
      if (reset == 1'b1) begin
        Delay2_out1_6 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_6 <= Switch2_out1_7;
        end
      end
    end



  assign Bit_Shift2_out1_6 = Delay2_out1_6 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay3_7_process
      if (reset == 1'b1) begin
        Delay3_out1_7 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay3_out1_7 <= Delay12_out1_3;
        end
      end
    end



  assign Add1_out1_7 = Bit_Shift2_out1_6 + Delay3_out1_7;



  assign Bit_Slice1_out1_10 = Add1_out1_7[36];



  assign Bit_Shift1_out1_6 = Delay2_out1_6 <<< 8'd2;



  assign Add_out1_9 = Bit_Shift1_out1_6 + Delay3_out1_7;



  assign Bit_Slice_out1_10 = Add_out1_9[36];



  assign Logical_Operator1_out1_7 =  ~ Bit_Slice_out1_10;



  assign Logical_Operator4_out1_7 = Logical_Operator1_out1_7 & Bit_Slice1_out1_10;



  always @(posedge clk or posedge reset)
    begin : Delay10_4_process
      if (reset == 1'b1) begin
        Delay10_out1_4 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay10_out1_4 <= Delay14_out1_3;
        end
      end
    end



  assign Add2_out1_6 = Bit_Shift1_out1_6 + Delay10_out1_4;



  assign Bit_Slice2_out1_9 = Add2_out1_6[36];



  assign Logical_Operator_out1_10 =  ~ Bit_Slice1_out1_10;



  assign Logical_Operator2_out1_6 =  ~ Bit_Slice2_out1_9;



  assign Logical_Operator3_out1_7 = Logical_Operator4_out1_7 | Logical_Operator2_out1_6;



  assign Bit_Concat_out1_19 = {Delay1_out1_11, {Logical_Operator_out1_10, Logical_Operator3_out1_7}};



  always @(posedge clk or posedge reset)
    begin : Delay5_6_process
      if (reset == 1'b1) begin
        Delay5_out1_6 <= 15'b000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1_6 <= Bit_Concat_out1_19;
        end
      end
    end



  assign Bit_Shift3_out1_6 = Add1_out1_7 <<< 8'd1;



  assign Switch1_out1_9 = (Bit_Slice2_out1_9 == 1'b0 ? Add2_out1_6 :
              Bit_Shift3_out1_6);



  assign Switch_out1_11 = (Bit_Slice_out1_10 == 1'b0 ? Add_out1_9 :
              Bit_Shift1_out1_6);



  assign Switch2_out1_8 = (Bit_Slice1_out1_10 == 1'b0 ? Switch1_out1_9 :
              Switch_out1_11);



  always @(posedge clk or posedge reset)
    begin : Delay1_11_process
      if (reset == 1'b1) begin
        Delay1_out1_12 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_12 <= Switch2_out1_8;
        end
      end
    end



  assign Bit_Shift2_out1_7 = Delay1_out1_12 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay2_7_process
      if (reset == 1'b1) begin
        Delay2_out1_7 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_7 <= Delay3_out1_7;
        end
      end
    end



  assign Add1_out1_8 = Bit_Shift2_out1_7 + Delay2_out1_7;



  assign Bit_Slice1_out1_11 = Add1_out1_8[36];



  assign Bit_Shift1_out1_7 = Delay1_out1_12 <<< 8'd2;



  assign Add_out1_10 = Bit_Shift1_out1_7 + Delay2_out1_7;



  assign Bit_Slice_out1_11 = Add_out1_10[36];



  assign Logical_Operator1_out1_8 =  ~ Bit_Slice_out1_11;



  assign Logical_Operator4_out1_8 = Logical_Operator1_out1_8 & Bit_Slice1_out1_11;



  always @(posedge clk or posedge reset)
    begin : Delay4_6_process
      if (reset == 1'b1) begin
        Delay4_out1_6 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_6 <= Delay10_out1_4;
        end
      end
    end



  assign Add2_out1_7 = Bit_Shift1_out1_7 + Delay4_out1_6;



  assign Bit_Slice2_out1_10 = Add2_out1_7[36];



  assign Logical_Operator_out1_11 =  ~ Bit_Slice1_out1_11;



  assign Logical_Operator2_out1_7 =  ~ Bit_Slice2_out1_10;



  assign Logical_Operator3_out1_8 = Logical_Operator4_out1_8 | Logical_Operator2_out1_7;



  assign Bit_Concat_out1_20 = {Delay5_out1_6, {Logical_Operator_out1_11, Logical_Operator3_out1_8}};



  always @(posedge clk or posedge reset)
    begin : Delay10_5_process
      if (reset == 1'b1) begin
        Delay10_out1_5 <= 17'b00000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_out1_5 <= Bit_Concat_out1_20;
        end
      end
    end



  assign Bit_Shift3_out1_7 = Add1_out1_8 <<< 8'd1;



  assign Switch1_out1_10 = (Bit_Slice2_out1_10 == 1'b0 ? Add2_out1_7 :
              Bit_Shift3_out1_7);



  assign Switch_out1_12 = (Bit_Slice_out1_11 == 1'b0 ? Add_out1_10 :
              Bit_Shift1_out1_7);



  assign Switch2_out1_9 = (Bit_Slice1_out1_11 == 1'b0 ? Switch1_out1_10 :
              Switch_out1_12);



  always @(posedge clk or posedge reset)
    begin : Delay11_4_process
      if (reset == 1'b1) begin
        Delay11_out1_4 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay11_out1_4 <= Switch2_out1_9;
        end
      end
    end



  assign Bit_Shift2_out1_8 = Delay11_out1_4 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay12_4_process
      if (reset == 1'b1) begin
        Delay12_out1_4 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay12_out1_4 <= Delay2_out1_7;
        end
      end
    end



  assign Add1_out1_9 = Bit_Shift2_out1_8 + Delay12_out1_4;



  assign Bit_Slice1_out1_12 = Add1_out1_9[36];



  assign Bit_Shift1_out1_8 = Delay11_out1_4 <<< 8'd2;



  assign Add_out1_11 = Bit_Shift1_out1_8 + Delay12_out1_4;



  assign Bit_Slice_out1_12 = Add_out1_11[36];



  assign Logical_Operator1_out1_9 =  ~ Bit_Slice_out1_12;



  assign Logical_Operator4_out1_9 = Logical_Operator1_out1_9 & Bit_Slice1_out1_12;



  always @(posedge clk or posedge reset)
    begin : Delay14_4_process
      if (reset == 1'b1) begin
        Delay14_out1_4 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1_4 <= Delay4_out1_6;
        end
      end
    end



  assign Add2_out1_8 = Bit_Shift1_out1_8 + Delay14_out1_4;



  assign Bit_Slice2_out1_11 = Add2_out1_8[36];



  assign Logical_Operator_out1_12 =  ~ Bit_Slice1_out1_12;



  assign Logical_Operator2_out1_8 =  ~ Bit_Slice2_out1_11;



  assign Logical_Operator3_out1_9 = Logical_Operator4_out1_9 | Logical_Operator2_out1_8;



  assign Bit_Concat_out1_21 = {Delay10_out1_5, {Logical_Operator_out1_12, Logical_Operator3_out1_9}};



  always @(posedge clk or posedge reset)
    begin : Delay11_5_process
      if (reset == 1'b1) begin
        Delay11_out1_5 <= 19'b0000000000000000000;
      end
      else begin
        if (enb) begin
          Delay11_out1_5 <= Bit_Concat_out1_21;
        end
      end
    end



  assign Bit_Shift3_out1_8 = Add1_out1_9 <<< 8'd1;



  assign Switch1_out1_11 = (Bit_Slice2_out1_11 == 1'b0 ? Add2_out1_8 :
              Bit_Shift3_out1_8);



  assign Switch_out1_13 = (Bit_Slice_out1_12 == 1'b0 ? Add_out1_11 :
              Bit_Shift1_out1_8);



  assign Switch2_out1_10 = (Bit_Slice1_out1_12 == 1'b0 ? Switch1_out1_11 :
              Switch_out1_13);



  always @(posedge clk or posedge reset)
    begin : Delay4_7_process
      if (reset == 1'b1) begin
        Delay4_out1_7 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_7 <= Switch2_out1_10;
        end
      end
    end



  assign Bit_Shift2_out1_9 = Delay4_out1_7 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay8_5_process
      if (reset == 1'b1) begin
        Delay8_out1_5 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay8_out1_5 <= Delay12_out1_4;
        end
      end
    end



  assign Add1_out1_10 = Bit_Shift2_out1_9 + Delay8_out1_5;



  assign Bit_Slice1_out1_13 = Add1_out1_10[36];



  assign Bit_Shift1_out1_9 = Delay4_out1_7 <<< 8'd2;



  assign Add_out1_12 = Bit_Shift1_out1_9 + Delay8_out1_5;



  assign Bit_Slice_out1_13 = Add_out1_12[36];



  assign Logical_Operator1_out1_10 =  ~ Bit_Slice_out1_13;



  assign Logical_Operator4_out1_10 = Logical_Operator1_out1_10 & Bit_Slice1_out1_13;



  always @(posedge clk or posedge reset)
    begin : Delay12_5_process
      if (reset == 1'b1) begin
        Delay12_out1_5 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay12_out1_5 <= Delay14_out1_4;
        end
      end
    end



  assign Add2_out1_9 = Bit_Shift1_out1_9 + Delay12_out1_5;



  assign Bit_Slice2_out1_12 = Add2_out1_9[36];



  assign Logical_Operator_out1_13 =  ~ Bit_Slice1_out1_13;



  assign Logical_Operator2_out1_9 =  ~ Bit_Slice2_out1_12;



  assign Logical_Operator3_out1_10 = Logical_Operator4_out1_10 | Logical_Operator2_out1_9;



  assign Bit_Concat_out1_22 = {Delay11_out1_5, {Logical_Operator_out1_13, Logical_Operator3_out1_10}};



  always @(posedge clk or posedge reset)
    begin : Delay5_7_process
      if (reset == 1'b1) begin
        Delay5_out1_7 <= 21'b000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1_7 <= Bit_Concat_out1_22;
        end
      end
    end



  assign Bit_Shift3_out1_9 = Add1_out1_10 <<< 8'd1;



  assign Switch1_out1_12 = (Bit_Slice2_out1_12 == 1'b0 ? Add2_out1_9 :
              Bit_Shift3_out1_9);



  assign Switch_out1_14 = (Bit_Slice_out1_13 == 1'b0 ? Add_out1_12 :
              Bit_Shift1_out1_9);



  assign Switch2_out1_11 = (Bit_Slice1_out1_13 == 1'b0 ? Switch1_out1_12 :
              Switch_out1_14);



  always @(posedge clk or posedge reset)
    begin : Delay1_12_process
      if (reset == 1'b1) begin
        Delay1_out1_13 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay1_out1_13 <= Switch2_out1_11;
        end
      end
    end



  assign Bit_Shift2_out1_10 = Delay1_out1_13 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay2_8_process
      if (reset == 1'b1) begin
        Delay2_out1_8 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_8 <= Delay8_out1_5;
        end
      end
    end



  assign Add1_out1_11 = Bit_Shift2_out1_10 + Delay2_out1_8;



  assign Bit_Slice1_out1_14 = Add1_out1_11[36];



  assign Bit_Shift1_out1_10 = Delay1_out1_13 <<< 8'd2;



  assign Add_out1_13 = Bit_Shift1_out1_10 + Delay2_out1_8;



  assign Bit_Slice_out1_14 = Add_out1_13[36];



  assign Logical_Operator1_out1_11 =  ~ Bit_Slice_out1_14;



  assign Logical_Operator4_out1_11 = Logical_Operator1_out1_11 & Bit_Slice1_out1_14;



  always @(posedge clk or posedge reset)
    begin : Delay4_8_process
      if (reset == 1'b1) begin
        Delay4_out1_8 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_8 <= Delay12_out1_5;
        end
      end
    end



  assign Add2_out1_10 = Bit_Shift1_out1_10 + Delay4_out1_8;



  assign Bit_Slice2_out1_13 = Add2_out1_10[36];



  assign Logical_Operator_out1_14 =  ~ Bit_Slice1_out1_14;



  assign Logical_Operator2_out1_10 =  ~ Bit_Slice2_out1_13;



  assign Logical_Operator3_out1_11 = Logical_Operator4_out1_11 | Logical_Operator2_out1_10;



  assign Bit_Concat_out1_23 = {Delay5_out1_7, {Logical_Operator_out1_14, Logical_Operator3_out1_11}};



  always @(posedge clk or posedge reset)
    begin : Delay10_6_process
      if (reset == 1'b1) begin
        Delay10_out1_6 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay10_out1_6 <= Bit_Concat_out1_23;
        end
      end
    end



  assign Bit_Shift3_out1_10 = Add1_out1_11 <<< 8'd1;



  assign Switch1_out1_13 = (Bit_Slice2_out1_13 == 1'b0 ? Add2_out1_10 :
              Bit_Shift3_out1_10);



  assign Switch_out1_15 = (Bit_Slice_out1_14 == 1'b0 ? Add_out1_13 :
              Bit_Shift1_out1_10);



  assign Switch2_out1_12 = (Bit_Slice1_out1_14 == 1'b0 ? Switch1_out1_13 :
              Switch_out1_15);



  always @(posedge clk or posedge reset)
    begin : Delay11_6_process
      if (reset == 1'b1) begin
        Delay11_out1_6 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay11_out1_6 <= Switch2_out1_12;
        end
      end
    end



  assign Bit_Shift2_out1_11 = Delay11_out1_6 <<< 8'd1;



  always @(posedge clk or posedge reset)
    begin : Delay12_6_process
      if (reset == 1'b1) begin
        Delay12_out1_6 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay12_out1_6 <= Delay2_out1_8;
        end
      end
    end



  assign Add1_out1_12 = Bit_Shift2_out1_11 + Delay12_out1_6;



  assign Bit_Slice1_out1_15 = Add1_out1_12[36];



  assign Bit_Shift1_out1_11 = Delay11_out1_6 <<< 8'd2;



  assign Add_out1_14 = Bit_Shift1_out1_11 + Delay12_out1_6;



  assign Bit_Slice_out1_15 = Add_out1_14[36];



  assign Logical_Operator1_out1_12 =  ~ Bit_Slice_out1_15;



  always @(posedge clk or posedge reset)
    begin : Delay14_5_process
      if (reset == 1'b1) begin
        Delay14_out1_5 <= 37'sh0000000000;
      end
      else begin
        if (enb) begin
          Delay14_out1_5 <= Delay4_out1_8;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay3_8_process
      if (reset == 1'b1) begin
        Delay3_reg_1[0] <= 1'b0;
        Delay3_reg_1[1] <= 1'b0;
        Delay3_reg_1[2] <= 1'b0;
        Delay3_reg_1[3] <= 1'b0;
        Delay3_reg_1[4] <= 1'b0;
        Delay3_reg_1[5] <= 1'b0;
        Delay3_reg_1[6] <= 1'b0;
        Delay3_reg_1[7] <= 1'b0;
        Delay3_reg_1[8] <= 1'b0;
        Delay3_reg_1[9] <= 1'b0;
        Delay3_reg_1[10] <= 1'b0;
        Delay3_reg_1[11] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay3_reg_1[0] <= Delay3_reg_next_1[0];
          Delay3_reg_1[1] <= Delay3_reg_next_1[1];
          Delay3_reg_1[2] <= Delay3_reg_next_1[2];
          Delay3_reg_1[3] <= Delay3_reg_next_1[3];
          Delay3_reg_1[4] <= Delay3_reg_next_1[4];
          Delay3_reg_1[5] <= Delay3_reg_next_1[5];
          Delay3_reg_1[6] <= Delay3_reg_next_1[6];
          Delay3_reg_1[7] <= Delay3_reg_next_1[7];
          Delay3_reg_1[8] <= Delay3_reg_next_1[8];
          Delay3_reg_1[9] <= Delay3_reg_next_1[9];
          Delay3_reg_1[10] <= Delay3_reg_next_1[10];
          Delay3_reg_1[11] <= Delay3_reg_next_1[11];
        end
      end
    end

  assign Delay3_out1_8 = Delay3_reg_1[11];
  assign Delay3_reg_next_1[0] = Delay6_out1_2;
  assign Delay3_reg_next_1[1] = Delay3_reg_1[0];
  assign Delay3_reg_next_1[2] = Delay3_reg_1[1];
  assign Delay3_reg_next_1[3] = Delay3_reg_1[2];
  assign Delay3_reg_next_1[4] = Delay3_reg_1[3];
  assign Delay3_reg_next_1[5] = Delay3_reg_1[4];
  assign Delay3_reg_next_1[6] = Delay3_reg_1[5];
  assign Delay3_reg_next_1[7] = Delay3_reg_1[6];
  assign Delay3_reg_next_1[8] = Delay3_reg_1[7];
  assign Delay3_reg_next_1[9] = Delay3_reg_1[8];
  assign Delay3_reg_next_1[10] = Delay3_reg_1[9];
  assign Delay3_reg_next_1[11] = Delay3_reg_1[10];



  assign Logical_Operator_out1_15 =  ~ Bit_Slice1_out1_15;



  assign Logical_Operator4_out1_12 = Logical_Operator1_out1_12 & Bit_Slice1_out1_15;



  assign Add2_out1_11 = Bit_Shift1_out1_11 + Delay14_out1_5;



  assign Bit_Slice2_out1_14 = Add2_out1_11[36];



  assign Logical_Operator2_out1_11 =  ~ Bit_Slice2_out1_14;



  assign Logical_Operator3_out1_12 = Logical_Operator4_out1_12 | Logical_Operator2_out1_11;



  assign Bit_Concat_out1_24 = {Delay10_out1_6, {Logical_Operator_out1_15, Logical_Operator3_out1_12}};



  assign Bit_Slice_out1_16 = Bit_Concat_out1_24[23:0];



  assign Bit_Slice_out1_17 = Delay14_out1_1[32:9];



  always @(posedge clk or posedge reset)
    begin : Delay2_9_process
      if (reset == 1'b1) begin
        Delay2_reg_1[0] <= 24'b000000000000000000000000;
        Delay2_reg_1[1] <= 24'b000000000000000000000000;
        Delay2_reg_1[2] <= 24'b000000000000000000000000;
        Delay2_reg_1[3] <= 24'b000000000000000000000000;
        Delay2_reg_1[4] <= 24'b000000000000000000000000;
        Delay2_reg_1[5] <= 24'b000000000000000000000000;
        Delay2_reg_1[6] <= 24'b000000000000000000000000;
        Delay2_reg_1[7] <= 24'b000000000000000000000000;
        Delay2_reg_1[8] <= 24'b000000000000000000000000;
        Delay2_reg_1[9] <= 24'b000000000000000000000000;
        Delay2_reg_1[10] <= 24'b000000000000000000000000;
        Delay2_reg_1[11] <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay2_reg_1[0] <= Delay2_reg_next_1[0];
          Delay2_reg_1[1] <= Delay2_reg_next_1[1];
          Delay2_reg_1[2] <= Delay2_reg_next_1[2];
          Delay2_reg_1[3] <= Delay2_reg_next_1[3];
          Delay2_reg_1[4] <= Delay2_reg_next_1[4];
          Delay2_reg_1[5] <= Delay2_reg_next_1[5];
          Delay2_reg_1[6] <= Delay2_reg_next_1[6];
          Delay2_reg_1[7] <= Delay2_reg_next_1[7];
          Delay2_reg_1[8] <= Delay2_reg_next_1[8];
          Delay2_reg_1[9] <= Delay2_reg_next_1[9];
          Delay2_reg_1[10] <= Delay2_reg_next_1[10];
          Delay2_reg_1[11] <= Delay2_reg_next_1[11];
        end
      end
    end

  assign Delay2_out1_9 = Delay2_reg_1[11];
  assign Delay2_reg_next_1[0] = Bit_Slice_out1_17;
  assign Delay2_reg_next_1[1] = Delay2_reg_1[0];
  assign Delay2_reg_next_1[2] = Delay2_reg_1[1];
  assign Delay2_reg_next_1[3] = Delay2_reg_1[2];
  assign Delay2_reg_next_1[4] = Delay2_reg_1[3];
  assign Delay2_reg_next_1[5] = Delay2_reg_1[4];
  assign Delay2_reg_next_1[6] = Delay2_reg_1[5];
  assign Delay2_reg_next_1[7] = Delay2_reg_1[6];
  assign Delay2_reg_next_1[8] = Delay2_reg_1[7];
  assign Delay2_reg_next_1[9] = Delay2_reg_1[8];
  assign Delay2_reg_next_1[10] = Delay2_reg_1[9];
  assign Delay2_reg_next_1[11] = Delay2_reg_1[10];



  assign Switch1_out1_14 = (Delay3_out1_8 == 1'b0 ? Bit_Slice_out1_16 :
              Delay2_out1_9);



  always @(posedge clk or posedge reset)
    begin : Delay25_process
      if (reset == 1'b1) begin
        Delay25_out1 <= 24'b000000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay25_out1 <= Switch1_out1_14;
        end
      end
    end



  assign Bit_Concat_out1_25 = {alpha0_out1, Delay25_out1};



  assign BitSlice1_out1_15 = Bit_Concat_out1_25[1];



  assign Logical_Operator1_out1_13 = Logical_Operator_out1_2 | Delay31_out1;



  assign BitSlice_out1_17 = Bit_Concat_out1_25[0];



  always @(posedge clk or posedge reset)
    begin : Delay28_process
      if (reset == 1'b1) begin
        Delay28_reg[0] <= 1'b0;
        Delay28_reg[1] <= 1'b0;
        Delay28_reg[2] <= 1'b0;
        Delay28_reg[3] <= 1'b0;
        Delay28_reg[4] <= 1'b0;
        Delay28_reg[5] <= 1'b0;
        Delay28_reg[6] <= 1'b0;
        Delay28_reg[7] <= 1'b0;
        Delay28_reg[8] <= 1'b0;
        Delay28_reg[9] <= 1'b0;
        Delay28_reg[10] <= 1'b0;
        Delay28_reg[11] <= 1'b0;
        Delay28_reg[12] <= 1'b0;
        Delay28_reg[13] <= 1'b0;
        Delay28_reg[14] <= 1'b0;
        Delay28_reg[15] <= 1'b0;
        Delay28_reg[16] <= 1'b0;
        Delay28_reg[17] <= 1'b0;
        Delay28_reg[18] <= 1'b0;
        Delay28_reg[19] <= 1'b0;
        Delay28_reg[20] <= 1'b0;
        Delay28_reg[21] <= 1'b0;
        Delay28_reg[22] <= 1'b0;
        Delay28_reg[23] <= 1'b0;
        Delay28_reg[24] <= 1'b0;
        Delay28_reg[25] <= 1'b0;
        Delay28_reg[26] <= 1'b0;
        Delay28_reg[27] <= 1'b0;
        Delay28_reg[28] <= 1'b0;
        Delay28_reg[29] <= 1'b0;
        Delay28_reg[30] <= 1'b0;
        Delay28_reg[31] <= 1'b0;
        Delay28_reg[32] <= 1'b0;
        Delay28_reg[33] <= 1'b0;
        Delay28_reg[34] <= 1'b0;
        Delay28_reg[35] <= 1'b0;
      end
      else begin
        if (enb) begin
          Delay28_reg[0] <= Delay28_reg_next[0];
          Delay28_reg[1] <= Delay28_reg_next[1];
          Delay28_reg[2] <= Delay28_reg_next[2];
          Delay28_reg[3] <= Delay28_reg_next[3];
          Delay28_reg[4] <= Delay28_reg_next[4];
          Delay28_reg[5] <= Delay28_reg_next[5];
          Delay28_reg[6] <= Delay28_reg_next[6];
          Delay28_reg[7] <= Delay28_reg_next[7];
          Delay28_reg[8] <= Delay28_reg_next[8];
          Delay28_reg[9] <= Delay28_reg_next[9];
          Delay28_reg[10] <= Delay28_reg_next[10];
          Delay28_reg[11] <= Delay28_reg_next[11];
          Delay28_reg[12] <= Delay28_reg_next[12];
          Delay28_reg[13] <= Delay28_reg_next[13];
          Delay28_reg[14] <= Delay28_reg_next[14];
          Delay28_reg[15] <= Delay28_reg_next[15];
          Delay28_reg[16] <= Delay28_reg_next[16];
          Delay28_reg[17] <= Delay28_reg_next[17];
          Delay28_reg[18] <= Delay28_reg_next[18];
          Delay28_reg[19] <= Delay28_reg_next[19];
          Delay28_reg[20] <= Delay28_reg_next[20];
          Delay28_reg[21] <= Delay28_reg_next[21];
          Delay28_reg[22] <= Delay28_reg_next[22];
          Delay28_reg[23] <= Delay28_reg_next[23];
          Delay28_reg[24] <= Delay28_reg_next[24];
          Delay28_reg[25] <= Delay28_reg_next[25];
          Delay28_reg[26] <= Delay28_reg_next[26];
          Delay28_reg[27] <= Delay28_reg_next[27];
          Delay28_reg[28] <= Delay28_reg_next[28];
          Delay28_reg[29] <= Delay28_reg_next[29];
          Delay28_reg[30] <= Delay28_reg_next[30];
          Delay28_reg[31] <= Delay28_reg_next[31];
          Delay28_reg[32] <= Delay28_reg_next[32];
          Delay28_reg[33] <= Delay28_reg_next[33];
          Delay28_reg[34] <= Delay28_reg_next[34];
          Delay28_reg[35] <= Delay28_reg_next[35];
        end
      end
    end

  assign Delay28_out1 = Delay28_reg[35];
  assign Delay28_reg_next[0] = Logical_Operator1_out1_13;
  assign Delay28_reg_next[1] = Delay28_reg[0];
  assign Delay28_reg_next[2] = Delay28_reg[1];
  assign Delay28_reg_next[3] = Delay28_reg[2];
  assign Delay28_reg_next[4] = Delay28_reg[3];
  assign Delay28_reg_next[5] = Delay28_reg[4];
  assign Delay28_reg_next[6] = Delay28_reg[5];
  assign Delay28_reg_next[7] = Delay28_reg[6];
  assign Delay28_reg_next[8] = Delay28_reg[7];
  assign Delay28_reg_next[9] = Delay28_reg[8];
  assign Delay28_reg_next[10] = Delay28_reg[9];
  assign Delay28_reg_next[11] = Delay28_reg[10];
  assign Delay28_reg_next[12] = Delay28_reg[11];
  assign Delay28_reg_next[13] = Delay28_reg[12];
  assign Delay28_reg_next[14] = Delay28_reg[13];
  assign Delay28_reg_next[15] = Delay28_reg[14];
  assign Delay28_reg_next[16] = Delay28_reg[15];
  assign Delay28_reg_next[17] = Delay28_reg[16];
  assign Delay28_reg_next[18] = Delay28_reg[17];
  assign Delay28_reg_next[19] = Delay28_reg[18];
  assign Delay28_reg_next[20] = Delay28_reg[19];
  assign Delay28_reg_next[21] = Delay28_reg[20];
  assign Delay28_reg_next[22] = Delay28_reg[21];
  assign Delay28_reg_next[23] = Delay28_reg[22];
  assign Delay28_reg_next[24] = Delay28_reg[23];
  assign Delay28_reg_next[25] = Delay28_reg[24];
  assign Delay28_reg_next[26] = Delay28_reg[25];
  assign Delay28_reg_next[27] = Delay28_reg[26];
  assign Delay28_reg_next[28] = Delay28_reg[27];
  assign Delay28_reg_next[29] = Delay28_reg[28];
  assign Delay28_reg_next[30] = Delay28_reg[29];
  assign Delay28_reg_next[31] = Delay28_reg[30];
  assign Delay28_reg_next[32] = Delay28_reg[31];
  assign Delay28_reg_next[33] = Delay28_reg[32];
  assign Delay28_reg_next[34] = Delay28_reg[33];
  assign Delay28_reg_next[35] = Delay28_reg[34];



  assign alphabitget_Mant_tmp_2_0_out1 = BitSlice1_out1_15 | Delay28_out1;



  assign alphabitget_Mant_tmp_1_0_out1 = BitSlice_out1_17 & alphabitget_Mant_tmp_2_0_out1;



  assign cast_2_like_Mant_tmp_out1 = 25'b0000000000000000000000010;



  assign Mant_tmp_cast_2_like_Man_1 = {7'b0, Bit_Concat_out1_25};
  assign Mant_tmp_cast_2_like_Man_2 = {7'b0, cast_2_like_Mant_tmp_out1};
  assign Mant_tmp_cast_2_like_Man_add_temp = Mant_tmp_cast_2_like_Man_1 + Mant_tmp_cast_2_like_Man_2;
  assign Mant_tmp_cast_2_like_Man_out1 = Mant_tmp_cast_2_like_Man_add_temp[24:0];



  assign if_bitget_Mant_tmp_1_0_out1 = (alphabitget_Mant_tmp_1_0_out1 == 1'b0 ? Bit_Concat_out1_25 :
              Mant_tmp_cast_2_like_Man_out1);



  assign BitSlice2_out1_2 = if_bitget_Mant_tmp_1_0_out1[24];



  assign alpha127_out1 = 8'b01111111;



  always @(posedge clk or posedge reset)
    begin : Delay2_10_process
      if (reset == 1'b1) begin
        Delay2_out1_10 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay2_out1_10 <= Delay1_out1_4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : Delay29_process
      if (reset == 1'b1) begin
        Delay29_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay29_out1 <= Delay2_out1_10;
        end
      end
    end



  assign if_sticky_3_out1 = (Delay31_out1 == 1'b0 ? alpha127_out1 :
              Delay29_out1);



  always @(posedge clk or posedge reset)
    begin : Delay4_9_process
      if (reset == 1'b1) begin
        Delay4_reg[0] <= 8'b00000000;
        Delay4_reg[1] <= 8'b00000000;
        Delay4_reg[2] <= 8'b00000000;
        Delay4_reg[3] <= 8'b00000000;
        Delay4_reg[4] <= 8'b00000000;
        Delay4_reg[5] <= 8'b00000000;
        Delay4_reg[6] <= 8'b00000000;
        Delay4_reg[7] <= 8'b00000000;
        Delay4_reg[8] <= 8'b00000000;
        Delay4_reg[9] <= 8'b00000000;
        Delay4_reg[10] <= 8'b00000000;
        Delay4_reg[11] <= 8'b00000000;
        Delay4_reg[12] <= 8'b00000000;
        Delay4_reg[13] <= 8'b00000000;
        Delay4_reg[14] <= 8'b00000000;
        Delay4_reg[15] <= 8'b00000000;
        Delay4_reg[16] <= 8'b00000000;
        Delay4_reg[17] <= 8'b00000000;
        Delay4_reg[18] <= 8'b00000000;
        Delay4_reg[19] <= 8'b00000000;
        Delay4_reg[20] <= 8'b00000000;
        Delay4_reg[21] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay4_reg[0] <= Delay4_reg_next[0];
          Delay4_reg[1] <= Delay4_reg_next[1];
          Delay4_reg[2] <= Delay4_reg_next[2];
          Delay4_reg[3] <= Delay4_reg_next[3];
          Delay4_reg[4] <= Delay4_reg_next[4];
          Delay4_reg[5] <= Delay4_reg_next[5];
          Delay4_reg[6] <= Delay4_reg_next[6];
          Delay4_reg[7] <= Delay4_reg_next[7];
          Delay4_reg[8] <= Delay4_reg_next[8];
          Delay4_reg[9] <= Delay4_reg_next[9];
          Delay4_reg[10] <= Delay4_reg_next[10];
          Delay4_reg[11] <= Delay4_reg_next[11];
          Delay4_reg[12] <= Delay4_reg_next[12];
          Delay4_reg[13] <= Delay4_reg_next[13];
          Delay4_reg[14] <= Delay4_reg_next[14];
          Delay4_reg[15] <= Delay4_reg_next[15];
          Delay4_reg[16] <= Delay4_reg_next[16];
          Delay4_reg[17] <= Delay4_reg_next[17];
          Delay4_reg[18] <= Delay4_reg_next[18];
          Delay4_reg[19] <= Delay4_reg_next[19];
          Delay4_reg[20] <= Delay4_reg_next[20];
          Delay4_reg[21] <= Delay4_reg_next[21];
        end
      end
    end

  assign Delay4_out1_9 = Delay4_reg[21];
  assign Delay4_reg_next[0] = if_sticky_3_out1;
  assign Delay4_reg_next[1] = Delay4_reg[0];
  assign Delay4_reg_next[2] = Delay4_reg[1];
  assign Delay4_reg_next[3] = Delay4_reg[2];
  assign Delay4_reg_next[4] = Delay4_reg[3];
  assign Delay4_reg_next[5] = Delay4_reg[4];
  assign Delay4_reg_next[6] = Delay4_reg[5];
  assign Delay4_reg_next[7] = Delay4_reg[6];
  assign Delay4_reg_next[8] = Delay4_reg[7];
  assign Delay4_reg_next[9] = Delay4_reg[8];
  assign Delay4_reg_next[10] = Delay4_reg[9];
  assign Delay4_reg_next[11] = Delay4_reg[10];
  assign Delay4_reg_next[12] = Delay4_reg[11];
  assign Delay4_reg_next[13] = Delay4_reg[12];
  assign Delay4_reg_next[14] = Delay4_reg[13];
  assign Delay4_reg_next[15] = Delay4_reg[14];
  assign Delay4_reg_next[16] = Delay4_reg[15];
  assign Delay4_reg_next[17] = Delay4_reg[16];
  assign Delay4_reg_next[18] = Delay4_reg[17];
  assign Delay4_reg_next[19] = Delay4_reg[18];
  assign Delay4_reg_next[20] = Delay4_reg[19];
  assign Delay4_reg_next[21] = Delay4_reg[20];



  assign Add3_out1 = Delay4_out1_9 - DTC_out1;



  assign Constant1_out1_2 = 8'b00000001;



  assign Add2_out1_12 = Constant1_out1_2 + Delay4_out1_9;



  assign Switch1_out1_15 = (Bit_Slice_out1_1 == 1'b0 ? Add3_out1 :
              Add2_out1_12);



  always @(posedge clk or posedge reset)
    begin : Delay18_1_process
      if (reset == 1'b1) begin
        Delay18_out1_1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay18_out1_1 <= Switch1_out1_15;
        end
      end
    end



  assign Constant1_out1_3 = 8'b00000001;



  assign exp_1_out1 = Delay18_out1_1 - Constant1_out1_3;



  assign Switch1_out1_16 = (Bit_Slice_out1_3 == 1'b0 ? Delay18_out1_1 :
              exp_1_out1);



  assign Switch_out1_16 = (Delay6_out1_2 == 1'b0 ? Switch1_out1_16 :
              Delay18_out1_1);



  always @(posedge clk or posedge reset)
    begin : Delay_6_process
      if (reset == 1'b1) begin
        Delay_reg_2[0] <= 8'b00000000;
        Delay_reg_2[1] <= 8'b00000000;
        Delay_reg_2[2] <= 8'b00000000;
        Delay_reg_2[3] <= 8'b00000000;
        Delay_reg_2[4] <= 8'b00000000;
        Delay_reg_2[5] <= 8'b00000000;
        Delay_reg_2[6] <= 8'b00000000;
        Delay_reg_2[7] <= 8'b00000000;
        Delay_reg_2[8] <= 8'b00000000;
        Delay_reg_2[9] <= 8'b00000000;
        Delay_reg_2[10] <= 8'b00000000;
        Delay_reg_2[11] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay_reg_2[0] <= Delay_reg_next_2[0];
          Delay_reg_2[1] <= Delay_reg_next_2[1];
          Delay_reg_2[2] <= Delay_reg_next_2[2];
          Delay_reg_2[3] <= Delay_reg_next_2[3];
          Delay_reg_2[4] <= Delay_reg_next_2[4];
          Delay_reg_2[5] <= Delay_reg_next_2[5];
          Delay_reg_2[6] <= Delay_reg_next_2[6];
          Delay_reg_2[7] <= Delay_reg_next_2[7];
          Delay_reg_2[8] <= Delay_reg_next_2[8];
          Delay_reg_2[9] <= Delay_reg_next_2[9];
          Delay_reg_2[10] <= Delay_reg_next_2[10];
          Delay_reg_2[11] <= Delay_reg_next_2[11];
        end
      end
    end

  assign Delay_out1_6 = Delay_reg_2[11];
  assign Delay_reg_next_2[0] = Switch_out1_16;
  assign Delay_reg_next_2[1] = Delay_reg_2[0];
  assign Delay_reg_next_2[2] = Delay_reg_2[1];
  assign Delay_reg_next_2[3] = Delay_reg_2[2];
  assign Delay_reg_next_2[4] = Delay_reg_2[3];
  assign Delay_reg_next_2[5] = Delay_reg_2[4];
  assign Delay_reg_next_2[6] = Delay_reg_2[5];
  assign Delay_reg_next_2[7] = Delay_reg_2[6];
  assign Delay_reg_next_2[8] = Delay_reg_2[7];
  assign Delay_reg_next_2[9] = Delay_reg_2[8];
  assign Delay_reg_next_2[10] = Delay_reg_2[9];
  assign Delay_reg_next_2[11] = Delay_reg_2[10];



  always @(posedge clk or posedge reset)
    begin : Delay24_process
      if (reset == 1'b1) begin
        Delay24_out1 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay24_out1 <= Delay_out1_6;
        end
      end
    end



  assign cast_1_like_Exp_out1 = 8'b00000001;



  assign Exp_cast_1_like_Exp_out1 = Delay24_out1 + cast_1_like_Exp_out1;



  assign if_bitget_Mant_tmp_Mant_tmp_Wor_out1 = (BitSlice2_out1_2 == 1'b0 ? Delay24_out1 :
              Exp_cast_1_like_Exp_out1);



  assign aExponent_cfType_Exponent_I_out1 = Delay1_out1_1 == 8'b11111111;



  assign aMantissa_0_out1 = Delay2_out1 != 23'b00000000000000000000000;



  assign Logical_Operator2_out1_12 = aExponent_cfType_Exponent_I_out1 & aMantissa_0_out1;



  assign Logical_Operator1_out1_14 = Logical_Operator2_out1_12 | aExponent_cfType_Exponent_I_1_out1;



  assign Constant_out1_10 = 8'b01111111;



  assign Switch_out1_17 = (Logical_Operator1_out1_14 == 1'b0 ? Constant_out1_10 :
              Delay1_out1_1);



  always @(posedge clk or posedge reset)
    begin : Delay7_5_process
      if (reset == 1'b1) begin
        Delay7_reg_1[0] <= 8'b00000000;
        Delay7_reg_1[1] <= 8'b00000000;
        Delay7_reg_1[2] <= 8'b00000000;
        Delay7_reg_1[3] <= 8'b00000000;
        Delay7_reg_1[4] <= 8'b00000000;
        Delay7_reg_1[5] <= 8'b00000000;
        Delay7_reg_1[6] <= 8'b00000000;
        Delay7_reg_1[7] <= 8'b00000000;
        Delay7_reg_1[8] <= 8'b00000000;
        Delay7_reg_1[9] <= 8'b00000000;
        Delay7_reg_1[10] <= 8'b00000000;
        Delay7_reg_1[11] <= 8'b00000000;
        Delay7_reg_1[12] <= 8'b00000000;
        Delay7_reg_1[13] <= 8'b00000000;
        Delay7_reg_1[14] <= 8'b00000000;
        Delay7_reg_1[15] <= 8'b00000000;
        Delay7_reg_1[16] <= 8'b00000000;
        Delay7_reg_1[17] <= 8'b00000000;
        Delay7_reg_1[18] <= 8'b00000000;
        Delay7_reg_1[19] <= 8'b00000000;
        Delay7_reg_1[20] <= 8'b00000000;
        Delay7_reg_1[21] <= 8'b00000000;
        Delay7_reg_1[22] <= 8'b00000000;
        Delay7_reg_1[23] <= 8'b00000000;
        Delay7_reg_1[24] <= 8'b00000000;
        Delay7_reg_1[25] <= 8'b00000000;
        Delay7_reg_1[26] <= 8'b00000000;
        Delay7_reg_1[27] <= 8'b00000000;
        Delay7_reg_1[28] <= 8'b00000000;
        Delay7_reg_1[29] <= 8'b00000000;
        Delay7_reg_1[30] <= 8'b00000000;
        Delay7_reg_1[31] <= 8'b00000000;
        Delay7_reg_1[32] <= 8'b00000000;
        Delay7_reg_1[33] <= 8'b00000000;
        Delay7_reg_1[34] <= 8'b00000000;
        Delay7_reg_1[35] <= 8'b00000000;
        Delay7_reg_1[36] <= 8'b00000000;
        Delay7_reg_1[37] <= 8'b00000000;
        Delay7_reg_1[38] <= 8'b00000000;
        Delay7_reg_1[39] <= 8'b00000000;
        Delay7_reg_1[40] <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay7_reg_1[0] <= Delay7_reg_next_1[0];
          Delay7_reg_1[1] <= Delay7_reg_next_1[1];
          Delay7_reg_1[2] <= Delay7_reg_next_1[2];
          Delay7_reg_1[3] <= Delay7_reg_next_1[3];
          Delay7_reg_1[4] <= Delay7_reg_next_1[4];
          Delay7_reg_1[5] <= Delay7_reg_next_1[5];
          Delay7_reg_1[6] <= Delay7_reg_next_1[6];
          Delay7_reg_1[7] <= Delay7_reg_next_1[7];
          Delay7_reg_1[8] <= Delay7_reg_next_1[8];
          Delay7_reg_1[9] <= Delay7_reg_next_1[9];
          Delay7_reg_1[10] <= Delay7_reg_next_1[10];
          Delay7_reg_1[11] <= Delay7_reg_next_1[11];
          Delay7_reg_1[12] <= Delay7_reg_next_1[12];
          Delay7_reg_1[13] <= Delay7_reg_next_1[13];
          Delay7_reg_1[14] <= Delay7_reg_next_1[14];
          Delay7_reg_1[15] <= Delay7_reg_next_1[15];
          Delay7_reg_1[16] <= Delay7_reg_next_1[16];
          Delay7_reg_1[17] <= Delay7_reg_next_1[17];
          Delay7_reg_1[18] <= Delay7_reg_next_1[18];
          Delay7_reg_1[19] <= Delay7_reg_next_1[19];
          Delay7_reg_1[20] <= Delay7_reg_next_1[20];
          Delay7_reg_1[21] <= Delay7_reg_next_1[21];
          Delay7_reg_1[22] <= Delay7_reg_next_1[22];
          Delay7_reg_1[23] <= Delay7_reg_next_1[23];
          Delay7_reg_1[24] <= Delay7_reg_next_1[24];
          Delay7_reg_1[25] <= Delay7_reg_next_1[25];
          Delay7_reg_1[26] <= Delay7_reg_next_1[26];
          Delay7_reg_1[27] <= Delay7_reg_next_1[27];
          Delay7_reg_1[28] <= Delay7_reg_next_1[28];
          Delay7_reg_1[29] <= Delay7_reg_next_1[29];
          Delay7_reg_1[30] <= Delay7_reg_next_1[30];
          Delay7_reg_1[31] <= Delay7_reg_next_1[31];
          Delay7_reg_1[32] <= Delay7_reg_next_1[32];
          Delay7_reg_1[33] <= Delay7_reg_next_1[33];
          Delay7_reg_1[34] <= Delay7_reg_next_1[34];
          Delay7_reg_1[35] <= Delay7_reg_next_1[35];
          Delay7_reg_1[36] <= Delay7_reg_next_1[36];
          Delay7_reg_1[37] <= Delay7_reg_next_1[37];
          Delay7_reg_1[38] <= Delay7_reg_next_1[38];
          Delay7_reg_1[39] <= Delay7_reg_next_1[39];
          Delay7_reg_1[40] <= Delay7_reg_next_1[40];
        end
      end
    end

  assign Delay7_out1_5 = Delay7_reg_1[40];
  assign Delay7_reg_next_1[0] = Switch_out1_17;
  assign Delay7_reg_next_1[1] = Delay7_reg_1[0];
  assign Delay7_reg_next_1[2] = Delay7_reg_1[1];
  assign Delay7_reg_next_1[3] = Delay7_reg_1[2];
  assign Delay7_reg_next_1[4] = Delay7_reg_1[3];
  assign Delay7_reg_next_1[5] = Delay7_reg_1[4];
  assign Delay7_reg_next_1[6] = Delay7_reg_1[5];
  assign Delay7_reg_next_1[7] = Delay7_reg_1[6];
  assign Delay7_reg_next_1[8] = Delay7_reg_1[7];
  assign Delay7_reg_next_1[9] = Delay7_reg_1[8];
  assign Delay7_reg_next_1[10] = Delay7_reg_1[9];
  assign Delay7_reg_next_1[11] = Delay7_reg_1[10];
  assign Delay7_reg_next_1[12] = Delay7_reg_1[11];
  assign Delay7_reg_next_1[13] = Delay7_reg_1[12];
  assign Delay7_reg_next_1[14] = Delay7_reg_1[13];
  assign Delay7_reg_next_1[15] = Delay7_reg_1[14];
  assign Delay7_reg_next_1[16] = Delay7_reg_1[15];
  assign Delay7_reg_next_1[17] = Delay7_reg_1[16];
  assign Delay7_reg_next_1[18] = Delay7_reg_1[17];
  assign Delay7_reg_next_1[19] = Delay7_reg_1[18];
  assign Delay7_reg_next_1[20] = Delay7_reg_1[19];
  assign Delay7_reg_next_1[21] = Delay7_reg_1[20];
  assign Delay7_reg_next_1[22] = Delay7_reg_1[21];
  assign Delay7_reg_next_1[23] = Delay7_reg_1[22];
  assign Delay7_reg_next_1[24] = Delay7_reg_1[23];
  assign Delay7_reg_next_1[25] = Delay7_reg_1[24];
  assign Delay7_reg_next_1[26] = Delay7_reg_1[25];
  assign Delay7_reg_next_1[27] = Delay7_reg_1[26];
  assign Delay7_reg_next_1[28] = Delay7_reg_1[27];
  assign Delay7_reg_next_1[29] = Delay7_reg_1[28];
  assign Delay7_reg_next_1[30] = Delay7_reg_1[29];
  assign Delay7_reg_next_1[31] = Delay7_reg_1[30];
  assign Delay7_reg_next_1[32] = Delay7_reg_1[31];
  assign Delay7_reg_next_1[33] = Delay7_reg_1[32];
  assign Delay7_reg_next_1[34] = Delay7_reg_1[33];
  assign Delay7_reg_next_1[35] = Delay7_reg_1[34];
  assign Delay7_reg_next_1[36] = Delay7_reg_1[35];
  assign Delay7_reg_next_1[37] = Delay7_reg_1[36];
  assign Delay7_reg_next_1[38] = Delay7_reg_1[37];
  assign Delay7_reg_next_1[39] = Delay7_reg_1[38];
  assign Delay7_reg_next_1[40] = Delay7_reg_1[39];



  assign if_aExponent_cfType_Exponent_out1 = (Delay9_out1 == 1'b0 ? if_bitget_Mant_tmp_Mant_tmp_Wor_out1 :
              Delay7_out1_5);



  assign Constant3_out1_2 = 8'b00000000;



  assign Switch6_out1_1 = (Delay1_out1 == 1'b0 ? if_aExponent_cfType_Exponent_out1 :
              Constant3_out1_2);



  always @(posedge clk or posedge reset)
    begin : Delay4_10_process
      if (reset == 1'b1) begin
        Delay4_out1_10 <= 8'b00000000;
      end
      else begin
        if (enb) begin
          Delay4_out1_10 <= Switch6_out1_1;
        end
      end
    end



  assign BitSlice3_out1 = if_bitget_Mant_tmp_1_0_out1[23:1];



  assign C_out1_1 = 23'b00000000000000000000000;



  assign if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 = (BitSlice2_out1_2 == 1'b0 ? BitSlice3_out1 :
              C_out1_1);



  assign Constant1_out1_4 = 23'b00000000000000000000000;



  assign Switch1_out1_17 = (Logical_Operator1_out1_14 == 1'b0 ? Constant1_out1_4 :
              Delay2_out1);



  always @(posedge clk or posedge reset)
    begin : Delay8_6_process
      if (reset == 1'b1) begin
        Delay8_reg_2[0] <= 23'b00000000000000000000000;
        Delay8_reg_2[1] <= 23'b00000000000000000000000;
        Delay8_reg_2[2] <= 23'b00000000000000000000000;
        Delay8_reg_2[3] <= 23'b00000000000000000000000;
        Delay8_reg_2[4] <= 23'b00000000000000000000000;
        Delay8_reg_2[5] <= 23'b00000000000000000000000;
        Delay8_reg_2[6] <= 23'b00000000000000000000000;
        Delay8_reg_2[7] <= 23'b00000000000000000000000;
        Delay8_reg_2[8] <= 23'b00000000000000000000000;
        Delay8_reg_2[9] <= 23'b00000000000000000000000;
        Delay8_reg_2[10] <= 23'b00000000000000000000000;
        Delay8_reg_2[11] <= 23'b00000000000000000000000;
        Delay8_reg_2[12] <= 23'b00000000000000000000000;
        Delay8_reg_2[13] <= 23'b00000000000000000000000;
        Delay8_reg_2[14] <= 23'b00000000000000000000000;
        Delay8_reg_2[15] <= 23'b00000000000000000000000;
        Delay8_reg_2[16] <= 23'b00000000000000000000000;
        Delay8_reg_2[17] <= 23'b00000000000000000000000;
        Delay8_reg_2[18] <= 23'b00000000000000000000000;
        Delay8_reg_2[19] <= 23'b00000000000000000000000;
        Delay8_reg_2[20] <= 23'b00000000000000000000000;
        Delay8_reg_2[21] <= 23'b00000000000000000000000;
        Delay8_reg_2[22] <= 23'b00000000000000000000000;
        Delay8_reg_2[23] <= 23'b00000000000000000000000;
        Delay8_reg_2[24] <= 23'b00000000000000000000000;
        Delay8_reg_2[25] <= 23'b00000000000000000000000;
        Delay8_reg_2[26] <= 23'b00000000000000000000000;
        Delay8_reg_2[27] <= 23'b00000000000000000000000;
        Delay8_reg_2[28] <= 23'b00000000000000000000000;
        Delay8_reg_2[29] <= 23'b00000000000000000000000;
        Delay8_reg_2[30] <= 23'b00000000000000000000000;
        Delay8_reg_2[31] <= 23'b00000000000000000000000;
        Delay8_reg_2[32] <= 23'b00000000000000000000000;
        Delay8_reg_2[33] <= 23'b00000000000000000000000;
        Delay8_reg_2[34] <= 23'b00000000000000000000000;
        Delay8_reg_2[35] <= 23'b00000000000000000000000;
        Delay8_reg_2[36] <= 23'b00000000000000000000000;
        Delay8_reg_2[37] <= 23'b00000000000000000000000;
        Delay8_reg_2[38] <= 23'b00000000000000000000000;
        Delay8_reg_2[39] <= 23'b00000000000000000000000;
        Delay8_reg_2[40] <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay8_reg_2[0] <= Delay8_reg_next_2[0];
          Delay8_reg_2[1] <= Delay8_reg_next_2[1];
          Delay8_reg_2[2] <= Delay8_reg_next_2[2];
          Delay8_reg_2[3] <= Delay8_reg_next_2[3];
          Delay8_reg_2[4] <= Delay8_reg_next_2[4];
          Delay8_reg_2[5] <= Delay8_reg_next_2[5];
          Delay8_reg_2[6] <= Delay8_reg_next_2[6];
          Delay8_reg_2[7] <= Delay8_reg_next_2[7];
          Delay8_reg_2[8] <= Delay8_reg_next_2[8];
          Delay8_reg_2[9] <= Delay8_reg_next_2[9];
          Delay8_reg_2[10] <= Delay8_reg_next_2[10];
          Delay8_reg_2[11] <= Delay8_reg_next_2[11];
          Delay8_reg_2[12] <= Delay8_reg_next_2[12];
          Delay8_reg_2[13] <= Delay8_reg_next_2[13];
          Delay8_reg_2[14] <= Delay8_reg_next_2[14];
          Delay8_reg_2[15] <= Delay8_reg_next_2[15];
          Delay8_reg_2[16] <= Delay8_reg_next_2[16];
          Delay8_reg_2[17] <= Delay8_reg_next_2[17];
          Delay8_reg_2[18] <= Delay8_reg_next_2[18];
          Delay8_reg_2[19] <= Delay8_reg_next_2[19];
          Delay8_reg_2[20] <= Delay8_reg_next_2[20];
          Delay8_reg_2[21] <= Delay8_reg_next_2[21];
          Delay8_reg_2[22] <= Delay8_reg_next_2[22];
          Delay8_reg_2[23] <= Delay8_reg_next_2[23];
          Delay8_reg_2[24] <= Delay8_reg_next_2[24];
          Delay8_reg_2[25] <= Delay8_reg_next_2[25];
          Delay8_reg_2[26] <= Delay8_reg_next_2[26];
          Delay8_reg_2[27] <= Delay8_reg_next_2[27];
          Delay8_reg_2[28] <= Delay8_reg_next_2[28];
          Delay8_reg_2[29] <= Delay8_reg_next_2[29];
          Delay8_reg_2[30] <= Delay8_reg_next_2[30];
          Delay8_reg_2[31] <= Delay8_reg_next_2[31];
          Delay8_reg_2[32] <= Delay8_reg_next_2[32];
          Delay8_reg_2[33] <= Delay8_reg_next_2[33];
          Delay8_reg_2[34] <= Delay8_reg_next_2[34];
          Delay8_reg_2[35] <= Delay8_reg_next_2[35];
          Delay8_reg_2[36] <= Delay8_reg_next_2[36];
          Delay8_reg_2[37] <= Delay8_reg_next_2[37];
          Delay8_reg_2[38] <= Delay8_reg_next_2[38];
          Delay8_reg_2[39] <= Delay8_reg_next_2[39];
          Delay8_reg_2[40] <= Delay8_reg_next_2[40];
        end
      end
    end

  assign Delay8_out1_6 = Delay8_reg_2[40];
  assign Delay8_reg_next_2[0] = Switch1_out1_17;
  assign Delay8_reg_next_2[1] = Delay8_reg_2[0];
  assign Delay8_reg_next_2[2] = Delay8_reg_2[1];
  assign Delay8_reg_next_2[3] = Delay8_reg_2[2];
  assign Delay8_reg_next_2[4] = Delay8_reg_2[3];
  assign Delay8_reg_next_2[5] = Delay8_reg_2[4];
  assign Delay8_reg_next_2[6] = Delay8_reg_2[5];
  assign Delay8_reg_next_2[7] = Delay8_reg_2[6];
  assign Delay8_reg_next_2[8] = Delay8_reg_2[7];
  assign Delay8_reg_next_2[9] = Delay8_reg_2[8];
  assign Delay8_reg_next_2[10] = Delay8_reg_2[9];
  assign Delay8_reg_next_2[11] = Delay8_reg_2[10];
  assign Delay8_reg_next_2[12] = Delay8_reg_2[11];
  assign Delay8_reg_next_2[13] = Delay8_reg_2[12];
  assign Delay8_reg_next_2[14] = Delay8_reg_2[13];
  assign Delay8_reg_next_2[15] = Delay8_reg_2[14];
  assign Delay8_reg_next_2[16] = Delay8_reg_2[15];
  assign Delay8_reg_next_2[17] = Delay8_reg_2[16];
  assign Delay8_reg_next_2[18] = Delay8_reg_2[17];
  assign Delay8_reg_next_2[19] = Delay8_reg_2[18];
  assign Delay8_reg_next_2[20] = Delay8_reg_2[19];
  assign Delay8_reg_next_2[21] = Delay8_reg_2[20];
  assign Delay8_reg_next_2[22] = Delay8_reg_2[21];
  assign Delay8_reg_next_2[23] = Delay8_reg_2[22];
  assign Delay8_reg_next_2[24] = Delay8_reg_2[23];
  assign Delay8_reg_next_2[25] = Delay8_reg_2[24];
  assign Delay8_reg_next_2[26] = Delay8_reg_2[25];
  assign Delay8_reg_next_2[27] = Delay8_reg_2[26];
  assign Delay8_reg_next_2[28] = Delay8_reg_2[27];
  assign Delay8_reg_next_2[29] = Delay8_reg_2[28];
  assign Delay8_reg_next_2[30] = Delay8_reg_2[29];
  assign Delay8_reg_next_2[31] = Delay8_reg_2[30];
  assign Delay8_reg_next_2[32] = Delay8_reg_2[31];
  assign Delay8_reg_next_2[33] = Delay8_reg_2[32];
  assign Delay8_reg_next_2[34] = Delay8_reg_2[33];
  assign Delay8_reg_next_2[35] = Delay8_reg_2[34];
  assign Delay8_reg_next_2[36] = Delay8_reg_2[35];
  assign Delay8_reg_next_2[37] = Delay8_reg_2[36];
  assign Delay8_reg_next_2[38] = Delay8_reg_2[37];
  assign Delay8_reg_next_2[39] = Delay8_reg_2[38];
  assign Delay8_reg_next_2[40] = Delay8_reg_2[39];



  assign if_aExponent_cfType_Exponent_1_out1 = (Delay9_out1 == 1'b0 ? if_bitget_Mant_tmp_Mant_tmp_Wor_1_out1 :
              Delay8_out1_6);



  assign Constant2_out1_2 = 23'b00000000000000000000000;



  assign Switch5_out1_1 = (Delay1_out1 == 1'b0 ? if_aExponent_cfType_Exponent_1_out1 :
              Constant2_out1_2);



  always @(posedge clk or posedge reset)
    begin : Delay5_8_process
      if (reset == 1'b1) begin
        Delay5_out1_8 <= 23'b00000000000000000000000;
      end
      else begin
        if (enb) begin
          Delay5_out1_8 <= Switch5_out1_1;
        end
      end
    end



  // Combine FP sign, exponent, mantissa into 32 bit word
  assign nfp_out_pack = {Delay3_out1_1, Delay4_out1_10, Delay5_out1_8};



  assign nfp_out = nfp_out_pack;

endmodule  // nfp_tanh_single

