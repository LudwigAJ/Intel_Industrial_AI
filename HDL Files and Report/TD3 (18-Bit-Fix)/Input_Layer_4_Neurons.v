// -------------------------------------------------------------
// 
// File Name: /Users/ciaran/Documents/MATLAB/Yr3 Intel/stableTD3/hdlsrc/ControllerTestbench/ControllerTestbench/Input_Layer_4_Neurons.v
// Created: 2021-06-15 22:29:09
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Input_Layer_4_Neurons
// Source Path: ControllerTestbench/Controller_equiv_DC_motor1/PI_Ctrl_float_speed/Reinforcement Learning1/Subsystem 
// Reference2/Input Layer (4 Neurons
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Input_Layer_4_Neurons
          (clk,
           reset,
           enb,
           layer_input_0,
           layer_input_1,
           layer_input_2,
           layer_input_3,
           layer_input_4,
           layer_input_5,
           layer_input_6,
           layer_input_7,
           layer_input_8,
           weights_matrix_0,
           weights_matrix_1,
           weights_matrix_2,
           weights_matrix_3,
           weights_matrix_4,
           weights_matrix_5,
           weights_matrix_6,
           weights_matrix_7,
           weights_matrix_8,
           weights_matrix_9,
           weights_matrix_10,
           weights_matrix_11,
           weights_matrix_12,
           weights_matrix_13,
           weights_matrix_14,
           weights_matrix_15,
           weights_matrix_16,
           weights_matrix_17,
           weights_matrix_18,
           weights_matrix_19,
           weights_matrix_20,
           weights_matrix_21,
           weights_matrix_22,
           weights_matrix_23,
           weights_matrix_24,
           weights_matrix_25,
           weights_matrix_26,
           weights_matrix_27,
           weights_matrix_28,
           weights_matrix_29,
           weights_matrix_30,
           weights_matrix_31,
           weights_matrix_32,
           weights_matrix_33,
           weights_matrix_34,
           weights_matrix_35,
           bias_vector_0,
           bias_vector_1,
           bias_vector_2,
           bias_vector_3,
           layer_output_0,
           layer_output_1,
           layer_output_2,
           layer_output_3);


  input   clk;
  input   reset;
  input   enb;
  input   signed [17:0] layer_input_0;  // sfix18_En13
  input   signed [17:0] layer_input_1;  // sfix18_En13
  input   signed [17:0] layer_input_2;  // sfix18_En13
  input   signed [17:0] layer_input_3;  // sfix18_En13
  input   signed [17:0] layer_input_4;  // sfix18_En13
  input   signed [17:0] layer_input_5;  // sfix18_En13
  input   signed [17:0] layer_input_6;  // sfix18_En13
  input   signed [17:0] layer_input_7;  // sfix18_En13
  input   signed [17:0] layer_input_8;  // sfix18_En13
  input   signed [17:0] weights_matrix_0;  // sfix18_En15
  input   signed [17:0] weights_matrix_1;  // sfix18_En15
  input   signed [17:0] weights_matrix_2;  // sfix18_En15
  input   signed [17:0] weights_matrix_3;  // sfix18_En15
  input   signed [17:0] weights_matrix_4;  // sfix18_En15
  input   signed [17:0] weights_matrix_5;  // sfix18_En15
  input   signed [17:0] weights_matrix_6;  // sfix18_En15
  input   signed [17:0] weights_matrix_7;  // sfix18_En15
  input   signed [17:0] weights_matrix_8;  // sfix18_En15
  input   signed [17:0] weights_matrix_9;  // sfix18_En15
  input   signed [17:0] weights_matrix_10;  // sfix18_En15
  input   signed [17:0] weights_matrix_11;  // sfix18_En15
  input   signed [17:0] weights_matrix_12;  // sfix18_En15
  input   signed [17:0] weights_matrix_13;  // sfix18_En15
  input   signed [17:0] weights_matrix_14;  // sfix18_En15
  input   signed [17:0] weights_matrix_15;  // sfix18_En15
  input   signed [17:0] weights_matrix_16;  // sfix18_En15
  input   signed [17:0] weights_matrix_17;  // sfix18_En15
  input   signed [17:0] weights_matrix_18;  // sfix18_En15
  input   signed [17:0] weights_matrix_19;  // sfix18_En15
  input   signed [17:0] weights_matrix_20;  // sfix18_En15
  input   signed [17:0] weights_matrix_21;  // sfix18_En15
  input   signed [17:0] weights_matrix_22;  // sfix18_En15
  input   signed [17:0] weights_matrix_23;  // sfix18_En15
  input   signed [17:0] weights_matrix_24;  // sfix18_En15
  input   signed [17:0] weights_matrix_25;  // sfix18_En15
  input   signed [17:0] weights_matrix_26;  // sfix18_En15
  input   signed [17:0] weights_matrix_27;  // sfix18_En15
  input   signed [17:0] weights_matrix_28;  // sfix18_En15
  input   signed [17:0] weights_matrix_29;  // sfix18_En15
  input   signed [17:0] weights_matrix_30;  // sfix18_En15
  input   signed [17:0] weights_matrix_31;  // sfix18_En15
  input   signed [17:0] weights_matrix_32;  // sfix18_En15
  input   signed [17:0] weights_matrix_33;  // sfix18_En15
  input   signed [17:0] weights_matrix_34;  // sfix18_En15
  input   signed [17:0] weights_matrix_35;  // sfix18_En15
  input   signed [17:0] bias_vector_0;  // sfix18_En17
  input   signed [17:0] bias_vector_1;  // sfix18_En17
  input   signed [17:0] bias_vector_2;  // sfix18_En17
  input   signed [17:0] bias_vector_3;  // sfix18_En17
  output  [17:0] layer_output_0;  // ufix18_En15
  output  [17:0] layer_output_1;  // ufix18_En15
  output  [17:0] layer_output_2;  // ufix18_En15
  output  [17:0] layer_output_3;  // ufix18_En15


  wire signed [17:0] weights_matrix [0:3] [0:8];  // sfix18_En15 [4x9]
  reg signed [17:0] weights_matrixt [0:8] [0:3];  // sfix18_En15 [9x4]
  wire signed [17:0] weights_matrixt_0_8;  // sfix18_En15
  reg signed [17:0] weights_matrixt_0_8_1;  // sfix18_En15
  reg signed [17:0] layer_input_8_1;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_8_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_8;  // sfix18_En14
  wire signed [17:0] weights_matrixt_0_7;  // sfix18_En15
  reg signed [17:0] weights_matrixt_0_7_1;  // sfix18_En15
  reg signed [17:0] layer_input_7_1;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_7_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_7;  // sfix18_En14
  wire signed [17:0] weights_matrixt_0_6;  // sfix18_En15
  reg signed [17:0] weights_matrixt_0_6_1;  // sfix18_En15
  reg signed [17:0] layer_input_6_1;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_6_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_6;  // sfix18_En14
  wire signed [17:0] weights_matrixt_0_5;  // sfix18_En15
  reg signed [17:0] weights_matrixt_0_5_1;  // sfix18_En15
  reg signed [17:0] layer_input_5_1;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_5_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_5;  // sfix18_En14
  wire signed [17:0] weights_matrixt_0_4;  // sfix18_En15
  reg signed [17:0] weights_matrixt_0_4_1;  // sfix18_En15
  reg signed [17:0] layer_input_4_1;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_4_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_4;  // sfix18_En14
  wire signed [17:0] weights_matrixt_0_3;  // sfix18_En15
  reg signed [17:0] weights_matrixt_0_3_1;  // sfix18_En15
  reg signed [17:0] layer_input_3_1;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_3_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_3;  // sfix18_En14
  wire signed [17:0] weights_matrixt_0_2;  // sfix18_En15
  reg signed [17:0] weights_matrixt_0_2_1;  // sfix18_En15
  reg signed [17:0] layer_input_2_1;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_2_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_2;  // sfix18_En14
  wire signed [17:0] weights_matrixt_0_1;  // sfix18_En15
  reg signed [17:0] weights_matrixt_0_1_1;  // sfix18_En15
  reg signed [17:0] layer_input_1_1;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_1_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_1;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_1_1;  // sfix18_En14
  wire signed [17:0] weights_matrixt_0_0;  // sfix18_En15
  reg signed [17:0] weights_matrixt_0_0_1;  // sfix18_En15
  reg signed [17:0] layer_input_0_1;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_0_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_0;  // sfix18_En14
  wire signed [17:0] weights_matrixt_1_8;  // sfix18_En15
  reg signed [17:0] weights_matrixt_1_8_1;  // sfix18_En15
  reg signed [17:0] layer_input_8_2;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_81_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_8_1;  // sfix18_En14
  wire signed [17:0] weights_matrixt_1_7;  // sfix18_En15
  reg signed [17:0] weights_matrixt_1_7_1;  // sfix18_En15
  reg signed [17:0] layer_input_7_2;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_71_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_7_1;  // sfix18_En14
  wire signed [17:0] weights_matrixt_1_6;  // sfix18_En15
  reg signed [17:0] weights_matrixt_1_6_1;  // sfix18_En15
  reg signed [17:0] layer_input_6_2;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_61_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_6_1;  // sfix18_En14
  wire signed [17:0] weights_matrixt_1_5;  // sfix18_En15
  reg signed [17:0] weights_matrixt_1_5_1;  // sfix18_En15
  reg signed [17:0] layer_input_5_2;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_51_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_5_1;  // sfix18_En14
  wire signed [17:0] weights_matrixt_1_4;  // sfix18_En15
  reg signed [17:0] weights_matrixt_1_4_1;  // sfix18_En15
  reg signed [17:0] layer_input_4_2;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_41_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_4_1;  // sfix18_En14
  wire signed [17:0] weights_matrixt_1_3;  // sfix18_En15
  reg signed [17:0] weights_matrixt_1_3_1;  // sfix18_En15
  reg signed [17:0] layer_input_3_2;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_31_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_3_1;  // sfix18_En14
  wire signed [17:0] weights_matrixt_1_2;  // sfix18_En15
  reg signed [17:0] weights_matrixt_1_2_1;  // sfix18_En15
  reg signed [17:0] layer_input_2_2;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_21_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_2_1;  // sfix18_En14
  wire signed [17:0] weights_matrixt_1_1;  // sfix18_En15
  reg signed [17:0] weights_matrixt_1_1_1;  // sfix18_En15
  reg signed [17:0] layer_input_1_2;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_11_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_1_2;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_1_3;  // sfix18_En14
  wire signed [17:0] weights_matrixt_1_0;  // sfix18_En15
  reg signed [17:0] weights_matrixt_1_0_1;  // sfix18_En15
  reg signed [17:0] layer_input_0_2;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_01_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_0_1;  // sfix18_En14
  wire signed [17:0] weights_matrixt_2_8;  // sfix18_En15
  reg signed [17:0] weights_matrixt_2_8_1;  // sfix18_En15
  reg signed [17:0] layer_input_8_3;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_82_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_8_2;  // sfix18_En14
  wire signed [17:0] weights_matrixt_2_7;  // sfix18_En15
  reg signed [17:0] weights_matrixt_2_7_1;  // sfix18_En15
  reg signed [17:0] layer_input_7_3;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_72_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_7_2;  // sfix18_En14
  wire signed [17:0] weights_matrixt_2_6;  // sfix18_En15
  reg signed [17:0] weights_matrixt_2_6_1;  // sfix18_En15
  reg signed [17:0] layer_input_6_3;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_62_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_6_2;  // sfix18_En14
  wire signed [17:0] weights_matrixt_2_5;  // sfix18_En15
  reg signed [17:0] weights_matrixt_2_5_1;  // sfix18_En15
  reg signed [17:0] layer_input_5_3;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_52_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_5_2;  // sfix18_En14
  wire signed [17:0] weights_matrixt_2_4;  // sfix18_En15
  reg signed [17:0] weights_matrixt_2_4_1;  // sfix18_En15
  reg signed [17:0] layer_input_4_3;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_42_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_4_2;  // sfix18_En14
  wire signed [17:0] weights_matrixt_2_3;  // sfix18_En15
  reg signed [17:0] weights_matrixt_2_3_1;  // sfix18_En15
  reg signed [17:0] layer_input_3_3;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_32_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_3_2;  // sfix18_En14
  wire signed [17:0] weights_matrixt_2_2;  // sfix18_En15
  reg signed [17:0] weights_matrixt_2_2_1;  // sfix18_En15
  reg signed [17:0] layer_input_2_3;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_22_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_2_2;  // sfix18_En14
  wire signed [17:0] weights_matrixt_2_1;  // sfix18_En15
  reg signed [17:0] weights_matrixt_2_1_1;  // sfix18_En15
  reg signed [17:0] layer_input_1_3;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_12_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_1_4;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_1_5;  // sfix18_En14
  wire signed [17:0] weights_matrixt_2_0;  // sfix18_En15
  reg signed [17:0] weights_matrixt_2_0_1;  // sfix18_En15
  reg signed [17:0] layer_input_0_3;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_02_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_0_2;  // sfix18_En14
  wire signed [17:0] weights_matrixt_3_8;  // sfix18_En15
  reg signed [17:0] weights_matrixt_3_8_1;  // sfix18_En15
  reg signed [17:0] layer_input_8_4;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_83_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_8_3;  // sfix18_En14
  wire signed [17:0] weights_matrixt_3_7;  // sfix18_En15
  reg signed [17:0] weights_matrixt_3_7_1;  // sfix18_En15
  reg signed [17:0] layer_input_7_4;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_73_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_7_3;  // sfix18_En14
  wire signed [17:0] weights_matrixt_3_6;  // sfix18_En15
  reg signed [17:0] weights_matrixt_3_6_1;  // sfix18_En15
  reg signed [17:0] layer_input_6_4;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_63_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_6_3;  // sfix18_En14
  wire signed [17:0] weights_matrixt_3_5;  // sfix18_En15
  reg signed [17:0] weights_matrixt_3_5_1;  // sfix18_En15
  reg signed [17:0] layer_input_5_4;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_53_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_5_3;  // sfix18_En14
  wire signed [17:0] weights_matrixt_3_4;  // sfix18_En15
  reg signed [17:0] weights_matrixt_3_4_1;  // sfix18_En15
  reg signed [17:0] layer_input_4_4;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_43_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_4_3;  // sfix18_En14
  wire signed [17:0] weights_matrixt_3_3;  // sfix18_En15
  reg signed [17:0] weights_matrixt_3_3_1;  // sfix18_En15
  reg signed [17:0] layer_input_3_4;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_33_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_3_3;  // sfix18_En14
  wire signed [17:0] weights_matrixt_3_2;  // sfix18_En15
  reg signed [17:0] weights_matrixt_3_2_1;  // sfix18_En15
  reg signed [17:0] layer_input_2_4;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_23_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_2_3;  // sfix18_En14
  wire signed [17:0] weights_matrixt_3_1;  // sfix18_En15
  reg signed [17:0] weights_matrixt_3_1_1;  // sfix18_En15
  reg signed [17:0] layer_input_1_4;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_13_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_1_6;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_1_7;  // sfix18_En14
  wire signed [17:0] weights_matrixt_3_0;  // sfix18_En15
  reg signed [17:0] weights_matrixt_3_0_1;  // sfix18_En15
  reg signed [17:0] layer_input_0_4;  // sfix18_En13
  wire signed [35:0] mul_Product_dotp_03_mul_temp;  // sfix36_En28
  wire signed [17:0] tmp_Product_dotp_0_3;  // sfix18_En14
  wire signed [17:0] delayMatch_out_1;  // sfix18_En17
  reg signed [17:0] delayMatch_1_reg [0:1];  // sfix18 [2]
  wire signed [17:0] delayMatch_out_2;  // sfix18_En17
  wire signed [17:0] delayMatch_out_3;  // sfix18_En17
  wire signed [17:0] delayMatch_out_4;  // sfix18_En17
  reg signed [17:0] delayMatch_1_reg_1 [0:1];  // sfix18 [2]
  reg signed [17:0] delayMatch_1_reg_2 [0:1];  // sfix18 [2]
  reg signed [17:0] delayMatch_1_reg_3 [0:1];  // sfix18 [2]
  wire signed [17:0] delayMatch_1_reg_next [0:1];  // sfix18_En17 [2]
  wire signed [17:0] delayMatch_1_reg_next_1 [0:1];  // sfix18_En17 [2]
  wire signed [17:0] delayMatch_1_reg_next_2 [0:1];  // sfix18_En17 [2]
  wire signed [17:0] delayMatch_1_reg_next_3 [0:1];  // sfix18_En17 [2]
  reg signed [17:0] tmp_Product_dotp_8_4;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_7_4;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_6_4;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_5_4;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_4_4;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_3_4;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_2_4;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_0_4;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_1;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_2;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_3;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_4;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_5;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_6;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_7;  // sfix18_En14
  wire signed [17:0] Product_0_0;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_8_5;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_7_5;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_6_5;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_5_5;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_4_5;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_3_5;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_2_5;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_0_5;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_1_1;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_2_1;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_3_1;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_4_1;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_5_1;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_6_1;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_7_1;  // sfix18_En14
  wire signed [17:0] Product_1_0;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_8_6;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_7_6;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_6_6;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_5_6;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_4_6;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_3_6;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_2_6;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_0_6;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_1_2;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_2_2;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_3_2;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_4_2;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_5_2;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_6_2;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_7_2;  // sfix18_En14
  wire signed [17:0] Product_2_0;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_8_7;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_7_7;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_6_7;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_5_7;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_4_7;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_3_7;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_2_7;  // sfix18_En14
  reg signed [17:0] tmp_Product_dotp_0_7;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_1_3;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_2_3;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_3_3;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_4_3;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_5_3;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_6_3;  // sfix18_En14
  wire signed [17:0] sum_Product_dotp_7_3;  // sfix18_En14
  wire signed [17:0] Product_3_0;  // sfix18_En14
  wire signed [17:0] Product_out1 [0:3];  // sfix18_En14 [4]
  wire signed [17:0] bias_vector [0:3];  // sfix18_En17 [4]
  wire signed [31:0] Add_add_cast;  // sfix32_En17
  wire signed [31:0] Add_add_cast_1;  // sfix32_En17
  wire signed [31:0] Add_add_temp;  // sfix32_En17
  wire signed [31:0] Add_add_cast_2;  // sfix32_En17
  wire signed [31:0] Add_add_cast_3;  // sfix32_En17
  wire signed [31:0] Add_add_temp_1;  // sfix32_En17
  wire signed [31:0] Add_add_cast_4;  // sfix32_En17
  wire signed [31:0] Add_add_cast_5;  // sfix32_En17
  wire signed [31:0] Add_add_temp_2;  // sfix32_En17
  wire signed [31:0] Add_add_cast_6;  // sfix32_En17
  wire signed [31:0] Add_add_cast_7;  // sfix32_En17
  wire signed [31:0] Add_add_temp_3;  // sfix32_En17
  wire signed [17:0] Add_out1 [0:3];  // sfix18_En14 [4]
  reg signed [17:0] HwModeRegister72_reg [0:3];  // sfix18 [4]
  wire signed [17:0] HwModeRegister72_reg_next [0:3];  // sfix18_En14 [4]
  wire signed [17:0] Add_out1_1 [0:3];  // sfix18_En14 [4]
  wire [0:3] Compare_To_Constant_out1;  // boolean [4]
  reg  [0:3] HwModeRegister73_reg;  // ufix1 [4]
  wire [0:3] HwModeRegister73_reg_next;  // ufix1 [4]
  wire [0:3] Compare_To_Constant_out1_1;  // boolean [4]
  wire signed [17:0] Product210_in1;  // sfix18_En14
  wire signed [18:0] Product210_cast;  // sfix19_En14
  wire signed [17:0] Product210_in1_1;  // sfix18_En14
  wire signed [18:0] Product210_cast_1;  // sfix19_En14
  wire signed [17:0] Product210_in1_2;  // sfix18_En14
  wire signed [18:0] Product210_cast_2;  // sfix19_En14
  wire signed [17:0] Product210_in1_3;  // sfix18_En14
  wire signed [18:0] Product210_cast_3;  // sfix19_En14
  wire [17:0] Product2_out1 [0:3];  // ufix18_En15 [4]
  reg [17:0] PipelineRegister36_reg [0:3];  // ufix18 [4]
  wire [17:0] PipelineRegister36_reg_next [0:3];  // ufix18_En15 [4]
  wire [17:0] Product2_out1_1 [0:3];  // ufix18_En15 [4]


  assign weights_matrix[0][0] = weights_matrix_0;
  assign weights_matrix[1][0] = weights_matrix_1;
  assign weights_matrix[2][0] = weights_matrix_2;
  assign weights_matrix[3][0] = weights_matrix_3;
  assign weights_matrix[0][1] = weights_matrix_4;
  assign weights_matrix[1][1] = weights_matrix_5;
  assign weights_matrix[2][1] = weights_matrix_6;
  assign weights_matrix[3][1] = weights_matrix_7;
  assign weights_matrix[0][2] = weights_matrix_8;
  assign weights_matrix[1][2] = weights_matrix_9;
  assign weights_matrix[2][2] = weights_matrix_10;
  assign weights_matrix[3][2] = weights_matrix_11;
  assign weights_matrix[0][3] = weights_matrix_12;
  assign weights_matrix[1][3] = weights_matrix_13;
  assign weights_matrix[2][3] = weights_matrix_14;
  assign weights_matrix[3][3] = weights_matrix_15;
  assign weights_matrix[0][4] = weights_matrix_16;
  assign weights_matrix[1][4] = weights_matrix_17;
  assign weights_matrix[2][4] = weights_matrix_18;
  assign weights_matrix[3][4] = weights_matrix_19;
  assign weights_matrix[0][5] = weights_matrix_20;
  assign weights_matrix[1][5] = weights_matrix_21;
  assign weights_matrix[2][5] = weights_matrix_22;
  assign weights_matrix[3][5] = weights_matrix_23;
  assign weights_matrix[0][6] = weights_matrix_24;
  assign weights_matrix[1][6] = weights_matrix_25;
  assign weights_matrix[2][6] = weights_matrix_26;
  assign weights_matrix[3][6] = weights_matrix_27;
  assign weights_matrix[0][7] = weights_matrix_28;
  assign weights_matrix[1][7] = weights_matrix_29;
  assign weights_matrix[2][7] = weights_matrix_30;
  assign weights_matrix[3][7] = weights_matrix_31;
  assign weights_matrix[0][8] = weights_matrix_32;
  assign weights_matrix[1][8] = weights_matrix_33;
  assign weights_matrix[2][8] = weights_matrix_34;
  assign weights_matrix[3][8] = weights_matrix_35;

  always @* begin
    weights_matrixt[0][32'sd0] = weights_matrix[0][32'sd0];
    weights_matrixt[1][32'sd0] = weights_matrix[0][32'sd1];
    weights_matrixt[2][32'sd0] = weights_matrix[0][32'sd2];
    weights_matrixt[3][32'sd0] = weights_matrix[0][32'sd3];
    weights_matrixt[4][32'sd0] = weights_matrix[0][32'sd4];
    weights_matrixt[5][32'sd0] = weights_matrix[0][32'sd5];
    weights_matrixt[6][32'sd0] = weights_matrix[0][32'sd6];
    weights_matrixt[7][32'sd0] = weights_matrix[0][32'sd7];
    weights_matrixt[8][32'sd0] = weights_matrix[0][32'sd8];
    weights_matrixt[0][32'sd1] = weights_matrix[1][32'sd0];
    weights_matrixt[1][32'sd1] = weights_matrix[1][32'sd1];
    weights_matrixt[2][32'sd1] = weights_matrix[1][32'sd2];
    weights_matrixt[3][32'sd1] = weights_matrix[1][32'sd3];
    weights_matrixt[4][32'sd1] = weights_matrix[1][32'sd4];
    weights_matrixt[5][32'sd1] = weights_matrix[1][32'sd5];
    weights_matrixt[6][32'sd1] = weights_matrix[1][32'sd6];
    weights_matrixt[7][32'sd1] = weights_matrix[1][32'sd7];
    weights_matrixt[8][32'sd1] = weights_matrix[1][32'sd8];
    weights_matrixt[0][32'sd2] = weights_matrix[2][32'sd0];
    weights_matrixt[1][32'sd2] = weights_matrix[2][32'sd1];
    weights_matrixt[2][32'sd2] = weights_matrix[2][32'sd2];
    weights_matrixt[3][32'sd2] = weights_matrix[2][32'sd3];
    weights_matrixt[4][32'sd2] = weights_matrix[2][32'sd4];
    weights_matrixt[5][32'sd2] = weights_matrix[2][32'sd5];
    weights_matrixt[6][32'sd2] = weights_matrix[2][32'sd6];
    weights_matrixt[7][32'sd2] = weights_matrix[2][32'sd7];
    weights_matrixt[8][32'sd2] = weights_matrix[2][32'sd8];
    weights_matrixt[0][32'sd3] = weights_matrix[3][32'sd0];
    weights_matrixt[1][32'sd3] = weights_matrix[3][32'sd1];
    weights_matrixt[2][32'sd3] = weights_matrix[3][32'sd2];
    weights_matrixt[3][32'sd3] = weights_matrix[3][32'sd3];
    weights_matrixt[4][32'sd3] = weights_matrix[3][32'sd4];
    weights_matrixt[5][32'sd3] = weights_matrix[3][32'sd5];
    weights_matrixt[6][32'sd3] = weights_matrix[3][32'sd6];
    weights_matrixt[7][32'sd3] = weights_matrix[3][32'sd7];
    weights_matrixt[8][32'sd3] = weights_matrix[3][32'sd8];
  end



  assign weights_matrixt_0_8 = weights_matrixt[8][0];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister16_process
      if (reset == 1'b1) begin
        weights_matrixt_0_8_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_0_8_1 <= weights_matrixt_0_8;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister17_process
      if (reset == 1'b1) begin
        layer_input_8_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_8_1 <= layer_input_8;
        end
      end
    end



  assign mul_Product_dotp_8_mul_temp = weights_matrixt_0_8_1 * layer_input_8_1;
  assign tmp_Product_dotp_8 = mul_Product_dotp_8_mul_temp[31:14];



  assign weights_matrixt_0_7 = weights_matrixt[7][0];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister14_process
      if (reset == 1'b1) begin
        weights_matrixt_0_7_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_0_7_1 <= weights_matrixt_0_7;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister15_process
      if (reset == 1'b1) begin
        layer_input_7_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_7_1 <= layer_input_7;
        end
      end
    end



  assign mul_Product_dotp_7_mul_temp = weights_matrixt_0_7_1 * layer_input_7_1;
  assign tmp_Product_dotp_7 = mul_Product_dotp_7_mul_temp[31:14];



  assign weights_matrixt_0_6 = weights_matrixt[6][0];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister12_process
      if (reset == 1'b1) begin
        weights_matrixt_0_6_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_0_6_1 <= weights_matrixt_0_6;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister13_process
      if (reset == 1'b1) begin
        layer_input_6_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_6_1 <= layer_input_6;
        end
      end
    end



  assign mul_Product_dotp_6_mul_temp = weights_matrixt_0_6_1 * layer_input_6_1;
  assign tmp_Product_dotp_6 = mul_Product_dotp_6_mul_temp[31:14];



  assign weights_matrixt_0_5 = weights_matrixt[5][0];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister10_process
      if (reset == 1'b1) begin
        weights_matrixt_0_5_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_0_5_1 <= weights_matrixt_0_5;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister11_process
      if (reset == 1'b1) begin
        layer_input_5_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_5_1 <= layer_input_5;
        end
      end
    end



  assign mul_Product_dotp_5_mul_temp = weights_matrixt_0_5_1 * layer_input_5_1;
  assign tmp_Product_dotp_5 = mul_Product_dotp_5_mul_temp[31:14];



  assign weights_matrixt_0_4 = weights_matrixt[4][0];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister8_process
      if (reset == 1'b1) begin
        weights_matrixt_0_4_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_0_4_1 <= weights_matrixt_0_4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister9_process
      if (reset == 1'b1) begin
        layer_input_4_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_4_1 <= layer_input_4;
        end
      end
    end



  assign mul_Product_dotp_4_mul_temp = weights_matrixt_0_4_1 * layer_input_4_1;
  assign tmp_Product_dotp_4 = mul_Product_dotp_4_mul_temp[31:14];



  assign weights_matrixt_0_3 = weights_matrixt[3][0];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister6_process
      if (reset == 1'b1) begin
        weights_matrixt_0_3_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_0_3_1 <= weights_matrixt_0_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister7_process
      if (reset == 1'b1) begin
        layer_input_3_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_3_1 <= layer_input_3;
        end
      end
    end



  assign mul_Product_dotp_3_mul_temp = weights_matrixt_0_3_1 * layer_input_3_1;
  assign tmp_Product_dotp_3 = mul_Product_dotp_3_mul_temp[31:14];



  assign weights_matrixt_0_2 = weights_matrixt[2][0];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister4_process
      if (reset == 1'b1) begin
        weights_matrixt_0_2_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_0_2_1 <= weights_matrixt_0_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister5_process
      if (reset == 1'b1) begin
        layer_input_2_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_2_1 <= layer_input_2;
        end
      end
    end



  assign mul_Product_dotp_2_mul_temp = weights_matrixt_0_2_1 * layer_input_2_1;
  assign tmp_Product_dotp_2 = mul_Product_dotp_2_mul_temp[31:14];



  assign weights_matrixt_0_1 = weights_matrixt[1][0];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        weights_matrixt_0_1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_0_1_1 <= weights_matrixt_0_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        layer_input_1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_1_1 <= layer_input_1;
        end
      end
    end



  assign mul_Product_dotp_1_mul_temp = weights_matrixt_0_1_1 * layer_input_1_1;
  assign tmp_Product_dotp_1 = mul_Product_dotp_1_mul_temp[31:14];



  always @(posedge clk or posedge reset)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_1_1 <= tmp_Product_dotp_1;
        end
      end
    end



  assign weights_matrixt_0_0 = weights_matrixt[0][0];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        weights_matrixt_0_0_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_0_0_1 <= weights_matrixt_0_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        layer_input_0_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_0_1 <= layer_input_0;
        end
      end
    end



  assign mul_Product_dotp_0_mul_temp = weights_matrixt_0_0_1 * layer_input_0_1;
  assign tmp_Product_dotp_0 = mul_Product_dotp_0_mul_temp[31:14];



  assign weights_matrixt_1_8 = weights_matrixt[8][1];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister34_process
      if (reset == 1'b1) begin
        weights_matrixt_1_8_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_1_8_1 <= weights_matrixt_1_8;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister35_process
      if (reset == 1'b1) begin
        layer_input_8_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_8_2 <= layer_input_8;
        end
      end
    end



  assign mul_Product_dotp_81_mul_temp = weights_matrixt_1_8_1 * layer_input_8_2;
  assign tmp_Product_dotp_8_1 = mul_Product_dotp_81_mul_temp[31:14];



  assign weights_matrixt_1_7 = weights_matrixt[7][1];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister32_process
      if (reset == 1'b1) begin
        weights_matrixt_1_7_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_1_7_1 <= weights_matrixt_1_7;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister33_process
      if (reset == 1'b1) begin
        layer_input_7_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_7_2 <= layer_input_7;
        end
      end
    end



  assign mul_Product_dotp_71_mul_temp = weights_matrixt_1_7_1 * layer_input_7_2;
  assign tmp_Product_dotp_7_1 = mul_Product_dotp_71_mul_temp[31:14];



  assign weights_matrixt_1_6 = weights_matrixt[6][1];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister30_process
      if (reset == 1'b1) begin
        weights_matrixt_1_6_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_1_6_1 <= weights_matrixt_1_6;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister31_process
      if (reset == 1'b1) begin
        layer_input_6_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_6_2 <= layer_input_6;
        end
      end
    end



  assign mul_Product_dotp_61_mul_temp = weights_matrixt_1_6_1 * layer_input_6_2;
  assign tmp_Product_dotp_6_1 = mul_Product_dotp_61_mul_temp[31:14];



  assign weights_matrixt_1_5 = weights_matrixt[5][1];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister28_process
      if (reset == 1'b1) begin
        weights_matrixt_1_5_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_1_5_1 <= weights_matrixt_1_5;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister29_process
      if (reset == 1'b1) begin
        layer_input_5_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_5_2 <= layer_input_5;
        end
      end
    end



  assign mul_Product_dotp_51_mul_temp = weights_matrixt_1_5_1 * layer_input_5_2;
  assign tmp_Product_dotp_5_1 = mul_Product_dotp_51_mul_temp[31:14];



  assign weights_matrixt_1_4 = weights_matrixt[4][1];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister26_process
      if (reset == 1'b1) begin
        weights_matrixt_1_4_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_1_4_1 <= weights_matrixt_1_4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister27_process
      if (reset == 1'b1) begin
        layer_input_4_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_4_2 <= layer_input_4;
        end
      end
    end



  assign mul_Product_dotp_41_mul_temp = weights_matrixt_1_4_1 * layer_input_4_2;
  assign tmp_Product_dotp_4_1 = mul_Product_dotp_41_mul_temp[31:14];



  assign weights_matrixt_1_3 = weights_matrixt[3][1];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister24_process
      if (reset == 1'b1) begin
        weights_matrixt_1_3_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_1_3_1 <= weights_matrixt_1_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister25_process
      if (reset == 1'b1) begin
        layer_input_3_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_3_2 <= layer_input_3;
        end
      end
    end



  assign mul_Product_dotp_31_mul_temp = weights_matrixt_1_3_1 * layer_input_3_2;
  assign tmp_Product_dotp_3_1 = mul_Product_dotp_31_mul_temp[31:14];



  assign weights_matrixt_1_2 = weights_matrixt[2][1];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister22_process
      if (reset == 1'b1) begin
        weights_matrixt_1_2_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_1_2_1 <= weights_matrixt_1_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister23_process
      if (reset == 1'b1) begin
        layer_input_2_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_2_2 <= layer_input_2;
        end
      end
    end



  assign mul_Product_dotp_21_mul_temp = weights_matrixt_1_2_1 * layer_input_2_2;
  assign tmp_Product_dotp_2_1 = mul_Product_dotp_21_mul_temp[31:14];



  assign weights_matrixt_1_1 = weights_matrixt[1][1];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister20_process
      if (reset == 1'b1) begin
        weights_matrixt_1_1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_1_1_1 <= weights_matrixt_1_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister21_process
      if (reset == 1'b1) begin
        layer_input_1_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_1_2 <= layer_input_1;
        end
      end
    end



  assign mul_Product_dotp_11_mul_temp = weights_matrixt_1_1_1 * layer_input_1_2;
  assign tmp_Product_dotp_1_2 = mul_Product_dotp_11_mul_temp[31:14];



  always @(posedge clk or posedge reset)
    begin : PipelineRegister10_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_1_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_1_3 <= tmp_Product_dotp_1_2;
        end
      end
    end



  assign weights_matrixt_1_0 = weights_matrixt[0][1];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister18_process
      if (reset == 1'b1) begin
        weights_matrixt_1_0_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_1_0_1 <= weights_matrixt_1_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister19_process
      if (reset == 1'b1) begin
        layer_input_0_2 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_0_2 <= layer_input_0;
        end
      end
    end



  assign mul_Product_dotp_01_mul_temp = weights_matrixt_1_0_1 * layer_input_0_2;
  assign tmp_Product_dotp_0_1 = mul_Product_dotp_01_mul_temp[31:14];



  assign weights_matrixt_2_8 = weights_matrixt[8][2];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister52_process
      if (reset == 1'b1) begin
        weights_matrixt_2_8_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_2_8_1 <= weights_matrixt_2_8;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister53_process
      if (reset == 1'b1) begin
        layer_input_8_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_8_3 <= layer_input_8;
        end
      end
    end



  assign mul_Product_dotp_82_mul_temp = weights_matrixt_2_8_1 * layer_input_8_3;
  assign tmp_Product_dotp_8_2 = mul_Product_dotp_82_mul_temp[31:14];



  assign weights_matrixt_2_7 = weights_matrixt[7][2];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister50_process
      if (reset == 1'b1) begin
        weights_matrixt_2_7_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_2_7_1 <= weights_matrixt_2_7;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister51_process
      if (reset == 1'b1) begin
        layer_input_7_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_7_3 <= layer_input_7;
        end
      end
    end



  assign mul_Product_dotp_72_mul_temp = weights_matrixt_2_7_1 * layer_input_7_3;
  assign tmp_Product_dotp_7_2 = mul_Product_dotp_72_mul_temp[31:14];



  assign weights_matrixt_2_6 = weights_matrixt[6][2];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister48_process
      if (reset == 1'b1) begin
        weights_matrixt_2_6_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_2_6_1 <= weights_matrixt_2_6;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister49_process
      if (reset == 1'b1) begin
        layer_input_6_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_6_3 <= layer_input_6;
        end
      end
    end



  assign mul_Product_dotp_62_mul_temp = weights_matrixt_2_6_1 * layer_input_6_3;
  assign tmp_Product_dotp_6_2 = mul_Product_dotp_62_mul_temp[31:14];



  assign weights_matrixt_2_5 = weights_matrixt[5][2];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister46_process
      if (reset == 1'b1) begin
        weights_matrixt_2_5_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_2_5_1 <= weights_matrixt_2_5;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister47_process
      if (reset == 1'b1) begin
        layer_input_5_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_5_3 <= layer_input_5;
        end
      end
    end



  assign mul_Product_dotp_52_mul_temp = weights_matrixt_2_5_1 * layer_input_5_3;
  assign tmp_Product_dotp_5_2 = mul_Product_dotp_52_mul_temp[31:14];



  assign weights_matrixt_2_4 = weights_matrixt[4][2];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister44_process
      if (reset == 1'b1) begin
        weights_matrixt_2_4_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_2_4_1 <= weights_matrixt_2_4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister45_process
      if (reset == 1'b1) begin
        layer_input_4_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_4_3 <= layer_input_4;
        end
      end
    end



  assign mul_Product_dotp_42_mul_temp = weights_matrixt_2_4_1 * layer_input_4_3;
  assign tmp_Product_dotp_4_2 = mul_Product_dotp_42_mul_temp[31:14];



  assign weights_matrixt_2_3 = weights_matrixt[3][2];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister42_process
      if (reset == 1'b1) begin
        weights_matrixt_2_3_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_2_3_1 <= weights_matrixt_2_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister43_process
      if (reset == 1'b1) begin
        layer_input_3_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_3_3 <= layer_input_3;
        end
      end
    end



  assign mul_Product_dotp_32_mul_temp = weights_matrixt_2_3_1 * layer_input_3_3;
  assign tmp_Product_dotp_3_2 = mul_Product_dotp_32_mul_temp[31:14];



  assign weights_matrixt_2_2 = weights_matrixt[2][2];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister40_process
      if (reset == 1'b1) begin
        weights_matrixt_2_2_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_2_2_1 <= weights_matrixt_2_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister41_process
      if (reset == 1'b1) begin
        layer_input_2_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_2_3 <= layer_input_2;
        end
      end
    end



  assign mul_Product_dotp_22_mul_temp = weights_matrixt_2_2_1 * layer_input_2_3;
  assign tmp_Product_dotp_2_2 = mul_Product_dotp_22_mul_temp[31:14];



  assign weights_matrixt_2_1 = weights_matrixt[1][2];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister38_process
      if (reset == 1'b1) begin
        weights_matrixt_2_1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_2_1_1 <= weights_matrixt_2_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister39_process
      if (reset == 1'b1) begin
        layer_input_1_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_1_3 <= layer_input_1;
        end
      end
    end



  assign mul_Product_dotp_12_mul_temp = weights_matrixt_2_1_1 * layer_input_1_3;
  assign tmp_Product_dotp_1_4 = mul_Product_dotp_12_mul_temp[31:14];



  always @(posedge clk or posedge reset)
    begin : PipelineRegister19_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_1_5 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_1_5 <= tmp_Product_dotp_1_4;
        end
      end
    end



  assign weights_matrixt_2_0 = weights_matrixt[0][2];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister36_process
      if (reset == 1'b1) begin
        weights_matrixt_2_0_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_2_0_1 <= weights_matrixt_2_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister37_process
      if (reset == 1'b1) begin
        layer_input_0_3 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_0_3 <= layer_input_0;
        end
      end
    end



  assign mul_Product_dotp_02_mul_temp = weights_matrixt_2_0_1 * layer_input_0_3;
  assign tmp_Product_dotp_0_2 = mul_Product_dotp_02_mul_temp[31:14];



  assign weights_matrixt_3_8 = weights_matrixt[8][3];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister70_process
      if (reset == 1'b1) begin
        weights_matrixt_3_8_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_3_8_1 <= weights_matrixt_3_8;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister71_process
      if (reset == 1'b1) begin
        layer_input_8_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_8_4 <= layer_input_8;
        end
      end
    end



  assign mul_Product_dotp_83_mul_temp = weights_matrixt_3_8_1 * layer_input_8_4;
  assign tmp_Product_dotp_8_3 = mul_Product_dotp_83_mul_temp[31:14];



  assign weights_matrixt_3_7 = weights_matrixt[7][3];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister68_process
      if (reset == 1'b1) begin
        weights_matrixt_3_7_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_3_7_1 <= weights_matrixt_3_7;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister69_process
      if (reset == 1'b1) begin
        layer_input_7_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_7_4 <= layer_input_7;
        end
      end
    end



  assign mul_Product_dotp_73_mul_temp = weights_matrixt_3_7_1 * layer_input_7_4;
  assign tmp_Product_dotp_7_3 = mul_Product_dotp_73_mul_temp[31:14];



  assign weights_matrixt_3_6 = weights_matrixt[6][3];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister66_process
      if (reset == 1'b1) begin
        weights_matrixt_3_6_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_3_6_1 <= weights_matrixt_3_6;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister67_process
      if (reset == 1'b1) begin
        layer_input_6_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_6_4 <= layer_input_6;
        end
      end
    end



  assign mul_Product_dotp_63_mul_temp = weights_matrixt_3_6_1 * layer_input_6_4;
  assign tmp_Product_dotp_6_3 = mul_Product_dotp_63_mul_temp[31:14];



  assign weights_matrixt_3_5 = weights_matrixt[5][3];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister64_process
      if (reset == 1'b1) begin
        weights_matrixt_3_5_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_3_5_1 <= weights_matrixt_3_5;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister65_process
      if (reset == 1'b1) begin
        layer_input_5_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_5_4 <= layer_input_5;
        end
      end
    end



  assign mul_Product_dotp_53_mul_temp = weights_matrixt_3_5_1 * layer_input_5_4;
  assign tmp_Product_dotp_5_3 = mul_Product_dotp_53_mul_temp[31:14];



  assign weights_matrixt_3_4 = weights_matrixt[4][3];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister62_process
      if (reset == 1'b1) begin
        weights_matrixt_3_4_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_3_4_1 <= weights_matrixt_3_4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister63_process
      if (reset == 1'b1) begin
        layer_input_4_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_4_4 <= layer_input_4;
        end
      end
    end



  assign mul_Product_dotp_43_mul_temp = weights_matrixt_3_4_1 * layer_input_4_4;
  assign tmp_Product_dotp_4_3 = mul_Product_dotp_43_mul_temp[31:14];



  assign weights_matrixt_3_3 = weights_matrixt[3][3];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister60_process
      if (reset == 1'b1) begin
        weights_matrixt_3_3_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_3_3_1 <= weights_matrixt_3_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister61_process
      if (reset == 1'b1) begin
        layer_input_3_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_3_4 <= layer_input_3;
        end
      end
    end



  assign mul_Product_dotp_33_mul_temp = weights_matrixt_3_3_1 * layer_input_3_4;
  assign tmp_Product_dotp_3_3 = mul_Product_dotp_33_mul_temp[31:14];



  assign weights_matrixt_3_2 = weights_matrixt[2][3];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister58_process
      if (reset == 1'b1) begin
        weights_matrixt_3_2_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_3_2_1 <= weights_matrixt_3_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister59_process
      if (reset == 1'b1) begin
        layer_input_2_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_2_4 <= layer_input_2;
        end
      end
    end



  assign mul_Product_dotp_23_mul_temp = weights_matrixt_3_2_1 * layer_input_2_4;
  assign tmp_Product_dotp_2_3 = mul_Product_dotp_23_mul_temp[31:14];



  assign weights_matrixt_3_1 = weights_matrixt[1][3];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister56_process
      if (reset == 1'b1) begin
        weights_matrixt_3_1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_3_1_1 <= weights_matrixt_3_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister57_process
      if (reset == 1'b1) begin
        layer_input_1_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_1_4 <= layer_input_1;
        end
      end
    end



  assign mul_Product_dotp_13_mul_temp = weights_matrixt_3_1_1 * layer_input_1_4;
  assign tmp_Product_dotp_1_6 = mul_Product_dotp_13_mul_temp[31:14];



  always @(posedge clk or posedge reset)
    begin : PipelineRegister28_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_1_7 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_1_7 <= tmp_Product_dotp_1_6;
        end
      end
    end



  assign weights_matrixt_3_0 = weights_matrixt[0][3];

  always @(posedge clk or posedge reset)
    begin : HwModeRegister54_process
      if (reset == 1'b1) begin
        weights_matrixt_3_0_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrixt_3_0_1 <= weights_matrixt_3_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister55_process
      if (reset == 1'b1) begin
        layer_input_0_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_0_4 <= layer_input_0;
        end
      end
    end



  assign mul_Product_dotp_03_mul_temp = weights_matrixt_3_0_1 * layer_input_0_4;
  assign tmp_Product_dotp_0_3 = mul_Product_dotp_03_mul_temp[31:14];



  always @(posedge clk or posedge reset)
    begin : delayMatch_1_process
      if (reset == 1'b1) begin
        delayMatch_1_reg[0] <= 18'sb000000000000000000;
        delayMatch_1_reg[1] <= 18'sb000000000000000000;
        delayMatch_1_reg_1[0] <= 18'sb000000000000000000;
        delayMatch_1_reg_1[1] <= 18'sb000000000000000000;
        delayMatch_1_reg_2[0] <= 18'sb000000000000000000;
        delayMatch_1_reg_2[1] <= 18'sb000000000000000000;
        delayMatch_1_reg_3[0] <= 18'sb000000000000000000;
        delayMatch_1_reg_3[1] <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_1_reg[0] <= delayMatch_1_reg_next[0];
          delayMatch_1_reg[1] <= delayMatch_1_reg_next[1];
          delayMatch_1_reg_1[0] <= delayMatch_1_reg_next_1[0];
          delayMatch_1_reg_1[1] <= delayMatch_1_reg_next_1[1];
          delayMatch_1_reg_2[0] <= delayMatch_1_reg_next_2[0];
          delayMatch_1_reg_2[1] <= delayMatch_1_reg_next_2[1];
          delayMatch_1_reg_3[0] <= delayMatch_1_reg_next_3[0];
          delayMatch_1_reg_3[1] <= delayMatch_1_reg_next_3[1];
        end
      end
    end

  assign delayMatch_1_reg_next[0] = bias_vector_0;
  assign delayMatch_1_reg_next[1] = delayMatch_1_reg[0];
  assign delayMatch_out_1 = delayMatch_1_reg[1];
  assign delayMatch_1_reg_next_1[0] = bias_vector_1;
  assign delayMatch_1_reg_next_1[1] = delayMatch_1_reg_1[0];
  assign delayMatch_out_2 = delayMatch_1_reg_1[1];
  assign delayMatch_1_reg_next_2[0] = bias_vector_2;
  assign delayMatch_1_reg_next_2[1] = delayMatch_1_reg_2[0];
  assign delayMatch_out_3 = delayMatch_1_reg_2[1];
  assign delayMatch_1_reg_next_3[0] = bias_vector_3;
  assign delayMatch_1_reg_next_3[1] = delayMatch_1_reg_3[0];
  assign delayMatch_out_4 = delayMatch_1_reg_3[1];



  always @(posedge clk or posedge reset)
    begin : PipelineRegister8_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_8_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_8_4 <= tmp_Product_dotp_8;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister7_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_7_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_7_4 <= tmp_Product_dotp_7;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister6_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_6_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_6_4 <= tmp_Product_dotp_6;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister5_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_5_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_5_4 <= tmp_Product_dotp_5;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister4_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_4_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_4_4 <= tmp_Product_dotp_4;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister3_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_3_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_3_4 <= tmp_Product_dotp_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister2_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_2_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_2_4 <= tmp_Product_dotp_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_0_4 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_0_4 <= tmp_Product_dotp_0;
        end
      end
    end



  assign sum_Product_dotp_1 = tmp_Product_dotp_1_1 + tmp_Product_dotp_0_4;



  assign sum_Product_dotp_2 = tmp_Product_dotp_2_4 + sum_Product_dotp_1;



  assign sum_Product_dotp_3 = tmp_Product_dotp_3_4 + sum_Product_dotp_2;



  assign sum_Product_dotp_4 = tmp_Product_dotp_4_4 + sum_Product_dotp_3;



  assign sum_Product_dotp_5 = tmp_Product_dotp_5_4 + sum_Product_dotp_4;



  assign sum_Product_dotp_6 = tmp_Product_dotp_6_4 + sum_Product_dotp_5;



  assign sum_Product_dotp_7 = tmp_Product_dotp_7_4 + sum_Product_dotp_6;



  assign Product_0_0 = tmp_Product_dotp_8_4 + sum_Product_dotp_7;



  always @(posedge clk or posedge reset)
    begin : PipelineRegister17_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_8_5 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_8_5 <= tmp_Product_dotp_8_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister16_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_7_5 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_7_5 <= tmp_Product_dotp_7_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister15_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_6_5 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_6_5 <= tmp_Product_dotp_6_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister14_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_5_5 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_5_5 <= tmp_Product_dotp_5_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister13_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_4_5 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_4_5 <= tmp_Product_dotp_4_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister12_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_3_5 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_3_5 <= tmp_Product_dotp_3_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister11_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_2_5 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_2_5 <= tmp_Product_dotp_2_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister9_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_0_5 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_0_5 <= tmp_Product_dotp_0_1;
        end
      end
    end



  assign sum_Product_dotp_1_1 = tmp_Product_dotp_1_3 + tmp_Product_dotp_0_5;



  assign sum_Product_dotp_2_1 = tmp_Product_dotp_2_5 + sum_Product_dotp_1_1;



  assign sum_Product_dotp_3_1 = tmp_Product_dotp_3_5 + sum_Product_dotp_2_1;



  assign sum_Product_dotp_4_1 = tmp_Product_dotp_4_5 + sum_Product_dotp_3_1;



  assign sum_Product_dotp_5_1 = tmp_Product_dotp_5_5 + sum_Product_dotp_4_1;



  assign sum_Product_dotp_6_1 = tmp_Product_dotp_6_5 + sum_Product_dotp_5_1;



  assign sum_Product_dotp_7_1 = tmp_Product_dotp_7_5 + sum_Product_dotp_6_1;



  assign Product_1_0 = tmp_Product_dotp_8_5 + sum_Product_dotp_7_1;



  always @(posedge clk or posedge reset)
    begin : PipelineRegister26_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_8_6 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_8_6 <= tmp_Product_dotp_8_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister25_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_7_6 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_7_6 <= tmp_Product_dotp_7_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister24_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_6_6 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_6_6 <= tmp_Product_dotp_6_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister23_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_5_6 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_5_6 <= tmp_Product_dotp_5_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister22_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_4_6 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_4_6 <= tmp_Product_dotp_4_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister21_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_3_6 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_3_6 <= tmp_Product_dotp_3_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister20_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_2_6 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_2_6 <= tmp_Product_dotp_2_2;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister18_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_0_6 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_0_6 <= tmp_Product_dotp_0_2;
        end
      end
    end



  assign sum_Product_dotp_1_2 = tmp_Product_dotp_1_5 + tmp_Product_dotp_0_6;



  assign sum_Product_dotp_2_2 = tmp_Product_dotp_2_6 + sum_Product_dotp_1_2;



  assign sum_Product_dotp_3_2 = tmp_Product_dotp_3_6 + sum_Product_dotp_2_2;



  assign sum_Product_dotp_4_2 = tmp_Product_dotp_4_6 + sum_Product_dotp_3_2;



  assign sum_Product_dotp_5_2 = tmp_Product_dotp_5_6 + sum_Product_dotp_4_2;



  assign sum_Product_dotp_6_2 = tmp_Product_dotp_6_6 + sum_Product_dotp_5_2;



  assign sum_Product_dotp_7_2 = tmp_Product_dotp_7_6 + sum_Product_dotp_6_2;



  assign Product_2_0 = tmp_Product_dotp_8_6 + sum_Product_dotp_7_2;



  always @(posedge clk or posedge reset)
    begin : PipelineRegister35_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_8_7 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_8_7 <= tmp_Product_dotp_8_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister34_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_7_7 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_7_7 <= tmp_Product_dotp_7_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister33_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_6_7 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_6_7 <= tmp_Product_dotp_6_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister32_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_5_7 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_5_7 <= tmp_Product_dotp_5_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister31_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_4_7 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_4_7 <= tmp_Product_dotp_4_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister30_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_3_7 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_3_7 <= tmp_Product_dotp_3_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister29_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_2_7 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_2_7 <= tmp_Product_dotp_2_3;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : PipelineRegister27_process
      if (reset == 1'b1) begin
        tmp_Product_dotp_0_7 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product_dotp_0_7 <= tmp_Product_dotp_0_3;
        end
      end
    end



  assign sum_Product_dotp_1_3 = tmp_Product_dotp_1_7 + tmp_Product_dotp_0_7;



  assign sum_Product_dotp_2_3 = tmp_Product_dotp_2_7 + sum_Product_dotp_1_3;



  assign sum_Product_dotp_3_3 = tmp_Product_dotp_3_7 + sum_Product_dotp_2_3;



  assign sum_Product_dotp_4_3 = tmp_Product_dotp_4_7 + sum_Product_dotp_3_3;



  assign sum_Product_dotp_5_3 = tmp_Product_dotp_5_7 + sum_Product_dotp_4_3;



  assign sum_Product_dotp_6_3 = tmp_Product_dotp_6_7 + sum_Product_dotp_5_3;



  assign sum_Product_dotp_7_3 = tmp_Product_dotp_7_7 + sum_Product_dotp_6_3;



  assign Product_3_0 = tmp_Product_dotp_8_7 + sum_Product_dotp_7_3;



  assign Product_out1[0] = Product_0_0;
  assign Product_out1[1] = Product_1_0;
  assign Product_out1[2] = Product_2_0;
  assign Product_out1[3] = Product_3_0;

  assign bias_vector[0] = delayMatch_out_1;
  assign bias_vector[1] = delayMatch_out_2;
  assign bias_vector[2] = delayMatch_out_3;
  assign bias_vector[3] = delayMatch_out_4;

  assign Add_add_cast = {{11{Product_out1[0][17]}}, {Product_out1[0], 3'b000}};
  assign Add_add_cast_1 = {{14{bias_vector[0][17]}}, bias_vector[0]};
  assign Add_add_temp = Add_add_cast + Add_add_cast_1;
  assign Add_out1[0] = Add_add_temp[20:3];
  assign Add_add_cast_2 = {{11{Product_out1[1][17]}}, {Product_out1[1], 3'b000}};
  assign Add_add_cast_3 = {{14{bias_vector[1][17]}}, bias_vector[1]};
  assign Add_add_temp_1 = Add_add_cast_2 + Add_add_cast_3;
  assign Add_out1[1] = Add_add_temp_1[20:3];
  assign Add_add_cast_4 = {{11{Product_out1[2][17]}}, {Product_out1[2], 3'b000}};
  assign Add_add_cast_5 = {{14{bias_vector[2][17]}}, bias_vector[2]};
  assign Add_add_temp_2 = Add_add_cast_4 + Add_add_cast_5;
  assign Add_out1[2] = Add_add_temp_2[20:3];
  assign Add_add_cast_6 = {{11{Product_out1[3][17]}}, {Product_out1[3], 3'b000}};
  assign Add_add_cast_7 = {{14{bias_vector[3][17]}}, bias_vector[3]};
  assign Add_add_temp_3 = Add_add_cast_6 + Add_add_cast_7;
  assign Add_out1[3] = Add_add_temp_3[20:3];



  always @(posedge clk or posedge reset)
    begin : HwModeRegister72_process
      if (reset == 1'b1) begin
        HwModeRegister72_reg[0] <= 18'sb000000000000000000;
        HwModeRegister72_reg[1] <= 18'sb000000000000000000;
        HwModeRegister72_reg[2] <= 18'sb000000000000000000;
        HwModeRegister72_reg[3] <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          HwModeRegister72_reg[0] <= HwModeRegister72_reg_next[0];
          HwModeRegister72_reg[1] <= HwModeRegister72_reg_next[1];
          HwModeRegister72_reg[2] <= HwModeRegister72_reg_next[2];
          HwModeRegister72_reg[3] <= HwModeRegister72_reg_next[3];
        end
      end
    end

  assign Add_out1_1[0] = HwModeRegister72_reg[0];
  assign Add_out1_1[1] = HwModeRegister72_reg[1];
  assign Add_out1_1[2] = HwModeRegister72_reg[2];
  assign Add_out1_1[3] = HwModeRegister72_reg[3];
  assign HwModeRegister72_reg_next[0] = Add_out1[0];
  assign HwModeRegister72_reg_next[1] = Add_out1[1];
  assign HwModeRegister72_reg_next[2] = Add_out1[2];
  assign HwModeRegister72_reg_next[3] = Add_out1[3];



  assign Compare_To_Constant_out1[0] = Add_out1[0] >= 18'sb000000000000000000;
  assign Compare_To_Constant_out1[1] = Add_out1[1] >= 18'sb000000000000000000;
  assign Compare_To_Constant_out1[2] = Add_out1[2] >= 18'sb000000000000000000;
  assign Compare_To_Constant_out1[3] = Add_out1[3] >= 18'sb000000000000000000;



  always @(posedge clk or posedge reset)
    begin : HwModeRegister73_process
      if (reset == 1'b1) begin
        HwModeRegister73_reg[0] <= 1'b0;
        HwModeRegister73_reg[1] <= 1'b0;
        HwModeRegister73_reg[2] <= 1'b0;
        HwModeRegister73_reg[3] <= 1'b0;
      end
      else begin
        if (enb) begin
          HwModeRegister73_reg[0] <= HwModeRegister73_reg_next[0];
          HwModeRegister73_reg[1] <= HwModeRegister73_reg_next[1];
          HwModeRegister73_reg[2] <= HwModeRegister73_reg_next[2];
          HwModeRegister73_reg[3] <= HwModeRegister73_reg_next[3];
        end
      end
    end

  assign Compare_To_Constant_out1_1[0] = HwModeRegister73_reg[0];
  assign Compare_To_Constant_out1_1[1] = HwModeRegister73_reg[1];
  assign Compare_To_Constant_out1_1[2] = HwModeRegister73_reg[2];
  assign Compare_To_Constant_out1_1[3] = HwModeRegister73_reg[3];
  assign HwModeRegister73_reg_next[0] = Compare_To_Constant_out1[0];
  assign HwModeRegister73_reg_next[1] = Compare_To_Constant_out1[1];
  assign HwModeRegister73_reg_next[2] = Compare_To_Constant_out1[2];
  assign HwModeRegister73_reg_next[3] = Compare_To_Constant_out1[3];



  assign Product210_in1 = (Compare_To_Constant_out1_1[0] == 1'b1 ? Add_out1_1[0] :
              18'sb000000000000000000);
  assign Product210_cast = {Product210_in1[17], Product210_in1};
  assign Product2_out1[0] = {Product210_cast[16:0], 1'b0};
  assign Product210_in1_1 = (Compare_To_Constant_out1_1[1] == 1'b1 ? Add_out1_1[1] :
              18'sb000000000000000000);
  assign Product210_cast_1 = {Product210_in1_1[17], Product210_in1_1};
  assign Product2_out1[1] = {Product210_cast_1[16:0], 1'b0};
  assign Product210_in1_2 = (Compare_To_Constant_out1_1[2] == 1'b1 ? Add_out1_1[2] :
              18'sb000000000000000000);
  assign Product210_cast_2 = {Product210_in1_2[17], Product210_in1_2};
  assign Product2_out1[2] = {Product210_cast_2[16:0], 1'b0};
  assign Product210_in1_3 = (Compare_To_Constant_out1_1[3] == 1'b1 ? Add_out1_1[3] :
              18'sb000000000000000000);
  assign Product210_cast_3 = {Product210_in1_3[17], Product210_in1_3};
  assign Product2_out1[3] = {Product210_cast_3[16:0], 1'b0};



  always @(posedge clk or posedge reset)
    begin : PipelineRegister36_process
      if (reset == 1'b1) begin
        PipelineRegister36_reg[0] <= 18'b000000000000000000;
        PipelineRegister36_reg[1] <= 18'b000000000000000000;
        PipelineRegister36_reg[2] <= 18'b000000000000000000;
        PipelineRegister36_reg[3] <= 18'b000000000000000000;
      end
      else begin
        if (enb) begin
          PipelineRegister36_reg[0] <= PipelineRegister36_reg_next[0];
          PipelineRegister36_reg[1] <= PipelineRegister36_reg_next[1];
          PipelineRegister36_reg[2] <= PipelineRegister36_reg_next[2];
          PipelineRegister36_reg[3] <= PipelineRegister36_reg_next[3];
        end
      end
    end

  assign Product2_out1_1[0] = PipelineRegister36_reg[0];
  assign Product2_out1_1[1] = PipelineRegister36_reg[1];
  assign Product2_out1_1[2] = PipelineRegister36_reg[2];
  assign Product2_out1_1[3] = PipelineRegister36_reg[3];
  assign PipelineRegister36_reg_next[0] = Product2_out1[0];
  assign PipelineRegister36_reg_next[1] = Product2_out1[1];
  assign PipelineRegister36_reg_next[2] = Product2_out1[2];
  assign PipelineRegister36_reg_next[3] = Product2_out1[3];



  assign layer_output_0 = Product2_out1_1[0];

  assign layer_output_1 = Product2_out1_1[1];

  assign layer_output_2 = Product2_out1_1[2];

  assign layer_output_3 = Product2_out1_1[3];

endmodule  // Input_Layer_4_Neurons

