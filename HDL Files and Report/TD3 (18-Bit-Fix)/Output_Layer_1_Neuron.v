// -------------------------------------------------------------
// 
// File Name: /Users/ciaran/Documents/MATLAB/Yr3 Intel/stableTD3/hdlsrc/ControllerTestbench/ControllerTestbench/Output_Layer_1_Neuron.v
// Created: 2021-06-15 22:29:09
// 
// Generated by MATLAB 9.9 and HDL Coder 3.17
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: Output_Layer_1_Neuron
// Source Path: ControllerTestbench/Controller_equiv_DC_motor1/PI_Ctrl_float_speed/Reinforcement Learning1/Subsystem 
// Reference2/Output Layer (1 Neuron
// Hierarchy Level: 1
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module Output_Layer_1_Neuron
          (clk,
           reset,
           enb,
           layer_input_0,
           layer_input_1,
           weights_matrix1_0,
           weights_matrix1_1,
           bias_vector1,
           layer_output);


  input   clk;
  input   reset;
  input   enb;
  input   [17:0] layer_input_0;  // ufix18_En14
  input   [17:0] layer_input_1;  // ufix18_En14
  input   signed [17:0] weights_matrix1_0;  // sfix18_En15
  input   signed [17:0] weights_matrix1_1;  // sfix18_En15
  input   [17:0] bias_vector1;  // ufix18_En18
  output  signed [17:0] layer_output;  // sfix18_En16


  reg signed [17:0] weights_matrix1_1_1;  // sfix18_En15
  reg [17:0] layer_input_1_1;  // ufix18_En14
  wire signed [18:0] mul_Product1_dotp_1_cast;  // sfix19_En14
  wire signed [36:0] mul_Product1_dotp_1_mul_temp;  // sfix37_En29
  wire signed [35:0] mul_Product1_dotp_1_cast_1;  // sfix36_En29
  wire signed [17:0] tmp_Product1_dotp_1;  // sfix18_En11
  reg signed [17:0] tmp_Product1_dotp_1_1;  // sfix18_En11
  reg signed [17:0] weights_matrix1_0_1;  // sfix18_En15
  reg [17:0] layer_input_0_1;  // ufix18_En14
  wire signed [18:0] mul_Product1_dotp_0_cast;  // sfix19_En14
  wire signed [36:0] mul_Product1_dotp_0_mul_temp;  // sfix37_En29
  wire signed [35:0] mul_Product1_dotp_0_cast_1;  // sfix36_En29
  wire signed [17:0] tmp_Product1_dotp_0;  // sfix18_En11
  reg signed [17:0] tmp_Product1_dotp_0_1;  // sfix18_En11
  wire signed [17:0] Product1_0_0;  // sfix18_En11
  reg [17:0] delayMatch_reg [0:1];  // ufix18 [2]
  wire [17:0] delayMatch_reg_next [0:1];  // ufix18_En18 [2]
  wire [17:0] bias_vector1_1;  // ufix18_En18
  wire signed [17:0] Add1_add_cast;  // sfix18_En11
  wire signed [17:0] Add1_out1;  // sfix18_En11
  wire [31:0] Data_Type_Conversion2_out1;  // ufix32
  wire [31:0] Tanh_out1;  // ufix32
  wire signed [17:0] Data_Type_Conversion1_out1;  // sfix18_En16


  always @(posedge clk or posedge reset)
    begin : HwModeRegister2_process
      if (reset == 1'b1) begin
        weights_matrix1_1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrix1_1_1 <= weights_matrix1_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister3_process
      if (reset == 1'b1) begin
        layer_input_1_1 <= 18'b000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_1_1 <= layer_input_1;
        end
      end
    end



  assign mul_Product1_dotp_1_cast = {1'b0, layer_input_1_1};
  assign mul_Product1_dotp_1_mul_temp = weights_matrix1_1_1 * mul_Product1_dotp_1_cast;
  assign mul_Product1_dotp_1_cast_1 = mul_Product1_dotp_1_mul_temp[35:0];
  assign tmp_Product1_dotp_1 = mul_Product1_dotp_1_cast_1[35:18];



  always @(posedge clk or posedge reset)
    begin : PipelineRegister1_process
      if (reset == 1'b1) begin
        tmp_Product1_dotp_1_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product1_dotp_1_1 <= tmp_Product1_dotp_1;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister_process
      if (reset == 1'b1) begin
        weights_matrix1_0_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          weights_matrix1_0_1 <= weights_matrix1_0;
        end
      end
    end



  always @(posedge clk or posedge reset)
    begin : HwModeRegister1_process
      if (reset == 1'b1) begin
        layer_input_0_1 <= 18'b000000000000000000;
      end
      else begin
        if (enb) begin
          layer_input_0_1 <= layer_input_0;
        end
      end
    end



  assign mul_Product1_dotp_0_cast = {1'b0, layer_input_0_1};
  assign mul_Product1_dotp_0_mul_temp = weights_matrix1_0_1 * mul_Product1_dotp_0_cast;
  assign mul_Product1_dotp_0_cast_1 = mul_Product1_dotp_0_mul_temp[35:0];
  assign tmp_Product1_dotp_0 = mul_Product1_dotp_0_cast_1[35:18];



  always @(posedge clk or posedge reset)
    begin : PipelineRegister_process
      if (reset == 1'b1) begin
        tmp_Product1_dotp_0_1 <= 18'sb000000000000000000;
      end
      else begin
        if (enb) begin
          tmp_Product1_dotp_0_1 <= tmp_Product1_dotp_0;
        end
      end
    end



  // 
  assign Product1_0_0 = tmp_Product1_dotp_1_1 + tmp_Product1_dotp_0_1;



  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 18'b000000000000000000;
        delayMatch_reg[1] <= 18'b000000000000000000;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
        end
      end
    end

  assign bias_vector1_1 = delayMatch_reg[1];
  assign delayMatch_reg_next[0] = bias_vector1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];



  assign Add1_add_cast = {7'b0, bias_vector1_1[17:7]};
  assign Add1_out1 = Product1_0_0 + Add1_add_cast;



  nfp_convert_sfix_18_En11_to_single u_ControllerTestbench_Controller_equiv_DC_motor1_PI_Ctrl_float_speed_Reinforcement_Learning1_Subsystem_Reference2_Output_Layer_1_Neuron_nfp_convert_sfix_18_En11_to_single (.clk(clk),
                                                                                                                                                                                                                 .reset(reset),
                                                                                                                                                                                                                 .enb(enb),
                                                                                                                                                                                                                 .nfp_in(Add1_out1),  // sfix18_En11
                                                                                                                                                                                                                 .nfp_out(Data_Type_Conversion2_out1)  // single
                                                                                                                                                                                                                 );

  nfp_tanh_single u_nfp_tanh_comp (.clk(clk),
                                   .reset(reset),
                                   .enb(enb),
                                   .nfp_in(Data_Type_Conversion2_out1),  // single
                                   .nfp_out(Tanh_out1)  // single
                                   );

  nfp_convert_single_to_sfix_18_En16 u_ControllerTestbench_Controller_equiv_DC_motor1_PI_Ctrl_float_speed_Reinforcement_Learning1_Subsystem_Reference2_Output_Layer_1_Neuron_nfp_convert_single_to_sfix_18_En16 (.clk(clk),
                                                                                                                                                                                                                 .reset(reset),
                                                                                                                                                                                                                 .enb(enb),
                                                                                                                                                                                                                 .nfp_in(Tanh_out1),  // single
                                                                                                                                                                                                                 .nfp_out(Data_Type_Conversion1_out1)  // sfix18_En16
                                                                                                                                                                                                                 );

  assign layer_output = Data_Type_Conversion1_out1;

endmodule  // Output_Layer_1_Neuron

